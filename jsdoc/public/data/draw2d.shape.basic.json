{
  "name": "basic",
  "namespace": "draw2d.shape",
  "description": "",
  "access": "",
  "virtual": false,
  "classes": [
    {
      "name": "Arc",
      "namespace": "draw2d.shape.basic",
      "description": "<p>draw2d.shape.basic.Arc\nOval figure.</p>",
      "extends": [
        "draw2d.VectorFigure"
      ],
      "access": "",
      "virtual": false,
      "fires": "",
      "constructor": {
        "name": "Arc",
        "description": "",
        "parameters": [],
        "examples": [
          "let arc =  new draw2d.shape.basic.Arc({diameter:150, x:50, y:10, startAngle:0, endAngle:45});\n\n    canvas.add(arc);"
        ]
      },
      "functions": [
        {
          "name": "init",
          "access": "",
          "virtual": false,
          "description": "<p>Creates a new figure element which are not assigned to any canvas.</p>",
          "parameters": [
            {
              "name": "attr",
              "type": "Object",
              "description": "<p>the configuration of the shape</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "createSet",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setRadius",
          "access": "",
          "virtual": false,
          "description": "<p>Sets the corner radius or the edges.</p>",
          "parameters": [
            {
              "name": "radius",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getRadius",
          "access": "",
          "virtual": false,
          "description": "<p>Get the corner radius of the edges.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setDashArray",
          "access": "",
          "virtual": false,
          "description": "<p>Set the line style for this object.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   dash: dashPattern\n });</code></pre>",
          "parameters": [
            {
              "name": "dash",
              "type": "String",
              "description": "<p>can be one of this [&quot;&quot;, &quot;-&quot;, &quot;.&quot;, &quot;-.&quot;, &quot;-..&quot;, &quot;. &quot;, &quot;- &quot;, &quot;--&quot;, &quot;- .&quot;, &quot;--.&quot;, &quot;--..&quot;]</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getDashArray",
          "access": "",
          "virtual": false,
          "description": "<p>Get the line style for this object.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr(&quot;dash&quot;);</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setGlow",
          "access": "",
          "virtual": false,
          "description": "<p>Highlight the element or remove the highlighting</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>indicates glow/noGlow</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "repaint",
          "access": "private",
          "virtual": false,
          "description": "<p>propagate all attributes like color, stroke,... to the shape element</p>",
          "parameters": [
            {
              "name": "attributes",
              "type": "Object",
              "description": "<p>the style attributes for the SVG shape</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setBackgroundColor",
          "access": "",
          "virtual": false,
          "description": "<p>Set the new background color of the figure. It is possible to hands over\n<code>null</code> to set the background transparent.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;bgColor&quot;: &quot;#f0f0f0&quot;\n });</code></pre>",
          "parameters": [
            {
              "name": "color",
              "type": [
                "String",
                "draw2d.util.Color"
              ],
              "description": "<p>The new background color of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getBackgroundColor",
          "access": "",
          "virtual": false,
          "description": "<p>The current used background color.</p>\n<pre><code> // Alternatively you can use the attr method:\n var color =figure.attr(&quot;bgColor&quot;);</code></pre>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.Color",
            "description": ""
          }
        },
        {
          "name": "setStroke",
          "access": "",
          "virtual": false,
          "description": "<p>Set the stroke to use.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;stroke&quot;: 2\n });</code></pre>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "<p>The new line width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getStroke",
          "access": "",
          "virtual": false,
          "description": "<p>The used line width.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setColor",
          "access": "",
          "virtual": false,
          "description": "<p>Set the foreground color of the figure.\nThis method fires a <i>document dirty</i> event.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;color&quot;: &quot;#f3f3f3&quot;\n });</code></pre>",
          "parameters": [
            {
              "name": "color",
              "type": [
                "String",
                "draw2d.util.Color"
              ],
              "description": "<p>The new color of the line.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getColor",
          "access": "",
          "virtual": false,
          "description": "<p>Get the current used foreground color</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.Color",
            "description": ""
          }
        },
        {
          "name": "getPersistentAttributes",
          "access": "",
          "virtual": false,
          "description": "<p>Return an objects with all important attributes for XML or JSON serialization</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Object",
            "description": ""
          }
        },
        {
          "name": "setPersistentAttributes",
          "access": "",
          "virtual": false,
          "description": "<p>Read all attributes from the serialized properties and transfer them into the shape.</p>",
          "parameters": [
            {
              "name": "memento",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setPersistPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Indicates if the node should read/write the ports via the draw2d.Figure.getPersistenAttributes\nto the JSON object</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPersistPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Indicates if the figure writes the ports to the JSON structore too.\nDefault is &quot;false&quot;</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "toFront",
          "access": "",
          "virtual": false,
          "description": "<p>Moves the element so it is the closest to the viewerâ€™s eyes, on top of other elements. Additional\nthe internal model changed as well.</p>\n<p>Optional: Inserts current object in front of the given one.</p>",
          "parameters": [
            {
              "name": "figure",
              "type": "draw2d.Figure",
              "description": "<p>move current object in front of the given one.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "toBack",
          "access": "",
          "virtual": false,
          "description": "<p>Moves the element to the background. Additional\nthe internal model changed as well.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setVisible",
          "access": "",
          "virtual": false,
          "description": "<p>Show/hide the element. The element didn't receive any mouse events (click, dblclick) if you hide the\nfigure.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   visible: flag\n });</code></pre>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "duration",
              "type": "Number",
              "description": "<p>the optional number for the fadeIn /fadeOut of the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Return all ports of the node. The results contains\nall ports of the children too per default. Set <b>recursive</b>\nto false to retrieve direct assigned ports only.</p>",
          "parameters": [
            {
              "name": "recursive",
              "type": "Boolean",
              "description": "<p>indicates if the method should return children ports too. Default is <b>true</b></p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "getInputPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Return all input ports of the node.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "getOutputPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Return all output ports of the node.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "clone",
          "access": "",
          "virtual": false,
          "description": "<p>Clone the figure. <br>\nYou must override and implement the methods <b>getPersistentAttributes</b> and <b>setPersistentAttributes</b> for your custom\nfigures if the have special attributes.</p>\n<p>The clone() method performs a deep copy of the object, meaning that it copies the children, ports and decorations\nper default. You can control the clone procedure with the 'cloneMetaData'.</p>",
          "parameters": [
            {
              "name": "cloneMetaData",
              "type": "Object",
              "description": "<p>controls the clone procedure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "cloneMetaData.excludeChildren",
              "type": "Boolean",
              "description": "<p>set it to true if you want exclude the children.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "cloneMetaData.excludePorts",
              "type": "Boolean",
              "description": "<p>set it to true if you want exclude the ports of the node.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portName",
              "type": "String",
              "description": "<p>The name of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.Port",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getInputPort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the input port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.InputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getOutputPort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the output port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or the numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.OutputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getHybridPort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the input port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.InputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "addPort",
          "access": "",
          "virtual": false,
          "description": "<p>Add a port to this node at the given position.<br></p>",
          "parameters": [
            {
              "name": "port",
              "type": "draw2d.Port",
              "description": "<p>The new port to add.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>The layout for the port.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "resetPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Remove all ports of this node</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "removePort",
          "access": "",
          "virtual": false,
          "description": "<p>Removes a port and all related connections from this node.<br></p>",
          "parameters": [
            {
              "name": "port",
              "type": "draw2d.Port",
              "description": "<p>The port to remove.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "createPort",
          "access": "",
          "virtual": false,
          "description": "<p>Create a standard Port for this element. Inherited class can override this\nmethod to create its own type of ports.</p>",
          "parameters": [
            {
              "name": "type",
              "type": "String",
              "description": "<p>the type of the requested port. possible [&quot;input&quot;, &quot;output&quot;]</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>the layouter to use for this port</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getConnections",
          "access": "",
          "virtual": false,
          "description": "<p>Return all connections related to this node.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "setCanvas",
          "access": "",
          "virtual": false,
          "description": "<p>Set the canvas element of this figures. This can be used to determine whenever an element\nis added or removed to the canvas.</p>",
          "parameters": [
            {
              "name": "canvas",
              "type": "draw2d.Canvas",
              "description": "<p>the new parent of the figure or null</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setRotationAngle",
          "access": "",
          "virtual": false,
          "description": "<p>Set the rotation angle in degree [0..356]<br>\n<b>Only steps of 90 degree is working well</b>\n<br>\n// Alternatively you can use the attr method:\nfigure.attr({\nangle: angle\n});</p>",
          "parameters": [
            {
              "name": "angle",
              "type": "Number",
              "description": "<p>the rotation angle in degree</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setDimension",
          "access": "",
          "virtual": false,
          "description": "<p>Set the new width and height of the figure.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n    width:  w,\n    height: h\n });</code></pre>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "<p>The new width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "h",
              "type": "Number",
              "description": "<p>The new height of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onPortValueChanged",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the value of any port has been changed</p>",
          "parameters": [
            {
              "name": "relatedPort",
              "type": "draw2d.Port",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "layoutPorts",
          "access": "private",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "createCommand",
          "access": "private",
          "virtual": false,
          "description": "<p>Returns the Command to perform the specified Request or null.</p>",
          "parameters": [
            {
              "name": "request",
              "type": "draw2d.command.CommandType",
              "description": "<p>describes the Command being requested</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.command.Command",
            "description": "<p>null or a Command</p>"
          }
        },
        {
          "name": "attr",
          "access": "",
          "virtual": false,
          "description": "<p>Read or set shape attributes.<br>\nWhen no value is given, reads specified attribute from the element.<br>\nWhen value is given, sets the attribute to that value.\nMultiple attributes can be set by passing an object with name-value pairs.</p>\n<pre><code>let figure = new draw2d.shape.basic.Rectangle();\nfigure.attr('x');      //=&gt; read value\nfigure.attr('x', 30);  //=&gt; set value\n\n// multiple attributes:\nfigure.attr({\n  x: 30,\n  y: 40,\n  width : 200,\n  height: 50,\n  cssClass: &quot;red_border_figure&quot;\n});\n\n// it is possible to override any method of the figure as well\n// Instead of inheritance you can just override the callback methods\n// like\n//\nfigure.attr({\n   onClick : function(){\n       alert(&quot;click&quot;);\n   }\n});\n\n// or you can pass the attr values in the constructor\n//\nlet clickFigure = new draw2d.shape.basic.Rectangle({\n   onClick : function(){\n       alert(&quot;click&quot;);\n   }\n});\n</code></pre>\n<p>Additional you can set the user defined values (userData) with this method\nusing the dot-notation. User defined values are always part of the exported\nJSON data.</p>\n<pre><code>// setting multiple attributes:\nfigure.attr({\n  &quot;userData.my.property.x&quot;: 30,\n  &quot;userData.my.property.y&quot;: 40\n});\n</code></pre>\n<p>Also set using array notation is possible for the userData:</p>\n<pre><code>// dot notation and array brackets:\nfigure.attr({\n  &quot;userData.my.names[0]&quot;: &quot;John&quot;,\n  &quot;userData.my.names[1]&quot;: &quot;Doe&quot;\n});\n</code></pre>\n<p>The Object returned should be the equivalent structured object:</p>\n<pre><code>let obj = figure.getUserData();\n</code></pre>\n<p>That is, where obj is equivalent to:</p>\n<pre><code>let obj = {\n    my:{\n        property:{\n            x: 30,\n            y: 40\n       },\n       names:  [&quot;John&quot;, &quot;Doe&quot;]\n   }\n</code></pre>\n<p>};</p>",
          "parameters": [
            {
              "name": "name",
              "type": "String/Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "value",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "pick",
          "access": "",
          "virtual": false,
          "description": "<p>Return a copy of the object, filtered to only have values for the whitelisted keys.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "select",
          "access": "private",
          "virtual": false,
          "description": "<p>Add the figure to the current selection and propagate this to all edit policies.</p>",
          "parameters": [
            {
              "name": "asPrimarySelection",
              "type": "Boolean",
              "description": "<p>true if the element should be the primary selection</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "unselect",
          "access": "private",
          "virtual": false,
          "description": "<p>Unselect the figure and propagete this event to all edit policies.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setSelectionAdapter",
          "access": "",
          "virtual": false,
          "description": "<p>Returns a function which returns the the figure which must handle the selection handling.</p>",
          "parameters": [
            {
              "name": "adapter",
              "type": "function",
              "description": "<p>function which returns the figure which handles the selection handling</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getSelectionAdapter",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "function",
            "description": ""
          }
        },
        {
          "name": "isSelected",
          "access": "",
          "virtual": false,
          "description": "<p>Returns true if the figure part of the current canvas selection.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setUserData",
          "access": "",
          "virtual": false,
          "description": "<p>Allows a user to attach (or remove) data to an element, without needing to create a custom figure or shape.\nThe data must be a valid JSON object.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   userData: object\n });</code></pre>",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getUserData",
          "access": "",
          "virtual": false,
          "description": "<p>Returns any user data set previously on the given figure by setUserData.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Object",
            "description": ""
          }
        },
        {
          "name": "getId",
          "access": "",
          "virtual": false,
          "description": "<p>Return the UUID of this element.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "setId",
          "access": "",
          "virtual": false,
          "description": "<p>Set the id of this element.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  id: newId\n});</code></pre>",
          "parameters": [
            {
              "name": "newId",
              "type": "String",
              "description": "<p>the new id for this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Return the css styling class name of the element.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "setCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Set the css class of the node.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;cssClass&quot;: &quot;red_border_figure&quot;\n });</code></pre>",
          "parameters": [
            {
              "name": "cssClass",
              "type": "String",
              "description": "<p>the new css class name of the node</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "hasCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>The method will return true if the class is assigned to the element, even if other classes also are.</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the class name to check</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "addCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Add a CSS class to the figure.<br>\nIt's important to note that this method does not replace a class. It simply adds the class,\nappending it to any which may already be assigned to the elements.</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "removeCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Remove the given css class name from the figure</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the css class name to add</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "toggleCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Add or remove the given css class name from the figure</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the class name to toggle</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getCanvas",
          "access": "",
          "virtual": false,
          "description": "<p>Return the current assigned canvas container.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.Canvas",
            "description": ""
          }
        },
        {
          "name": "startTimer",
          "access": "",
          "virtual": false,
          "description": "<p>Start a timer which calls the onTimer method in the given interval.</p>",
          "parameters": [
            {
              "name": "milliSeconds",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "stopTimer",
          "access": "",
          "virtual": false,
          "description": "<p>Stop the internal timer.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onTimer",
          "access": "",
          "virtual": false,
          "description": "<p>Callback method for the internal timer handling<br>\nInherit classes must override this method if they want use the timer feature.</p>\n<pre><code> // Alternatively you can register for this event with\n figure.on(&quot;timer&quot;, function(emitter){\n     alert(&quot;timer fired&quot;);\n });</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "installEditPolicy",
          "access": "",
          "virtual": false,
          "description": "<p>Install a new edit policy to the figure. Each editpolicy is able to focus on a single editing\ntask or group of related tasks. This also allows editing behavior to be selectively reused across\ndifferent figure implementations. Also, behavior can change dynamically, such as when the layouts\nor routing methods change.</p>\n<p>Example for limited DragDrop behavior can be a draw2d.layout.constraint.RegionConstriantPolicy.</p>",
          "parameters": [
            {
              "name": "policy",
              "type": "draw2d.policy.EditPolicy",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "uninstallEditPolicy",
          "access": "",
          "virtual": false,
          "description": "<p>UnInstall the edit policy from the figure. Either the instance itself if found\nor all kind of the given edit policies.</p>",
          "parameters": [
            {
              "name": "policy",
              "type": "draw2d.policy.EditPolicy",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "add",
          "access": "",
          "virtual": false,
          "description": "<p>Add a child figure to the figure. The hands over figure doesn't support drag&amp;drop\noperations. It's only a decorator for the connection.<br>\nMainly for labels or other decorations</p>\n<pre><code>let start = new draw2d.shape.node.Start({x:80, y:150});\nstart.add(new draw2d.shape.basic.Label({text:&quot;Test Label&quot;}), new draw2d.layout.locator.TopLocator());\n\ncanvas.add( start);</code></pre>",
          "parameters": [
            {
              "name": "child",
              "type": "draw2d.Figure",
              "description": "<p>the figure to add as decoration to the connection.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>the locator for the child.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "index",
              "type": "Number",
              "description": "<p>optional index where to insert the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "remove",
          "access": "",
          "virtual": false,
          "description": "<p>Remove the child figure from this figure and the canvas</p>",
          "parameters": [
            {
              "name": "child",
              "type": "draw2d.Figure",
              "description": "<p>the figure to remove.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Object",
            "description": "<p>the removed tupple of figure/locator or null if the child isn't found</p>"
          }
        },
        {
          "name": "getChildren",
          "access": "",
          "virtual": false,
          "description": "<p>Return all children/decorations of this shape which has been added with\ndraw2d.Figure.add</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "resetChildren",
          "access": "",
          "virtual": false,
          "description": "<p>Remove all children/decorations of this shape</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getShapeElement",
          "access": "protected",
          "virtual": false,
          "description": "<p>return the current SVG shape element or create it on demand.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getTopLevelShapeElement",
          "access": "private",
          "virtual": false,
          "description": "<p>Get the top level shape element. May the figure has a set of SVG elements. In this case this\nmethod must return the top level node.<br>\nThis method is used for the toFront/toBack method to order the nodes in the correct way.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "createShapeElement",
          "access": "",
          "virtual": true,
          "description": "<p>Inherited classes must override this method to implement it's own draw functionality.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "applyTransformation",
          "access": "private",
          "virtual": false,
          "description": "<p>apply a transformation to the shape like rotation, translate,..</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getHandleBBox",
          "access": "",
          "virtual": false,
          "description": "<p>Allow dragging only when the cursor is over a specific part of the figure.\n<br>\nOverride this method to specify the bounding box of an element or a draw2d.util.ArrayList\nof draw2d.geo.Rectangle of bounding boxes used to drag the figure. The returned coordinates\nare absolute coordinates to the canvas.\n<br>\n<br>\nDefault implementation returns <b>null</b> to indicate to use the complete figures as\ndrag handle.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": [
              "draw2d.geo.Rectangle",
              "draw2d.util.ArrayList"
            ],
            "description": ""
          }
        },
        {
          "name": "onDragStart",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the drag and drop action begins. You can return [false] if you\nwant avoid that the figure can be move.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": "<p>true if the figure accepts dragging</p>"
          }
        },
        {
          "name": "onDrag",
          "access": "private",
          "virtual": false,
          "description": "<p>Don't call them manually. This will be done by the framework.<br>\nWill be called if the object are moved via drag and drop.\nSub classes can override this method to implement additional stuff. Don't forget to call\nthe super implementation via <code>this._super(dx, dy, dx2, dy2);</code></p>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>the x difference between the start of the drag drop operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>the y difference between the start of the drag drop operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dx2",
              "type": "Number",
              "description": "<p>The x diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy2",
              "type": "Number",
              "description": "<p>The y diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onPanning",
          "access": "",
          "virtual": false,
          "description": "<p>Called by the framework if the figure returns false for the drag operation. In this\ncase we send a &quot;panning&quot; event - mouseDown + mouseMove. This is very useful for\nUI-Widget like slider, spinner,...</p>\n<pre><code> // You can alternatively register an event handler with:\n figure.on(&quot;panning&quot;, function(emitter, eventData){\n     alert(&quot;panning of the figure called&quot;);\n });</code></pre>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>the x difference between the mouse down operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>the y difference between the mouse down operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dx2",
              "type": "Number",
              "description": "<p>The x diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy2",
              "type": "Number",
              "description": "<p>The y diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onPanningEnd",
          "access": "",
          "virtual": false,
          "description": "<p>Called by the framework if the panning event of the figures ends. This happens\nafter the mous up event if the panning is active.</p>\n<pre><code> // You can alternatively register an event handler with:\n figure.on(&quot;panningEnd&quot;, function(emitter){\n     alert(&quot;panning of the figure called&quot;);\n });</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onDragEnd",
          "access": "",
          "virtual": false,
          "description": "<p>Will be called after a drag and drop action.<br>\nSub classes can override this method to implement additional stuff. Don't forget to call\nthe super implementation via <code>this._super();</code></p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "delegateTarget",
          "access": "private",
          "virtual": false,
          "description": "<p>Called by the framework during drag&amp;drop operations if the user drag a figure over this figure</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": "<p>the figure which should receive the drop event or null if the element didn't want a drop event</p>"
          }
        },
        {
          "name": "onDragEnter",
          "access": "",
          "virtual": false,
          "description": "<p>Called by the framework during drag&amp;drop operations if the user drag a figure over this figure</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onDragLeave",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the DragDrop object leaving the current hover figure.</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onDrop",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the user drop this element onto the dropTarget. This event is ONLY fired if the\nshape return &quot;this&quot; in the {@link draw2d.Figure#onDragEnter} method.</p>",
          "parameters": [
            {
              "name": "dropTarget",
              "type": "draw2d.Figure",
              "description": "<p>The drop target.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onCatch",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the user dropped an figure onto this element. This event is ONLY fired if the\nin the canvas installed {@link draw2d.policy.canvas.DropInterceptorPolicy} allow this.</p>",
          "parameters": [
            {
              "name": "droppedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The dropped figure.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onMouseEnter",
          "access": "",
          "virtual": false,
          "description": "<p>Callback method for the mouse enter event. Usefull for mouse hover-effects.\nOverride this method for your own effects. Don't call them manually.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onMouseLeave",
          "access": "",
          "virtual": false,
          "description": "<p>Callback method for the mouse leave event. Useful for mouse hover-effects.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onDoubleClick",
          "access": "",
          "virtual": false,
          "description": "<p>Called when a user dbl clicks on the element</p>\n<pre><code> // Alternatively you can register an event with:\n //\n figure.on(&quot;dblclick&quot;, function(emitter, event){\n     alert(&quot;user dbl click on the figure&quot;);\n });</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onClick",
          "access": "",
          "virtual": false,
          "description": "<p>Called when a user clicks on the element.</p>\n<pre><code> // You can alternatively register an event handler with:\n figure.on(&quot;click&quot;, function(emitter, event){\n     alert(&quot;user click on the figure&quot;);\n });</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onContextMenu",
          "access": "",
          "virtual": false,
          "description": "<p>called by the framework if the figure should show the context menu.<br>\nThe strategy to show the context menu depends on the platform. Either looong press or\nright click with the mouse.</p>\n<pre><code> // Alternatively you register for this event with:\n figure.on(&quot;contextmenu&quot;, function(emitter, event){\n     alert(&quot;user press the right mouse button for a context menu&quot;);\n });</code></pre>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate to show the menu</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate to show the menu</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setAlpha",
          "access": "",
          "virtual": false,
          "description": "<p>Set the alpha blending of this figure.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;alpha&quot;: percent\n });\n\n // ...or:\n figure.attr({\n   &quot;opacity&quot;: percent\n });</code></pre>",
          "parameters": [
            {
              "name": "percent",
              "type": "Number",
              "description": "<p>value between [0..1].</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getAlpha",
          "access": "",
          "virtual": false,
          "description": "<p>Return the alpha blending of the figure</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the current alpha blending</p>"
          }
        },
        {
          "name": "getRotationAngle",
          "access": "",
          "virtual": false,
          "description": "<p>return the rotation angle of the figure in degree of [0..356].</p>\n<br>\n<b>NOTE: this method is pre alpha and not for production. Only steps of 90 degree is working well</b>\n<br>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "isVisible",
          "access": "",
          "virtual": false,
          "description": "<p>Return true if the figure visible.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setKeepAspectRatio",
          "access": "",
          "virtual": false,
          "description": "<p>Guarantee, that the figure width/height will not be distorted. Applicable before calling setDimension().\nIt is false by default.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>boolean flag if the figure should respect the aspect ratio</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getKeepAspectRatio",
          "access": "",
          "virtual": false,
          "description": "<p>Return the flag if the shape keep the aspect ratio.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getZOrder",
          "access": "",
          "virtual": false,
          "description": "<p>Return the current z-index of the element. Currently this is an expensive method. The index will be calculated\nall the time. Caching is not implemented at the moment.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setCanSnapToHelper",
          "access": "",
          "virtual": false,
          "description": "<p>Set the flag if this object can snap to grid or geometry.\nA window of dialog should set this flag to false.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The snap to grid/geometry enable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getCanSnapToHelper",
          "access": "",
          "virtual": false,
          "description": "<p>Returns true if the figure can snap to any helper like a grid, guide, geometrie\nor something else.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "getSnapToGridAnchor",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "setSnapToGridAnchor",
          "access": "",
          "virtual": false,
          "description": "<p>Set the hot spot for all snapTo### operations.</p>",
          "parameters": [
            {
              "name": "point",
              "type": "draw2d.geo.Point",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setWidth",
          "access": "",
          "virtual": false,
          "description": "<p>Set the width of the figure and consider the minWidth attribute</p>",
          "parameters": [
            {
              "name": "width",
              "type": "Number",
              "description": "<p>the new width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getWidth",
          "access": "",
          "virtual": false,
          "description": "<p>The current width of the figure.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setHeight",
          "access": "",
          "virtual": false,
          "description": "<p>Set the heigth of the figure and consider the minWidth attribute</p>",
          "parameters": [
            {
              "name": "height",
              "type": "Number",
              "description": "<p>the new height of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getHeight",
          "access": "",
          "virtual": false,
          "description": "<p>The current height of the figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "getMinWidth",
          "access": "",
          "virtual": false,
          "description": "<p>This value is relevant for the interactive resize of the figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>Returns the min. width of this object.</p>"
          }
        },
        {
          "name": "setMinWidth",
          "access": "",
          "virtual": false,
          "description": "<p>Set the minimum width of this figure</p>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getMinHeight",
          "access": "",
          "virtual": false,
          "description": "<p>This value is relevant for the interactive resize of the figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>Returns the min. height of this object.</p>"
          }
        },
        {
          "name": "setMinHeight",
          "access": "",
          "virtual": false,
          "description": "<p>Set the minimum height of the figure.</p>",
          "parameters": [
            {
              "name": "h",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setX",
          "access": "",
          "virtual": false,
          "description": "<p>the the x-offset related to the parent figure or canvas</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the new x offset of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getX",
          "access": "",
          "virtual": false,
          "description": "<p>The x-offset related to the parent figure or canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the x-offset to the parent figure</p>"
          }
        },
        {
          "name": "setY",
          "access": "",
          "virtual": false,
          "description": "<p>the the y-offset related to the parent figure or canvas</p>",
          "parameters": [
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the new x offset of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getY",
          "access": "",
          "virtual": false,
          "description": "<p>The y-offset related to the parent figure or canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>The y-offset to the parent figure.</p>"
          }
        },
        {
          "name": "getAbsoluteX",
          "access": "",
          "virtual": false,
          "description": "<p>The x-offset related to the canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the x-offset to the canvas</p>"
          }
        },
        {
          "name": "getAbsoluteY",
          "access": "",
          "virtual": false,
          "description": "<p>The y-offset related to the canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>The y-offset to the canvas.</p>"
          }
        },
        {
          "name": "getAbsolutePosition",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the absolute y-position of the port.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getAbsoluteBounds",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the absolute y-position of the port.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "setPosition",
          "access": "",
          "virtual": false,
          "description": "<p>Set the position of the object.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   x: x,\n   y: y\n });</code></pre>",
          "parameters": [
            {
              "name": "x",
              "type": [
                "Number",
                "draw2d.geo.Point"
              ],
              "description": "<p>The new x coordinate of the figure or the x/y coordinate if it is an draw2d.geo.Point</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The new y coordinate of the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPosition",
          "access": "",
          "virtual": false,
          "description": "<p>Get the current position of the figure</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "translate",
          "access": "",
          "virtual": false,
          "description": "<p>Translate the figure with the given x/y offset.</p>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>The x offset to translate</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>The y offset to translate</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setBoundingBox",
          "access": "",
          "virtual": false,
          "description": "<p>Set the bounding box of the figure</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   width: w,\n   height: h,\n   x: x,\n   y: y\n });\n\n // or\n figure.attr({\n   boundingBox: {x:1, y:100, width:30, height:30}\n });</code></pre>",
          "parameters": [
            {
              "name": "rect",
              "type": "draw2d.geo.Rectangle",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getBoundingBox",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the bounding box of the figure in absolute position to the canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "hitTest",
          "access": "",
          "virtual": false,
          "description": "<p>Detect whenever the hands over coordinate is inside the figure.\nThe default implementation is a simple bounding box test.</p>",
          "parameters": [
            {
              "name": "iX",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "iY",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "corona",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setDraggable",
          "access": "",
          "virtual": false,
          "description": "<p>Switch on/off the drag drop behaviour of this object</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The new drag drop indicator</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "isDraggable",
          "access": "",
          "virtual": false,
          "description": "<p>Get the Drag drop enable flag</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": "<p>The new drag drop indicator</p>"
          }
        },
        {
          "name": "isResizeable",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the true if the figure can be resized.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setResizeable",
          "access": "",
          "virtual": false,
          "description": "<p>You can change the resizeable behaviour of this object. Hands over [false] and\nthe figure has no resizehandles if you select them with the mouse.<br></p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   resizeable: flag\n });</code></pre>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The resizeable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "isSelectable",
          "access": "",
          "virtual": false,
          "description": "<p>Indicates whenever the element is selectable by user interaction or API.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setSelectable",
          "access": "",
          "virtual": false,
          "description": "<p>You can change the selectable behavior of this object. Hands over [false] and\nthe figure has no selection handles if you try to select them with the mouse.<br></p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The selectable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "isStrechable",
          "access": "",
          "virtual": false,
          "description": "<p>Return true if the object doesn't care about the aspect ratio.\nYou can change the height and width independent.<br></p>\n<p>Replaced with &quot;getKeepAspectRatio&quot;</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "isDeleteable",
          "access": "",
          "virtual": false,
          "description": "<p>Return false if you avoid that the user can delete your figure.\nSub class can override this method.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setDeleteable",
          "access": "",
          "virtual": false,
          "description": "<p>Set the flag if the shape is deleteable.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>enable or disable flag for the delete operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setParent",
          "access": "private",
          "virtual": false,
          "description": "<p>Set the parent of this figure.\nDon't call them manually.</p>",
          "parameters": [
            {
              "name": "parent",
              "type": "draw2d.Figure",
              "description": "<p>The new parent of this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getParent",
          "access": "",
          "virtual": false,
          "description": "<p>Get the parent of this figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": ""
          }
        },
        {
          "name": "contains",
          "access": "",
          "virtual": false,
          "description": "<p>Check to see if a figure is a descendant of another figure.\n<br>\nThe contains() method returns true if the figure provided by the argument is a descendant of this figure,\nwhether it is a direct child or nested more deeply. Otherwise, it returns false.</p>",
          "parameters": [
            {
              "name": "containedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure that may be contained by (a descendant of) this figure.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getRoot",
          "access": "",
          "virtual": false,
          "description": "<p>Get the top most parent of this figure. This can be an layout figure or parent container</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": ""
          }
        },
        {
          "name": "setComposite",
          "access": "",
          "virtual": false,
          "description": "<p>Set the assigned composite of this figure.</p>",
          "parameters": [
            {
              "name": "composite",
              "type": "draw2d.shape.composite.StrongComposite",
              "description": "<p>The assigned composite of this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getComposite",
          "access": "",
          "virtual": false,
          "description": "<p>Get the assigned composite of this figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.shape.composite.StrongComposite",
            "description": ""
          }
        },
        {
          "name": "fireEvent",
          "access": "",
          "virtual": false,
          "description": "<p>Execute all handlers and behaviors attached to the figure for the given event type.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "String",
              "description": "<p>the event to trigger</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "args",
              "type": "Object",
              "description": "<p>optional parameters for the triggered event callback</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "on",
          "access": "",
          "virtual": false,
          "description": "<p>Attach an event handler function for one or more events to the figure.\nTo remove events bound with .on(), see {@link #off}.</p>\n<p>possible events are:<br></p>\n<ul>\n  <li>click</li>\n  <li>dblclick</li>\n  <li>move</li>\n  <li>resize</li>\n  <li>timer</li>\n  <li>contextmenu</li>\n  <li>show</li>\n  <li>hide</li>\n  <li>added</li>\n  <li>removed</li>\n  <li>change:[attr]</li>\n</ul>",
          "parameters": [
            {
              "name": "event",
              "type": "String",
              "description": "<p>One or more space-separated event types</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback",
              "type": "function",
              "description": "<p>A function to execute when the event is triggered.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback.emitter",
              "type": "draw2d.Figure",
              "description": "<p>the emitter of the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback.obj",
              "type": "Object",
              "description": "<p>optional event related data</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "context",
              "type": "Object",
              "description": "<p>optional context of the function callback.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "off",
          "access": "",
          "virtual": false,
          "description": "<p>The .off() method removes event handlers that were attached with {@link #on}.<br>\nCalling .off() with no arguments removes all handlers attached to the elements.<br>\n<br>\nIf a simple event name such as &quot;move&quot; is provided, all events of that type are removed from the figure.</p>",
          "parameters": [
            {
              "name": "eventOrFunction",
              "type": [
                "String",
                "function"
              ],
              "description": "<p>the event name of the registerd function or the function itself</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getBestChild",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the best figure at the location [x,y]. It is a simple hit test. Keep in mind that only visible objects\nare returned.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>The x position.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The y position.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "figureToIgnore",
              "type": [
                "draw2d.Figure",
                "Array"
              ],
              "description": "<p>The figures which should be ignored.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        }
      ]
    },
    {
      "name": "Circle",
      "namespace": "draw2d.shape.basic",
      "description": "<p>A circle figure with basic background and stroke API. <br>\nA circle can not be streched. <strong>The aspect ration is always 1:1</strong>.</p>",
      "extends": [
        "draw2d.shape.basic.Oval"
      ],
      "access": "",
      "virtual": false,
      "fires": "",
      "constructor": {
        "name": "Circle",
        "description": "",
        "parameters": [
          {
            "name": "attr",
            "type": "Object",
            "description": "<p>the configuration of the shape</p>",
            "default": "",
            "optional": true,
            "nullable": ""
          },
          {
            "name": "setter",
            "type": "Object",
            "description": "<p>add or replace setter methods</p>",
            "default": "",
            "optional": true,
            "nullable": ""
          },
          {
            "name": "getter",
            "type": "Object",
            "description": "<p>add or replace getter methods</p>",
            "default": "",
            "optional": true,
            "nullable": ""
          }
        ],
        "examples": [
          "let shape =  new draw2d.shape.basic.Circle({x:40,y:10, stroke:3, color:\"#3d3d3d\", bgColor:\"#3dff3d\"});\n\ncanvas.add(shape);"
        ]
      },
      "functions": [
        {
          "name": "setAlpha",
          "access": "",
          "virtual": false,
          "description": "<p>the the opacity of the element.</p>",
          "parameters": [
            {
              "name": "percent",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setDiameter",
          "access": "",
          "virtual": false,
          "description": "<p>Set the diameter of the circle. The center of the circle will be retained.</p>",
          "parameters": [
            {
              "name": "d",
              "type": "Number",
              "description": "<p>The new diameter of the circle.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getDiameter",
          "access": "",
          "virtual": false,
          "description": "<p>Get the diameter of the circle.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setRadius",
          "access": "",
          "virtual": false,
          "description": "<p>Set the radius of the circle. The center of the circle will be retained.</p>",
          "parameters": [
            {
              "name": "d",
              "type": "Number",
              "description": "<p>The new radius of the circle.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPersistentAttributes",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "init",
          "access": "",
          "virtual": false,
          "description": "<p>Creates a new figure element which are not assigned to any canvas.</p>",
          "parameters": [
            {
              "name": "attr",
              "type": "Object",
              "description": "<p>the configuration of the shape</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "createShapeElement",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getCenter",
          "access": "",
          "virtual": false,
          "description": "<p>Get the center of the figure</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setCenter",
          "access": "",
          "virtual": false,
          "description": "<p>Set the center of the figure.</p>",
          "parameters": [
            {
              "name": "x",
              "type": [
                "Number",
                "draw2d.geo.Point"
              ],
              "description": "<p>the new x coordinate of the center or a draw2d.geo.Point object with the center</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y coordinate of the new center of the first argument isn't a draw2d.geo.Point object</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "repaint",
          "access": "private",
          "virtual": false,
          "description": "<p>propagate all attributes like color, stroke,... to the shape element</p>",
          "parameters": [
            {
              "name": "attributes",
              "type": "Object",
              "description": "<p>the style attributes for the SVG shape</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "intersectionWithLine",
          "access": "",
          "virtual": false,
          "description": "<p>NOTE: Rotation will need to be added to this function</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getRadius",
          "access": "",
          "virtual": false,
          "description": "<p>Get the corner radius of the edges.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setDashArray",
          "access": "",
          "virtual": false,
          "description": "<p>Set the line style for this object.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   dash: dashPattern\n });</code></pre>",
          "parameters": [
            {
              "name": "dash",
              "type": "String",
              "description": "<p>can be one of this [&quot;&quot;, &quot;-&quot;, &quot;.&quot;, &quot;-.&quot;, &quot;-..&quot;, &quot;. &quot;, &quot;- &quot;, &quot;--&quot;, &quot;- .&quot;, &quot;--.&quot;, &quot;--..&quot;]</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getDashArray",
          "access": "",
          "virtual": false,
          "description": "<p>Get the line style for this object.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr(&quot;dash&quot;);</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setGlow",
          "access": "",
          "virtual": false,
          "description": "<p>Highlight the element or remove the highlighting</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>indicates glow/noGlow</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setBackgroundColor",
          "access": "",
          "virtual": false,
          "description": "<p>Set the new background color of the figure. It is possible to hands over\n<code>null</code> to set the background transparent.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;bgColor&quot;: &quot;#f0f0f0&quot;\n });</code></pre>",
          "parameters": [
            {
              "name": "color",
              "type": [
                "String",
                "draw2d.util.Color"
              ],
              "description": "<p>The new background color of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getBackgroundColor",
          "access": "",
          "virtual": false,
          "description": "<p>The current used background color.</p>\n<pre><code> // Alternatively you can use the attr method:\n var color =figure.attr(&quot;bgColor&quot;);</code></pre>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.Color",
            "description": ""
          }
        },
        {
          "name": "setStroke",
          "access": "",
          "virtual": false,
          "description": "<p>Set the stroke to use.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;stroke&quot;: 2\n });</code></pre>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "<p>The new line width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getStroke",
          "access": "",
          "virtual": false,
          "description": "<p>The used line width.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setColor",
          "access": "",
          "virtual": false,
          "description": "<p>Set the foreground color of the figure.\nThis method fires a <i>document dirty</i> event.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;color&quot;: &quot;#f3f3f3&quot;\n });</code></pre>",
          "parameters": [
            {
              "name": "color",
              "type": [
                "String",
                "draw2d.util.Color"
              ],
              "description": "<p>The new color of the line.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getColor",
          "access": "",
          "virtual": false,
          "description": "<p>Get the current used foreground color</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.Color",
            "description": ""
          }
        },
        {
          "name": "getPersistentAttributes",
          "access": "",
          "virtual": false,
          "description": "<p>Return an objects with all important attributes for XML or JSON serialization</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Object",
            "description": ""
          }
        },
        {
          "name": "setPersistentAttributes",
          "access": "",
          "virtual": false,
          "description": "<p>Read all attributes from the serialized properties and transfer them into the shape.</p>",
          "parameters": [
            {
              "name": "memento",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setPersistPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Indicates if the node should read/write the ports via the draw2d.Figure.getPersistenAttributes\nto the JSON object</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPersistPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Indicates if the figure writes the ports to the JSON structore too.\nDefault is &quot;false&quot;</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "toFront",
          "access": "",
          "virtual": false,
          "description": "<p>Moves the element so it is the closest to the viewerâ€™s eyes, on top of other elements. Additional\nthe internal model changed as well.</p>\n<p>Optional: Inserts current object in front of the given one.</p>",
          "parameters": [
            {
              "name": "figure",
              "type": "draw2d.Figure",
              "description": "<p>move current object in front of the given one.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "toBack",
          "access": "",
          "virtual": false,
          "description": "<p>Moves the element to the background. Additional\nthe internal model changed as well.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setVisible",
          "access": "",
          "virtual": false,
          "description": "<p>Show/hide the element. The element didn't receive any mouse events (click, dblclick) if you hide the\nfigure.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   visible: flag\n });</code></pre>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "duration",
              "type": "Number",
              "description": "<p>the optional number for the fadeIn /fadeOut of the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Return all ports of the node. The results contains\nall ports of the children too per default. Set <b>recursive</b>\nto false to retrieve direct assigned ports only.</p>",
          "parameters": [
            {
              "name": "recursive",
              "type": "Boolean",
              "description": "<p>indicates if the method should return children ports too. Default is <b>true</b></p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "getInputPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Return all input ports of the node.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "getOutputPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Return all output ports of the node.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "clone",
          "access": "",
          "virtual": false,
          "description": "<p>Clone the figure. <br>\nYou must override and implement the methods <b>getPersistentAttributes</b> and <b>setPersistentAttributes</b> for your custom\nfigures if the have special attributes.</p>\n<p>The clone() method performs a deep copy of the object, meaning that it copies the children, ports and decorations\nper default. You can control the clone procedure with the 'cloneMetaData'.</p>",
          "parameters": [
            {
              "name": "cloneMetaData",
              "type": "Object",
              "description": "<p>controls the clone procedure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "cloneMetaData.excludeChildren",
              "type": "Boolean",
              "description": "<p>set it to true if you want exclude the children.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "cloneMetaData.excludePorts",
              "type": "Boolean",
              "description": "<p>set it to true if you want exclude the ports of the node.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portName",
              "type": "String",
              "description": "<p>The name of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.Port",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getInputPort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the input port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.InputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getOutputPort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the output port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or the numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.OutputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getHybridPort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the input port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.InputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "addPort",
          "access": "",
          "virtual": false,
          "description": "<p>Add a port to this node at the given position.<br></p>",
          "parameters": [
            {
              "name": "port",
              "type": "draw2d.Port",
              "description": "<p>The new port to add.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>The layout for the port.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "resetPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Remove all ports of this node</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "removePort",
          "access": "",
          "virtual": false,
          "description": "<p>Removes a port and all related connections from this node.<br></p>",
          "parameters": [
            {
              "name": "port",
              "type": "draw2d.Port",
              "description": "<p>The port to remove.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "createPort",
          "access": "",
          "virtual": false,
          "description": "<p>Create a standard Port for this element. Inherited class can override this\nmethod to create its own type of ports.</p>",
          "parameters": [
            {
              "name": "type",
              "type": "String",
              "description": "<p>the type of the requested port. possible [&quot;input&quot;, &quot;output&quot;]</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>the layouter to use for this port</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getConnections",
          "access": "",
          "virtual": false,
          "description": "<p>Return all connections related to this node.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "setCanvas",
          "access": "",
          "virtual": false,
          "description": "<p>Set the canvas element of this figures. This can be used to determine whenever an element\nis added or removed to the canvas.</p>",
          "parameters": [
            {
              "name": "canvas",
              "type": "draw2d.Canvas",
              "description": "<p>the new parent of the figure or null</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setRotationAngle",
          "access": "",
          "virtual": false,
          "description": "<p>Set the rotation angle in degree [0..356]<br>\n<b>Only steps of 90 degree is working well</b>\n<br>\n// Alternatively you can use the attr method:\nfigure.attr({\nangle: angle\n});</p>",
          "parameters": [
            {
              "name": "angle",
              "type": "Number",
              "description": "<p>the rotation angle in degree</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setDimension",
          "access": "",
          "virtual": false,
          "description": "<p>Set the new width and height of the figure.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n    width:  w,\n    height: h\n });</code></pre>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "<p>The new width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "h",
              "type": "Number",
              "description": "<p>The new height of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onPortValueChanged",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the value of any port has been changed</p>",
          "parameters": [
            {
              "name": "relatedPort",
              "type": "draw2d.Port",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "layoutPorts",
          "access": "private",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "createCommand",
          "access": "private",
          "virtual": false,
          "description": "<p>Returns the Command to perform the specified Request or null.</p>",
          "parameters": [
            {
              "name": "request",
              "type": "draw2d.command.CommandType",
              "description": "<p>describes the Command being requested</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.command.Command",
            "description": "<p>null or a Command</p>"
          }
        },
        {
          "name": "attr",
          "access": "",
          "virtual": false,
          "description": "<p>Read or set shape attributes.<br>\nWhen no value is given, reads specified attribute from the element.<br>\nWhen value is given, sets the attribute to that value.\nMultiple attributes can be set by passing an object with name-value pairs.</p>\n<pre><code>let figure = new draw2d.shape.basic.Rectangle();\nfigure.attr('x');      //=&gt; read value\nfigure.attr('x', 30);  //=&gt; set value\n\n// multiple attributes:\nfigure.attr({\n  x: 30,\n  y: 40,\n  width : 200,\n  height: 50,\n  cssClass: &quot;red_border_figure&quot;\n});\n\n// it is possible to override any method of the figure as well\n// Instead of inheritance you can just override the callback methods\n// like\n//\nfigure.attr({\n   onClick : function(){\n       alert(&quot;click&quot;);\n   }\n});\n\n// or you can pass the attr values in the constructor\n//\nlet clickFigure = new draw2d.shape.basic.Rectangle({\n   onClick : function(){\n       alert(&quot;click&quot;);\n   }\n});\n</code></pre>\n<p>Additional you can set the user defined values (userData) with this method\nusing the dot-notation. User defined values are always part of the exported\nJSON data.</p>\n<pre><code>// setting multiple attributes:\nfigure.attr({\n  &quot;userData.my.property.x&quot;: 30,\n  &quot;userData.my.property.y&quot;: 40\n});\n</code></pre>\n<p>Also set using array notation is possible for the userData:</p>\n<pre><code>// dot notation and array brackets:\nfigure.attr({\n  &quot;userData.my.names[0]&quot;: &quot;John&quot;,\n  &quot;userData.my.names[1]&quot;: &quot;Doe&quot;\n});\n</code></pre>\n<p>The Object returned should be the equivalent structured object:</p>\n<pre><code>let obj = figure.getUserData();\n</code></pre>\n<p>That is, where obj is equivalent to:</p>\n<pre><code>let obj = {\n    my:{\n        property:{\n            x: 30,\n            y: 40\n       },\n       names:  [&quot;John&quot;, &quot;Doe&quot;]\n   }\n</code></pre>\n<p>};</p>",
          "parameters": [
            {
              "name": "name",
              "type": "String/Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "value",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "pick",
          "access": "",
          "virtual": false,
          "description": "<p>Return a copy of the object, filtered to only have values for the whitelisted keys.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "select",
          "access": "private",
          "virtual": false,
          "description": "<p>Add the figure to the current selection and propagate this to all edit policies.</p>",
          "parameters": [
            {
              "name": "asPrimarySelection",
              "type": "Boolean",
              "description": "<p>true if the element should be the primary selection</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "unselect",
          "access": "private",
          "virtual": false,
          "description": "<p>Unselect the figure and propagete this event to all edit policies.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setSelectionAdapter",
          "access": "",
          "virtual": false,
          "description": "<p>Returns a function which returns the the figure which must handle the selection handling.</p>",
          "parameters": [
            {
              "name": "adapter",
              "type": "function",
              "description": "<p>function which returns the figure which handles the selection handling</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getSelectionAdapter",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "function",
            "description": ""
          }
        },
        {
          "name": "isSelected",
          "access": "",
          "virtual": false,
          "description": "<p>Returns true if the figure part of the current canvas selection.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setUserData",
          "access": "",
          "virtual": false,
          "description": "<p>Allows a user to attach (or remove) data to an element, without needing to create a custom figure or shape.\nThe data must be a valid JSON object.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   userData: object\n });</code></pre>",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getUserData",
          "access": "",
          "virtual": false,
          "description": "<p>Returns any user data set previously on the given figure by setUserData.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Object",
            "description": ""
          }
        },
        {
          "name": "getId",
          "access": "",
          "virtual": false,
          "description": "<p>Return the UUID of this element.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "setId",
          "access": "",
          "virtual": false,
          "description": "<p>Set the id of this element.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  id: newId\n});</code></pre>",
          "parameters": [
            {
              "name": "newId",
              "type": "String",
              "description": "<p>the new id for this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Return the css styling class name of the element.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "setCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Set the css class of the node.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;cssClass&quot;: &quot;red_border_figure&quot;\n });</code></pre>",
          "parameters": [
            {
              "name": "cssClass",
              "type": "String",
              "description": "<p>the new css class name of the node</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "hasCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>The method will return true if the class is assigned to the element, even if other classes also are.</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the class name to check</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "addCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Add a CSS class to the figure.<br>\nIt's important to note that this method does not replace a class. It simply adds the class,\nappending it to any which may already be assigned to the elements.</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "removeCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Remove the given css class name from the figure</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the css class name to add</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "toggleCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Add or remove the given css class name from the figure</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the class name to toggle</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getCanvas",
          "access": "",
          "virtual": false,
          "description": "<p>Return the current assigned canvas container.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.Canvas",
            "description": ""
          }
        },
        {
          "name": "startTimer",
          "access": "",
          "virtual": false,
          "description": "<p>Start a timer which calls the onTimer method in the given interval.</p>",
          "parameters": [
            {
              "name": "milliSeconds",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "stopTimer",
          "access": "",
          "virtual": false,
          "description": "<p>Stop the internal timer.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onTimer",
          "access": "",
          "virtual": false,
          "description": "<p>Callback method for the internal timer handling<br>\nInherit classes must override this method if they want use the timer feature.</p>\n<pre><code> // Alternatively you can register for this event with\n figure.on(&quot;timer&quot;, function(emitter){\n     alert(&quot;timer fired&quot;);\n });</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "installEditPolicy",
          "access": "",
          "virtual": false,
          "description": "<p>Install a new edit policy to the figure. Each editpolicy is able to focus on a single editing\ntask or group of related tasks. This also allows editing behavior to be selectively reused across\ndifferent figure implementations. Also, behavior can change dynamically, such as when the layouts\nor routing methods change.</p>\n<p>Example for limited DragDrop behavior can be a draw2d.layout.constraint.RegionConstriantPolicy.</p>",
          "parameters": [
            {
              "name": "policy",
              "type": "draw2d.policy.EditPolicy",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "uninstallEditPolicy",
          "access": "",
          "virtual": false,
          "description": "<p>UnInstall the edit policy from the figure. Either the instance itself if found\nor all kind of the given edit policies.</p>",
          "parameters": [
            {
              "name": "policy",
              "type": "draw2d.policy.EditPolicy",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "add",
          "access": "",
          "virtual": false,
          "description": "<p>Add a child figure to the figure. The hands over figure doesn't support drag&amp;drop\noperations. It's only a decorator for the connection.<br>\nMainly for labels or other decorations</p>\n<pre><code>let start = new draw2d.shape.node.Start({x:80, y:150});\nstart.add(new draw2d.shape.basic.Label({text:&quot;Test Label&quot;}), new draw2d.layout.locator.TopLocator());\n\ncanvas.add( start);</code></pre>",
          "parameters": [
            {
              "name": "child",
              "type": "draw2d.Figure",
              "description": "<p>the figure to add as decoration to the connection.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>the locator for the child.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "index",
              "type": "Number",
              "description": "<p>optional index where to insert the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "remove",
          "access": "",
          "virtual": false,
          "description": "<p>Remove the child figure from this figure and the canvas</p>",
          "parameters": [
            {
              "name": "child",
              "type": "draw2d.Figure",
              "description": "<p>the figure to remove.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Object",
            "description": "<p>the removed tupple of figure/locator or null if the child isn't found</p>"
          }
        },
        {
          "name": "getChildren",
          "access": "",
          "virtual": false,
          "description": "<p>Return all children/decorations of this shape which has been added with\ndraw2d.Figure.add</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "resetChildren",
          "access": "",
          "virtual": false,
          "description": "<p>Remove all children/decorations of this shape</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getShapeElement",
          "access": "protected",
          "virtual": false,
          "description": "<p>return the current SVG shape element or create it on demand.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getTopLevelShapeElement",
          "access": "private",
          "virtual": false,
          "description": "<p>Get the top level shape element. May the figure has a set of SVG elements. In this case this\nmethod must return the top level node.<br>\nThis method is used for the toFront/toBack method to order the nodes in the correct way.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "applyTransformation",
          "access": "private",
          "virtual": false,
          "description": "<p>apply a transformation to the shape like rotation, translate,..</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getHandleBBox",
          "access": "",
          "virtual": false,
          "description": "<p>Allow dragging only when the cursor is over a specific part of the figure.\n<br>\nOverride this method to specify the bounding box of an element or a draw2d.util.ArrayList\nof draw2d.geo.Rectangle of bounding boxes used to drag the figure. The returned coordinates\nare absolute coordinates to the canvas.\n<br>\n<br>\nDefault implementation returns <b>null</b> to indicate to use the complete figures as\ndrag handle.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": [
              "draw2d.geo.Rectangle",
              "draw2d.util.ArrayList"
            ],
            "description": ""
          }
        },
        {
          "name": "onDragStart",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the drag and drop action begins. You can return [false] if you\nwant avoid that the figure can be move.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": "<p>true if the figure accepts dragging</p>"
          }
        },
        {
          "name": "onDrag",
          "access": "private",
          "virtual": false,
          "description": "<p>Don't call them manually. This will be done by the framework.<br>\nWill be called if the object are moved via drag and drop.\nSub classes can override this method to implement additional stuff. Don't forget to call\nthe super implementation via <code>this._super(dx, dy, dx2, dy2);</code></p>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>the x difference between the start of the drag drop operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>the y difference between the start of the drag drop operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dx2",
              "type": "Number",
              "description": "<p>The x diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy2",
              "type": "Number",
              "description": "<p>The y diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onPanning",
          "access": "",
          "virtual": false,
          "description": "<p>Called by the framework if the figure returns false for the drag operation. In this\ncase we send a &quot;panning&quot; event - mouseDown + mouseMove. This is very useful for\nUI-Widget like slider, spinner,...</p>\n<pre><code> // You can alternatively register an event handler with:\n figure.on(&quot;panning&quot;, function(emitter, eventData){\n     alert(&quot;panning of the figure called&quot;);\n });</code></pre>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>the x difference between the mouse down operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>the y difference between the mouse down operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dx2",
              "type": "Number",
              "description": "<p>The x diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy2",
              "type": "Number",
              "description": "<p>The y diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onPanningEnd",
          "access": "",
          "virtual": false,
          "description": "<p>Called by the framework if the panning event of the figures ends. This happens\nafter the mous up event if the panning is active.</p>\n<pre><code> // You can alternatively register an event handler with:\n figure.on(&quot;panningEnd&quot;, function(emitter){\n     alert(&quot;panning of the figure called&quot;);\n });</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onDragEnd",
          "access": "",
          "virtual": false,
          "description": "<p>Will be called after a drag and drop action.<br>\nSub classes can override this method to implement additional stuff. Don't forget to call\nthe super implementation via <code>this._super();</code></p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "delegateTarget",
          "access": "private",
          "virtual": false,
          "description": "<p>Called by the framework during drag&amp;drop operations if the user drag a figure over this figure</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": "<p>the figure which should receive the drop event or null if the element didn't want a drop event</p>"
          }
        },
        {
          "name": "onDragEnter",
          "access": "",
          "virtual": false,
          "description": "<p>Called by the framework during drag&amp;drop operations if the user drag a figure over this figure</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onDragLeave",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the DragDrop object leaving the current hover figure.</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onDrop",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the user drop this element onto the dropTarget. This event is ONLY fired if the\nshape return &quot;this&quot; in the {@link draw2d.Figure#onDragEnter} method.</p>",
          "parameters": [
            {
              "name": "dropTarget",
              "type": "draw2d.Figure",
              "description": "<p>The drop target.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onCatch",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the user dropped an figure onto this element. This event is ONLY fired if the\nin the canvas installed {@link draw2d.policy.canvas.DropInterceptorPolicy} allow this.</p>",
          "parameters": [
            {
              "name": "droppedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The dropped figure.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onMouseEnter",
          "access": "",
          "virtual": false,
          "description": "<p>Callback method for the mouse enter event. Usefull for mouse hover-effects.\nOverride this method for your own effects. Don't call them manually.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onMouseLeave",
          "access": "",
          "virtual": false,
          "description": "<p>Callback method for the mouse leave event. Useful for mouse hover-effects.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onDoubleClick",
          "access": "",
          "virtual": false,
          "description": "<p>Called when a user dbl clicks on the element</p>\n<pre><code> // Alternatively you can register an event with:\n //\n figure.on(&quot;dblclick&quot;, function(emitter, event){\n     alert(&quot;user dbl click on the figure&quot;);\n });</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onClick",
          "access": "",
          "virtual": false,
          "description": "<p>Called when a user clicks on the element.</p>\n<pre><code> // You can alternatively register an event handler with:\n figure.on(&quot;click&quot;, function(emitter, event){\n     alert(&quot;user click on the figure&quot;);\n });</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onContextMenu",
          "access": "",
          "virtual": false,
          "description": "<p>called by the framework if the figure should show the context menu.<br>\nThe strategy to show the context menu depends on the platform. Either looong press or\nright click with the mouse.</p>\n<pre><code> // Alternatively you register for this event with:\n figure.on(&quot;contextmenu&quot;, function(emitter, event){\n     alert(&quot;user press the right mouse button for a context menu&quot;);\n });</code></pre>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate to show the menu</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate to show the menu</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getAlpha",
          "access": "",
          "virtual": false,
          "description": "<p>Return the alpha blending of the figure</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the current alpha blending</p>"
          }
        },
        {
          "name": "getRotationAngle",
          "access": "",
          "virtual": false,
          "description": "<p>return the rotation angle of the figure in degree of [0..356].</p>\n<br>\n<b>NOTE: this method is pre alpha and not for production. Only steps of 90 degree is working well</b>\n<br>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "isVisible",
          "access": "",
          "virtual": false,
          "description": "<p>Return true if the figure visible.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setKeepAspectRatio",
          "access": "",
          "virtual": false,
          "description": "<p>Guarantee, that the figure width/height will not be distorted. Applicable before calling setDimension().\nIt is false by default.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>boolean flag if the figure should respect the aspect ratio</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getKeepAspectRatio",
          "access": "",
          "virtual": false,
          "description": "<p>Return the flag if the shape keep the aspect ratio.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getZOrder",
          "access": "",
          "virtual": false,
          "description": "<p>Return the current z-index of the element. Currently this is an expensive method. The index will be calculated\nall the time. Caching is not implemented at the moment.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setCanSnapToHelper",
          "access": "",
          "virtual": false,
          "description": "<p>Set the flag if this object can snap to grid or geometry.\nA window of dialog should set this flag to false.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The snap to grid/geometry enable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getCanSnapToHelper",
          "access": "",
          "virtual": false,
          "description": "<p>Returns true if the figure can snap to any helper like a grid, guide, geometrie\nor something else.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "getSnapToGridAnchor",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "setSnapToGridAnchor",
          "access": "",
          "virtual": false,
          "description": "<p>Set the hot spot for all snapTo### operations.</p>",
          "parameters": [
            {
              "name": "point",
              "type": "draw2d.geo.Point",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setWidth",
          "access": "",
          "virtual": false,
          "description": "<p>Set the width of the figure and consider the minWidth attribute</p>",
          "parameters": [
            {
              "name": "width",
              "type": "Number",
              "description": "<p>the new width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getWidth",
          "access": "",
          "virtual": false,
          "description": "<p>The current width of the figure.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setHeight",
          "access": "",
          "virtual": false,
          "description": "<p>Set the heigth of the figure and consider the minWidth attribute</p>",
          "parameters": [
            {
              "name": "height",
              "type": "Number",
              "description": "<p>the new height of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getHeight",
          "access": "",
          "virtual": false,
          "description": "<p>The current height of the figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "getMinWidth",
          "access": "",
          "virtual": false,
          "description": "<p>This value is relevant for the interactive resize of the figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>Returns the min. width of this object.</p>"
          }
        },
        {
          "name": "setMinWidth",
          "access": "",
          "virtual": false,
          "description": "<p>Set the minimum width of this figure</p>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getMinHeight",
          "access": "",
          "virtual": false,
          "description": "<p>This value is relevant for the interactive resize of the figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>Returns the min. height of this object.</p>"
          }
        },
        {
          "name": "setMinHeight",
          "access": "",
          "virtual": false,
          "description": "<p>Set the minimum height of the figure.</p>",
          "parameters": [
            {
              "name": "h",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setX",
          "access": "",
          "virtual": false,
          "description": "<p>the the x-offset related to the parent figure or canvas</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the new x offset of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getX",
          "access": "",
          "virtual": false,
          "description": "<p>The x-offset related to the parent figure or canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the x-offset to the parent figure</p>"
          }
        },
        {
          "name": "setY",
          "access": "",
          "virtual": false,
          "description": "<p>the the y-offset related to the parent figure or canvas</p>",
          "parameters": [
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the new x offset of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getY",
          "access": "",
          "virtual": false,
          "description": "<p>The y-offset related to the parent figure or canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>The y-offset to the parent figure.</p>"
          }
        },
        {
          "name": "getAbsoluteX",
          "access": "",
          "virtual": false,
          "description": "<p>The x-offset related to the canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the x-offset to the canvas</p>"
          }
        },
        {
          "name": "getAbsoluteY",
          "access": "",
          "virtual": false,
          "description": "<p>The y-offset related to the canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>The y-offset to the canvas.</p>"
          }
        },
        {
          "name": "getAbsolutePosition",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the absolute y-position of the port.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getAbsoluteBounds",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the absolute y-position of the port.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "setPosition",
          "access": "",
          "virtual": false,
          "description": "<p>Set the position of the object.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   x: x,\n   y: y\n });</code></pre>",
          "parameters": [
            {
              "name": "x",
              "type": [
                "Number",
                "draw2d.geo.Point"
              ],
              "description": "<p>The new x coordinate of the figure or the x/y coordinate if it is an draw2d.geo.Point</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The new y coordinate of the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPosition",
          "access": "",
          "virtual": false,
          "description": "<p>Get the current position of the figure</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "translate",
          "access": "",
          "virtual": false,
          "description": "<p>Translate the figure with the given x/y offset.</p>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>The x offset to translate</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>The y offset to translate</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setBoundingBox",
          "access": "",
          "virtual": false,
          "description": "<p>Set the bounding box of the figure</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   width: w,\n   height: h,\n   x: x,\n   y: y\n });\n\n // or\n figure.attr({\n   boundingBox: {x:1, y:100, width:30, height:30}\n });</code></pre>",
          "parameters": [
            {
              "name": "rect",
              "type": "draw2d.geo.Rectangle",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getBoundingBox",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the bounding box of the figure in absolute position to the canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "hitTest",
          "access": "",
          "virtual": false,
          "description": "<p>Detect whenever the hands over coordinate is inside the figure.\nThe default implementation is a simple bounding box test.</p>",
          "parameters": [
            {
              "name": "iX",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "iY",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "corona",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setDraggable",
          "access": "",
          "virtual": false,
          "description": "<p>Switch on/off the drag drop behaviour of this object</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The new drag drop indicator</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "isDraggable",
          "access": "",
          "virtual": false,
          "description": "<p>Get the Drag drop enable flag</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": "<p>The new drag drop indicator</p>"
          }
        },
        {
          "name": "isResizeable",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the true if the figure can be resized.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setResizeable",
          "access": "",
          "virtual": false,
          "description": "<p>You can change the resizeable behaviour of this object. Hands over [false] and\nthe figure has no resizehandles if you select them with the mouse.<br></p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   resizeable: flag\n });</code></pre>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The resizeable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "isSelectable",
          "access": "",
          "virtual": false,
          "description": "<p>Indicates whenever the element is selectable by user interaction or API.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setSelectable",
          "access": "",
          "virtual": false,
          "description": "<p>You can change the selectable behavior of this object. Hands over [false] and\nthe figure has no selection handles if you try to select them with the mouse.<br></p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The selectable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "isStrechable",
          "access": "",
          "virtual": false,
          "description": "<p>Return true if the object doesn't care about the aspect ratio.\nYou can change the height and width independent.<br></p>\n<p>Replaced with &quot;getKeepAspectRatio&quot;</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "isDeleteable",
          "access": "",
          "virtual": false,
          "description": "<p>Return false if you avoid that the user can delete your figure.\nSub class can override this method.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setDeleteable",
          "access": "",
          "virtual": false,
          "description": "<p>Set the flag if the shape is deleteable.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>enable or disable flag for the delete operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setParent",
          "access": "private",
          "virtual": false,
          "description": "<p>Set the parent of this figure.\nDon't call them manually.</p>",
          "parameters": [
            {
              "name": "parent",
              "type": "draw2d.Figure",
              "description": "<p>The new parent of this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getParent",
          "access": "",
          "virtual": false,
          "description": "<p>Get the parent of this figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": ""
          }
        },
        {
          "name": "contains",
          "access": "",
          "virtual": false,
          "description": "<p>Check to see if a figure is a descendant of another figure.\n<br>\nThe contains() method returns true if the figure provided by the argument is a descendant of this figure,\nwhether it is a direct child or nested more deeply. Otherwise, it returns false.</p>",
          "parameters": [
            {
              "name": "containedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure that may be contained by (a descendant of) this figure.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getRoot",
          "access": "",
          "virtual": false,
          "description": "<p>Get the top most parent of this figure. This can be an layout figure or parent container</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": ""
          }
        },
        {
          "name": "setComposite",
          "access": "",
          "virtual": false,
          "description": "<p>Set the assigned composite of this figure.</p>",
          "parameters": [
            {
              "name": "composite",
              "type": "draw2d.shape.composite.StrongComposite",
              "description": "<p>The assigned composite of this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getComposite",
          "access": "",
          "virtual": false,
          "description": "<p>Get the assigned composite of this figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.shape.composite.StrongComposite",
            "description": ""
          }
        },
        {
          "name": "fireEvent",
          "access": "",
          "virtual": false,
          "description": "<p>Execute all handlers and behaviors attached to the figure for the given event type.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "String",
              "description": "<p>the event to trigger</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "args",
              "type": "Object",
              "description": "<p>optional parameters for the triggered event callback</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "on",
          "access": "",
          "virtual": false,
          "description": "<p>Attach an event handler function for one or more events to the figure.\nTo remove events bound with .on(), see {@link #off}.</p>\n<p>possible events are:<br></p>\n<ul>\n  <li>click</li>\n  <li>dblclick</li>\n  <li>move</li>\n  <li>resize</li>\n  <li>timer</li>\n  <li>contextmenu</li>\n  <li>show</li>\n  <li>hide</li>\n  <li>added</li>\n  <li>removed</li>\n  <li>change:[attr]</li>\n</ul>",
          "parameters": [
            {
              "name": "event",
              "type": "String",
              "description": "<p>One or more space-separated event types</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback",
              "type": "function",
              "description": "<p>A function to execute when the event is triggered.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback.emitter",
              "type": "draw2d.Figure",
              "description": "<p>the emitter of the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback.obj",
              "type": "Object",
              "description": "<p>optional event related data</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "context",
              "type": "Object",
              "description": "<p>optional context of the function callback.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "off",
          "access": "",
          "virtual": false,
          "description": "<p>The .off() method removes event handlers that were attached with {@link #on}.<br>\nCalling .off() with no arguments removes all handlers attached to the elements.<br>\n<br>\nIf a simple event name such as &quot;move&quot; is provided, all events of that type are removed from the figure.</p>",
          "parameters": [
            {
              "name": "eventOrFunction",
              "type": [
                "String",
                "function"
              ],
              "description": "<p>the event name of the registerd function or the function itself</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getBestChild",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the best figure at the location [x,y]. It is a simple hit test. Keep in mind that only visible objects\nare returned.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>The x position.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The y position.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "figureToIgnore",
              "type": [
                "draw2d.Figure",
                "Array"
              ],
              "description": "<p>The figures which should be ignored.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        }
      ]
    },
    {
      "name": "Diamond",
      "namespace": "draw2d.shape.basic",
      "description": "<p>draw2d.shape.basic.Diamond\nA Diamond Figure.</p>",
      "extends": [
        "draw2d.VectorFigure"
      ],
      "access": "",
      "virtual": false,
      "fires": "",
      "constructor": {
        "name": "Diamond",
        "description": "",
        "parameters": [],
        "examples": [
          "let d1 =  new draw2d.shape.basic.Diamond({x:10,y:10});\n    let d2 =  new draw2d.shape.basic.Diamond({x:100,y:10, bgColor:\"#f0f000\", alpha:0.7, width:100, height:60});\n\n    canvas.add(d1);\n    canvas.add(d2);\n\n    canvas.setCurrentSelection(d2);"
        ]
      },
      "functions": [
        {
          "name": "init",
          "access": "",
          "virtual": false,
          "description": "<p>Creates a new figure element which are not assigned to any canvas.</p>",
          "parameters": [
            {
              "name": "attr",
              "type": "Object",
              "description": "<p>the configuration of the shape</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setRadius",
          "access": "",
          "virtual": false,
          "description": "<p>Sets the corner radius or the edges.</p>",
          "parameters": [
            {
              "name": "radius",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getRadius",
          "access": "",
          "virtual": false,
          "description": "<p>Get the corner radius of the edges.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setDashArray",
          "access": "",
          "virtual": false,
          "description": "<p>Set the line style for this object.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   dash: dashPattern\n });</code></pre>",
          "parameters": [
            {
              "name": "dash",
              "type": "String",
              "description": "<p>can be one of this [&quot;&quot;, &quot;-&quot;, &quot;.&quot;, &quot;-.&quot;, &quot;-..&quot;, &quot;. &quot;, &quot;- &quot;, &quot;--&quot;, &quot;- .&quot;, &quot;--.&quot;, &quot;--..&quot;]</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getDashArray",
          "access": "",
          "virtual": false,
          "description": "<p>Get the line style for this object.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr(&quot;dash&quot;);</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setGlow",
          "access": "",
          "virtual": false,
          "description": "<p>Highlight the element or remove the highlighting</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>indicates glow/noGlow</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "repaint",
          "access": "private",
          "virtual": false,
          "description": "<p>propagate all attributes like color, stroke,... to the shape element</p>",
          "parameters": [
            {
              "name": "attributes",
              "type": "Object",
              "description": "<p>the style attributes for the SVG shape</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setBackgroundColor",
          "access": "",
          "virtual": false,
          "description": "<p>Set the new background color of the figure. It is possible to hands over\n<code>null</code> to set the background transparent.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;bgColor&quot;: &quot;#f0f0f0&quot;\n });</code></pre>",
          "parameters": [
            {
              "name": "color",
              "type": [
                "String",
                "draw2d.util.Color"
              ],
              "description": "<p>The new background color of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getBackgroundColor",
          "access": "",
          "virtual": false,
          "description": "<p>The current used background color.</p>\n<pre><code> // Alternatively you can use the attr method:\n var color =figure.attr(&quot;bgColor&quot;);</code></pre>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.Color",
            "description": ""
          }
        },
        {
          "name": "setStroke",
          "access": "",
          "virtual": false,
          "description": "<p>Set the stroke to use.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;stroke&quot;: 2\n });</code></pre>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "<p>The new line width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getStroke",
          "access": "",
          "virtual": false,
          "description": "<p>The used line width.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setColor",
          "access": "",
          "virtual": false,
          "description": "<p>Set the foreground color of the figure.\nThis method fires a <i>document dirty</i> event.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;color&quot;: &quot;#f3f3f3&quot;\n });</code></pre>",
          "parameters": [
            {
              "name": "color",
              "type": [
                "String",
                "draw2d.util.Color"
              ],
              "description": "<p>The new color of the line.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getColor",
          "access": "",
          "virtual": false,
          "description": "<p>Get the current used foreground color</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.Color",
            "description": ""
          }
        },
        {
          "name": "getPersistentAttributes",
          "access": "",
          "virtual": false,
          "description": "<p>Return an objects with all important attributes for XML or JSON serialization</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Object",
            "description": ""
          }
        },
        {
          "name": "setPersistentAttributes",
          "access": "",
          "virtual": false,
          "description": "<p>Read all attributes from the serialized properties and transfer them into the shape.</p>",
          "parameters": [
            {
              "name": "memento",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setPersistPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Indicates if the node should read/write the ports via the draw2d.Figure.getPersistenAttributes\nto the JSON object</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPersistPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Indicates if the figure writes the ports to the JSON structore too.\nDefault is &quot;false&quot;</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "toFront",
          "access": "",
          "virtual": false,
          "description": "<p>Moves the element so it is the closest to the viewerâ€™s eyes, on top of other elements. Additional\nthe internal model changed as well.</p>\n<p>Optional: Inserts current object in front of the given one.</p>",
          "parameters": [
            {
              "name": "figure",
              "type": "draw2d.Figure",
              "description": "<p>move current object in front of the given one.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "toBack",
          "access": "",
          "virtual": false,
          "description": "<p>Moves the element to the background. Additional\nthe internal model changed as well.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setVisible",
          "access": "",
          "virtual": false,
          "description": "<p>Show/hide the element. The element didn't receive any mouse events (click, dblclick) if you hide the\nfigure.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   visible: flag\n });</code></pre>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "duration",
              "type": "Number",
              "description": "<p>the optional number for the fadeIn /fadeOut of the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Return all ports of the node. The results contains\nall ports of the children too per default. Set <b>recursive</b>\nto false to retrieve direct assigned ports only.</p>",
          "parameters": [
            {
              "name": "recursive",
              "type": "Boolean",
              "description": "<p>indicates if the method should return children ports too. Default is <b>true</b></p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "getInputPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Return all input ports of the node.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "getOutputPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Return all output ports of the node.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "clone",
          "access": "",
          "virtual": false,
          "description": "<p>Clone the figure. <br>\nYou must override and implement the methods <b>getPersistentAttributes</b> and <b>setPersistentAttributes</b> for your custom\nfigures if the have special attributes.</p>\n<p>The clone() method performs a deep copy of the object, meaning that it copies the children, ports and decorations\nper default. You can control the clone procedure with the 'cloneMetaData'.</p>",
          "parameters": [
            {
              "name": "cloneMetaData",
              "type": "Object",
              "description": "<p>controls the clone procedure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "cloneMetaData.excludeChildren",
              "type": "Boolean",
              "description": "<p>set it to true if you want exclude the children.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "cloneMetaData.excludePorts",
              "type": "Boolean",
              "description": "<p>set it to true if you want exclude the ports of the node.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portName",
              "type": "String",
              "description": "<p>The name of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.Port",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getInputPort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the input port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.InputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getOutputPort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the output port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or the numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.OutputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getHybridPort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the input port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.InputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "addPort",
          "access": "",
          "virtual": false,
          "description": "<p>Add a port to this node at the given position.<br></p>",
          "parameters": [
            {
              "name": "port",
              "type": "draw2d.Port",
              "description": "<p>The new port to add.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>The layout for the port.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "resetPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Remove all ports of this node</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "removePort",
          "access": "",
          "virtual": false,
          "description": "<p>Removes a port and all related connections from this node.<br></p>",
          "parameters": [
            {
              "name": "port",
              "type": "draw2d.Port",
              "description": "<p>The port to remove.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "createPort",
          "access": "",
          "virtual": false,
          "description": "<p>Create a standard Port for this element. Inherited class can override this\nmethod to create its own type of ports.</p>",
          "parameters": [
            {
              "name": "type",
              "type": "String",
              "description": "<p>the type of the requested port. possible [&quot;input&quot;, &quot;output&quot;]</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>the layouter to use for this port</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getConnections",
          "access": "",
          "virtual": false,
          "description": "<p>Return all connections related to this node.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "setCanvas",
          "access": "",
          "virtual": false,
          "description": "<p>Set the canvas element of this figures. This can be used to determine whenever an element\nis added or removed to the canvas.</p>",
          "parameters": [
            {
              "name": "canvas",
              "type": "draw2d.Canvas",
              "description": "<p>the new parent of the figure or null</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setRotationAngle",
          "access": "",
          "virtual": false,
          "description": "<p>Set the rotation angle in degree [0..356]<br>\n<b>Only steps of 90 degree is working well</b>\n<br>\n// Alternatively you can use the attr method:\nfigure.attr({\nangle: angle\n});</p>",
          "parameters": [
            {
              "name": "angle",
              "type": "Number",
              "description": "<p>the rotation angle in degree</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setDimension",
          "access": "",
          "virtual": false,
          "description": "<p>Set the new width and height of the figure.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n    width:  w,\n    height: h\n });</code></pre>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "<p>The new width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "h",
              "type": "Number",
              "description": "<p>The new height of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onPortValueChanged",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the value of any port has been changed</p>",
          "parameters": [
            {
              "name": "relatedPort",
              "type": "draw2d.Port",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "layoutPorts",
          "access": "private",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "createCommand",
          "access": "private",
          "virtual": false,
          "description": "<p>Returns the Command to perform the specified Request or null.</p>",
          "parameters": [
            {
              "name": "request",
              "type": "draw2d.command.CommandType",
              "description": "<p>describes the Command being requested</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.command.Command",
            "description": "<p>null or a Command</p>"
          }
        },
        {
          "name": "attr",
          "access": "",
          "virtual": false,
          "description": "<p>Read or set shape attributes.<br>\nWhen no value is given, reads specified attribute from the element.<br>\nWhen value is given, sets the attribute to that value.\nMultiple attributes can be set by passing an object with name-value pairs.</p>\n<pre><code>let figure = new draw2d.shape.basic.Rectangle();\nfigure.attr('x');      //=&gt; read value\nfigure.attr('x', 30);  //=&gt; set value\n\n// multiple attributes:\nfigure.attr({\n  x: 30,\n  y: 40,\n  width : 200,\n  height: 50,\n  cssClass: &quot;red_border_figure&quot;\n});\n\n// it is possible to override any method of the figure as well\n// Instead of inheritance you can just override the callback methods\n// like\n//\nfigure.attr({\n   onClick : function(){\n       alert(&quot;click&quot;);\n   }\n});\n\n// or you can pass the attr values in the constructor\n//\nlet clickFigure = new draw2d.shape.basic.Rectangle({\n   onClick : function(){\n       alert(&quot;click&quot;);\n   }\n});\n</code></pre>\n<p>Additional you can set the user defined values (userData) with this method\nusing the dot-notation. User defined values are always part of the exported\nJSON data.</p>\n<pre><code>// setting multiple attributes:\nfigure.attr({\n  &quot;userData.my.property.x&quot;: 30,\n  &quot;userData.my.property.y&quot;: 40\n});\n</code></pre>\n<p>Also set using array notation is possible for the userData:</p>\n<pre><code>// dot notation and array brackets:\nfigure.attr({\n  &quot;userData.my.names[0]&quot;: &quot;John&quot;,\n  &quot;userData.my.names[1]&quot;: &quot;Doe&quot;\n});\n</code></pre>\n<p>The Object returned should be the equivalent structured object:</p>\n<pre><code>let obj = figure.getUserData();\n</code></pre>\n<p>That is, where obj is equivalent to:</p>\n<pre><code>let obj = {\n    my:{\n        property:{\n            x: 30,\n            y: 40\n       },\n       names:  [&quot;John&quot;, &quot;Doe&quot;]\n   }\n</code></pre>\n<p>};</p>",
          "parameters": [
            {
              "name": "name",
              "type": "String/Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "value",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "pick",
          "access": "",
          "virtual": false,
          "description": "<p>Return a copy of the object, filtered to only have values for the whitelisted keys.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "select",
          "access": "private",
          "virtual": false,
          "description": "<p>Add the figure to the current selection and propagate this to all edit policies.</p>",
          "parameters": [
            {
              "name": "asPrimarySelection",
              "type": "Boolean",
              "description": "<p>true if the element should be the primary selection</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "unselect",
          "access": "private",
          "virtual": false,
          "description": "<p>Unselect the figure and propagete this event to all edit policies.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setSelectionAdapter",
          "access": "",
          "virtual": false,
          "description": "<p>Returns a function which returns the the figure which must handle the selection handling.</p>",
          "parameters": [
            {
              "name": "adapter",
              "type": "function",
              "description": "<p>function which returns the figure which handles the selection handling</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getSelectionAdapter",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "function",
            "description": ""
          }
        },
        {
          "name": "isSelected",
          "access": "",
          "virtual": false,
          "description": "<p>Returns true if the figure part of the current canvas selection.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setUserData",
          "access": "",
          "virtual": false,
          "description": "<p>Allows a user to attach (or remove) data to an element, without needing to create a custom figure or shape.\nThe data must be a valid JSON object.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   userData: object\n });</code></pre>",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getUserData",
          "access": "",
          "virtual": false,
          "description": "<p>Returns any user data set previously on the given figure by setUserData.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Object",
            "description": ""
          }
        },
        {
          "name": "getId",
          "access": "",
          "virtual": false,
          "description": "<p>Return the UUID of this element.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "setId",
          "access": "",
          "virtual": false,
          "description": "<p>Set the id of this element.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  id: newId\n});</code></pre>",
          "parameters": [
            {
              "name": "newId",
              "type": "String",
              "description": "<p>the new id for this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Return the css styling class name of the element.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "setCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Set the css class of the node.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;cssClass&quot;: &quot;red_border_figure&quot;\n });</code></pre>",
          "parameters": [
            {
              "name": "cssClass",
              "type": "String",
              "description": "<p>the new css class name of the node</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "hasCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>The method will return true if the class is assigned to the element, even if other classes also are.</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the class name to check</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "addCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Add a CSS class to the figure.<br>\nIt's important to note that this method does not replace a class. It simply adds the class,\nappending it to any which may already be assigned to the elements.</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "removeCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Remove the given css class name from the figure</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the css class name to add</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "toggleCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Add or remove the given css class name from the figure</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the class name to toggle</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getCanvas",
          "access": "",
          "virtual": false,
          "description": "<p>Return the current assigned canvas container.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.Canvas",
            "description": ""
          }
        },
        {
          "name": "startTimer",
          "access": "",
          "virtual": false,
          "description": "<p>Start a timer which calls the onTimer method in the given interval.</p>",
          "parameters": [
            {
              "name": "milliSeconds",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "stopTimer",
          "access": "",
          "virtual": false,
          "description": "<p>Stop the internal timer.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onTimer",
          "access": "",
          "virtual": false,
          "description": "<p>Callback method for the internal timer handling<br>\nInherit classes must override this method if they want use the timer feature.</p>\n<pre><code> // Alternatively you can register for this event with\n figure.on(&quot;timer&quot;, function(emitter){\n     alert(&quot;timer fired&quot;);\n });</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "installEditPolicy",
          "access": "",
          "virtual": false,
          "description": "<p>Install a new edit policy to the figure. Each editpolicy is able to focus on a single editing\ntask or group of related tasks. This also allows editing behavior to be selectively reused across\ndifferent figure implementations. Also, behavior can change dynamically, such as when the layouts\nor routing methods change.</p>\n<p>Example for limited DragDrop behavior can be a draw2d.layout.constraint.RegionConstriantPolicy.</p>",
          "parameters": [
            {
              "name": "policy",
              "type": "draw2d.policy.EditPolicy",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "uninstallEditPolicy",
          "access": "",
          "virtual": false,
          "description": "<p>UnInstall the edit policy from the figure. Either the instance itself if found\nor all kind of the given edit policies.</p>",
          "parameters": [
            {
              "name": "policy",
              "type": "draw2d.policy.EditPolicy",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "add",
          "access": "",
          "virtual": false,
          "description": "<p>Add a child figure to the figure. The hands over figure doesn't support drag&amp;drop\noperations. It's only a decorator for the connection.<br>\nMainly for labels or other decorations</p>\n<pre><code>let start = new draw2d.shape.node.Start({x:80, y:150});\nstart.add(new draw2d.shape.basic.Label({text:&quot;Test Label&quot;}), new draw2d.layout.locator.TopLocator());\n\ncanvas.add( start);</code></pre>",
          "parameters": [
            {
              "name": "child",
              "type": "draw2d.Figure",
              "description": "<p>the figure to add as decoration to the connection.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>the locator for the child.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "index",
              "type": "Number",
              "description": "<p>optional index where to insert the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "remove",
          "access": "",
          "virtual": false,
          "description": "<p>Remove the child figure from this figure and the canvas</p>",
          "parameters": [
            {
              "name": "child",
              "type": "draw2d.Figure",
              "description": "<p>the figure to remove.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Object",
            "description": "<p>the removed tupple of figure/locator or null if the child isn't found</p>"
          }
        },
        {
          "name": "getChildren",
          "access": "",
          "virtual": false,
          "description": "<p>Return all children/decorations of this shape which has been added with\ndraw2d.Figure.add</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "resetChildren",
          "access": "",
          "virtual": false,
          "description": "<p>Remove all children/decorations of this shape</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getShapeElement",
          "access": "protected",
          "virtual": false,
          "description": "<p>return the current SVG shape element or create it on demand.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getTopLevelShapeElement",
          "access": "private",
          "virtual": false,
          "description": "<p>Get the top level shape element. May the figure has a set of SVG elements. In this case this\nmethod must return the top level node.<br>\nThis method is used for the toFront/toBack method to order the nodes in the correct way.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "createShapeElement",
          "access": "",
          "virtual": true,
          "description": "<p>Inherited classes must override this method to implement it's own draw functionality.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "applyTransformation",
          "access": "private",
          "virtual": false,
          "description": "<p>apply a transformation to the shape like rotation, translate,..</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getHandleBBox",
          "access": "",
          "virtual": false,
          "description": "<p>Allow dragging only when the cursor is over a specific part of the figure.\n<br>\nOverride this method to specify the bounding box of an element or a draw2d.util.ArrayList\nof draw2d.geo.Rectangle of bounding boxes used to drag the figure. The returned coordinates\nare absolute coordinates to the canvas.\n<br>\n<br>\nDefault implementation returns <b>null</b> to indicate to use the complete figures as\ndrag handle.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": [
              "draw2d.geo.Rectangle",
              "draw2d.util.ArrayList"
            ],
            "description": ""
          }
        },
        {
          "name": "onDragStart",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the drag and drop action begins. You can return [false] if you\nwant avoid that the figure can be move.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": "<p>true if the figure accepts dragging</p>"
          }
        },
        {
          "name": "onDrag",
          "access": "private",
          "virtual": false,
          "description": "<p>Don't call them manually. This will be done by the framework.<br>\nWill be called if the object are moved via drag and drop.\nSub classes can override this method to implement additional stuff. Don't forget to call\nthe super implementation via <code>this._super(dx, dy, dx2, dy2);</code></p>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>the x difference between the start of the drag drop operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>the y difference between the start of the drag drop operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dx2",
              "type": "Number",
              "description": "<p>The x diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy2",
              "type": "Number",
              "description": "<p>The y diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onPanning",
          "access": "",
          "virtual": false,
          "description": "<p>Called by the framework if the figure returns false for the drag operation. In this\ncase we send a &quot;panning&quot; event - mouseDown + mouseMove. This is very useful for\nUI-Widget like slider, spinner,...</p>\n<pre><code> // You can alternatively register an event handler with:\n figure.on(&quot;panning&quot;, function(emitter, eventData){\n     alert(&quot;panning of the figure called&quot;);\n });</code></pre>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>the x difference between the mouse down operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>the y difference between the mouse down operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dx2",
              "type": "Number",
              "description": "<p>The x diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy2",
              "type": "Number",
              "description": "<p>The y diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onPanningEnd",
          "access": "",
          "virtual": false,
          "description": "<p>Called by the framework if the panning event of the figures ends. This happens\nafter the mous up event if the panning is active.</p>\n<pre><code> // You can alternatively register an event handler with:\n figure.on(&quot;panningEnd&quot;, function(emitter){\n     alert(&quot;panning of the figure called&quot;);\n });</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onDragEnd",
          "access": "",
          "virtual": false,
          "description": "<p>Will be called after a drag and drop action.<br>\nSub classes can override this method to implement additional stuff. Don't forget to call\nthe super implementation via <code>this._super();</code></p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "delegateTarget",
          "access": "private",
          "virtual": false,
          "description": "<p>Called by the framework during drag&amp;drop operations if the user drag a figure over this figure</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": "<p>the figure which should receive the drop event or null if the element didn't want a drop event</p>"
          }
        },
        {
          "name": "onDragEnter",
          "access": "",
          "virtual": false,
          "description": "<p>Called by the framework during drag&amp;drop operations if the user drag a figure over this figure</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onDragLeave",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the DragDrop object leaving the current hover figure.</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onDrop",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the user drop this element onto the dropTarget. This event is ONLY fired if the\nshape return &quot;this&quot; in the {@link draw2d.Figure#onDragEnter} method.</p>",
          "parameters": [
            {
              "name": "dropTarget",
              "type": "draw2d.Figure",
              "description": "<p>The drop target.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onCatch",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the user dropped an figure onto this element. This event is ONLY fired if the\nin the canvas installed {@link draw2d.policy.canvas.DropInterceptorPolicy} allow this.</p>",
          "parameters": [
            {
              "name": "droppedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The dropped figure.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onMouseEnter",
          "access": "",
          "virtual": false,
          "description": "<p>Callback method for the mouse enter event. Usefull for mouse hover-effects.\nOverride this method for your own effects. Don't call them manually.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onMouseLeave",
          "access": "",
          "virtual": false,
          "description": "<p>Callback method for the mouse leave event. Useful for mouse hover-effects.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onDoubleClick",
          "access": "",
          "virtual": false,
          "description": "<p>Called when a user dbl clicks on the element</p>\n<pre><code> // Alternatively you can register an event with:\n //\n figure.on(&quot;dblclick&quot;, function(emitter, event){\n     alert(&quot;user dbl click on the figure&quot;);\n });</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onClick",
          "access": "",
          "virtual": false,
          "description": "<p>Called when a user clicks on the element.</p>\n<pre><code> // You can alternatively register an event handler with:\n figure.on(&quot;click&quot;, function(emitter, event){\n     alert(&quot;user click on the figure&quot;);\n });</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onContextMenu",
          "access": "",
          "virtual": false,
          "description": "<p>called by the framework if the figure should show the context menu.<br>\nThe strategy to show the context menu depends on the platform. Either looong press or\nright click with the mouse.</p>\n<pre><code> // Alternatively you register for this event with:\n figure.on(&quot;contextmenu&quot;, function(emitter, event){\n     alert(&quot;user press the right mouse button for a context menu&quot;);\n });</code></pre>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate to show the menu</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate to show the menu</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setAlpha",
          "access": "",
          "virtual": false,
          "description": "<p>Set the alpha blending of this figure.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;alpha&quot;: percent\n });\n\n // ...or:\n figure.attr({\n   &quot;opacity&quot;: percent\n });</code></pre>",
          "parameters": [
            {
              "name": "percent",
              "type": "Number",
              "description": "<p>value between [0..1].</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getAlpha",
          "access": "",
          "virtual": false,
          "description": "<p>Return the alpha blending of the figure</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the current alpha blending</p>"
          }
        },
        {
          "name": "getRotationAngle",
          "access": "",
          "virtual": false,
          "description": "<p>return the rotation angle of the figure in degree of [0..356].</p>\n<br>\n<b>NOTE: this method is pre alpha and not for production. Only steps of 90 degree is working well</b>\n<br>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "isVisible",
          "access": "",
          "virtual": false,
          "description": "<p>Return true if the figure visible.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setKeepAspectRatio",
          "access": "",
          "virtual": false,
          "description": "<p>Guarantee, that the figure width/height will not be distorted. Applicable before calling setDimension().\nIt is false by default.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>boolean flag if the figure should respect the aspect ratio</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getKeepAspectRatio",
          "access": "",
          "virtual": false,
          "description": "<p>Return the flag if the shape keep the aspect ratio.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getZOrder",
          "access": "",
          "virtual": false,
          "description": "<p>Return the current z-index of the element. Currently this is an expensive method. The index will be calculated\nall the time. Caching is not implemented at the moment.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setCanSnapToHelper",
          "access": "",
          "virtual": false,
          "description": "<p>Set the flag if this object can snap to grid or geometry.\nA window of dialog should set this flag to false.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The snap to grid/geometry enable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getCanSnapToHelper",
          "access": "",
          "virtual": false,
          "description": "<p>Returns true if the figure can snap to any helper like a grid, guide, geometrie\nor something else.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "getSnapToGridAnchor",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "setSnapToGridAnchor",
          "access": "",
          "virtual": false,
          "description": "<p>Set the hot spot for all snapTo### operations.</p>",
          "parameters": [
            {
              "name": "point",
              "type": "draw2d.geo.Point",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setWidth",
          "access": "",
          "virtual": false,
          "description": "<p>Set the width of the figure and consider the minWidth attribute</p>",
          "parameters": [
            {
              "name": "width",
              "type": "Number",
              "description": "<p>the new width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getWidth",
          "access": "",
          "virtual": false,
          "description": "<p>The current width of the figure.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setHeight",
          "access": "",
          "virtual": false,
          "description": "<p>Set the heigth of the figure and consider the minWidth attribute</p>",
          "parameters": [
            {
              "name": "height",
              "type": "Number",
              "description": "<p>the new height of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getHeight",
          "access": "",
          "virtual": false,
          "description": "<p>The current height of the figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "getMinWidth",
          "access": "",
          "virtual": false,
          "description": "<p>This value is relevant for the interactive resize of the figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>Returns the min. width of this object.</p>"
          }
        },
        {
          "name": "setMinWidth",
          "access": "",
          "virtual": false,
          "description": "<p>Set the minimum width of this figure</p>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getMinHeight",
          "access": "",
          "virtual": false,
          "description": "<p>This value is relevant for the interactive resize of the figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>Returns the min. height of this object.</p>"
          }
        },
        {
          "name": "setMinHeight",
          "access": "",
          "virtual": false,
          "description": "<p>Set the minimum height of the figure.</p>",
          "parameters": [
            {
              "name": "h",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setX",
          "access": "",
          "virtual": false,
          "description": "<p>the the x-offset related to the parent figure or canvas</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the new x offset of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getX",
          "access": "",
          "virtual": false,
          "description": "<p>The x-offset related to the parent figure or canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the x-offset to the parent figure</p>"
          }
        },
        {
          "name": "setY",
          "access": "",
          "virtual": false,
          "description": "<p>the the y-offset related to the parent figure or canvas</p>",
          "parameters": [
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the new x offset of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getY",
          "access": "",
          "virtual": false,
          "description": "<p>The y-offset related to the parent figure or canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>The y-offset to the parent figure.</p>"
          }
        },
        {
          "name": "getAbsoluteX",
          "access": "",
          "virtual": false,
          "description": "<p>The x-offset related to the canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the x-offset to the canvas</p>"
          }
        },
        {
          "name": "getAbsoluteY",
          "access": "",
          "virtual": false,
          "description": "<p>The y-offset related to the canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>The y-offset to the canvas.</p>"
          }
        },
        {
          "name": "getAbsolutePosition",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the absolute y-position of the port.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getAbsoluteBounds",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the absolute y-position of the port.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "setPosition",
          "access": "",
          "virtual": false,
          "description": "<p>Set the position of the object.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   x: x,\n   y: y\n });</code></pre>",
          "parameters": [
            {
              "name": "x",
              "type": [
                "Number",
                "draw2d.geo.Point"
              ],
              "description": "<p>The new x coordinate of the figure or the x/y coordinate if it is an draw2d.geo.Point</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The new y coordinate of the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPosition",
          "access": "",
          "virtual": false,
          "description": "<p>Get the current position of the figure</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "translate",
          "access": "",
          "virtual": false,
          "description": "<p>Translate the figure with the given x/y offset.</p>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>The x offset to translate</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>The y offset to translate</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setBoundingBox",
          "access": "",
          "virtual": false,
          "description": "<p>Set the bounding box of the figure</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   width: w,\n   height: h,\n   x: x,\n   y: y\n });\n\n // or\n figure.attr({\n   boundingBox: {x:1, y:100, width:30, height:30}\n });</code></pre>",
          "parameters": [
            {
              "name": "rect",
              "type": "draw2d.geo.Rectangle",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getBoundingBox",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the bounding box of the figure in absolute position to the canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "hitTest",
          "access": "",
          "virtual": false,
          "description": "<p>Detect whenever the hands over coordinate is inside the figure.\nThe default implementation is a simple bounding box test.</p>",
          "parameters": [
            {
              "name": "iX",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "iY",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "corona",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setDraggable",
          "access": "",
          "virtual": false,
          "description": "<p>Switch on/off the drag drop behaviour of this object</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The new drag drop indicator</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "isDraggable",
          "access": "",
          "virtual": false,
          "description": "<p>Get the Drag drop enable flag</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": "<p>The new drag drop indicator</p>"
          }
        },
        {
          "name": "isResizeable",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the true if the figure can be resized.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setResizeable",
          "access": "",
          "virtual": false,
          "description": "<p>You can change the resizeable behaviour of this object. Hands over [false] and\nthe figure has no resizehandles if you select them with the mouse.<br></p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   resizeable: flag\n });</code></pre>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The resizeable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "isSelectable",
          "access": "",
          "virtual": false,
          "description": "<p>Indicates whenever the element is selectable by user interaction or API.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setSelectable",
          "access": "",
          "virtual": false,
          "description": "<p>You can change the selectable behavior of this object. Hands over [false] and\nthe figure has no selection handles if you try to select them with the mouse.<br></p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The selectable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "isStrechable",
          "access": "",
          "virtual": false,
          "description": "<p>Return true if the object doesn't care about the aspect ratio.\nYou can change the height and width independent.<br></p>\n<p>Replaced with &quot;getKeepAspectRatio&quot;</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "isDeleteable",
          "access": "",
          "virtual": false,
          "description": "<p>Return false if you avoid that the user can delete your figure.\nSub class can override this method.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setDeleteable",
          "access": "",
          "virtual": false,
          "description": "<p>Set the flag if the shape is deleteable.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>enable or disable flag for the delete operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setParent",
          "access": "private",
          "virtual": false,
          "description": "<p>Set the parent of this figure.\nDon't call them manually.</p>",
          "parameters": [
            {
              "name": "parent",
              "type": "draw2d.Figure",
              "description": "<p>The new parent of this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getParent",
          "access": "",
          "virtual": false,
          "description": "<p>Get the parent of this figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": ""
          }
        },
        {
          "name": "contains",
          "access": "",
          "virtual": false,
          "description": "<p>Check to see if a figure is a descendant of another figure.\n<br>\nThe contains() method returns true if the figure provided by the argument is a descendant of this figure,\nwhether it is a direct child or nested more deeply. Otherwise, it returns false.</p>",
          "parameters": [
            {
              "name": "containedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure that may be contained by (a descendant of) this figure.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getRoot",
          "access": "",
          "virtual": false,
          "description": "<p>Get the top most parent of this figure. This can be an layout figure or parent container</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": ""
          }
        },
        {
          "name": "setComposite",
          "access": "",
          "virtual": false,
          "description": "<p>Set the assigned composite of this figure.</p>",
          "parameters": [
            {
              "name": "composite",
              "type": "draw2d.shape.composite.StrongComposite",
              "description": "<p>The assigned composite of this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getComposite",
          "access": "",
          "virtual": false,
          "description": "<p>Get the assigned composite of this figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.shape.composite.StrongComposite",
            "description": ""
          }
        },
        {
          "name": "fireEvent",
          "access": "",
          "virtual": false,
          "description": "<p>Execute all handlers and behaviors attached to the figure for the given event type.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "String",
              "description": "<p>the event to trigger</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "args",
              "type": "Object",
              "description": "<p>optional parameters for the triggered event callback</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "on",
          "access": "",
          "virtual": false,
          "description": "<p>Attach an event handler function for one or more events to the figure.\nTo remove events bound with .on(), see {@link #off}.</p>\n<p>possible events are:<br></p>\n<ul>\n  <li>click</li>\n  <li>dblclick</li>\n  <li>move</li>\n  <li>resize</li>\n  <li>timer</li>\n  <li>contextmenu</li>\n  <li>show</li>\n  <li>hide</li>\n  <li>added</li>\n  <li>removed</li>\n  <li>change:[attr]</li>\n</ul>",
          "parameters": [
            {
              "name": "event",
              "type": "String",
              "description": "<p>One or more space-separated event types</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback",
              "type": "function",
              "description": "<p>A function to execute when the event is triggered.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback.emitter",
              "type": "draw2d.Figure",
              "description": "<p>the emitter of the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback.obj",
              "type": "Object",
              "description": "<p>optional event related data</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "context",
              "type": "Object",
              "description": "<p>optional context of the function callback.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "off",
          "access": "",
          "virtual": false,
          "description": "<p>The .off() method removes event handlers that were attached with {@link #on}.<br>\nCalling .off() with no arguments removes all handlers attached to the elements.<br>\n<br>\nIf a simple event name such as &quot;move&quot; is provided, all events of that type are removed from the figure.</p>",
          "parameters": [
            {
              "name": "eventOrFunction",
              "type": [
                "String",
                "function"
              ],
              "description": "<p>the event name of the registerd function or the function itself</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getBestChild",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the best figure at the location [x,y]. It is a simple hit test. Keep in mind that only visible objects\nare returned.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>The x position.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The y position.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "figureToIgnore",
              "type": [
                "draw2d.Figure",
                "Array"
              ],
              "description": "<p>The figures which should be ignored.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        }
      ]
    },
    {
      "name": "GhostVertexResizeHandle",
      "namespace": "draw2d.shape.basic",
      "description": "<p>draw2d.shape.basic.GhostVertexResizeHandle\nResizeHandle for a vertex edit policy. Click of this kind of resize handles\nadds a new vertex to the polyline or polygon.</p>",
      "extends": [
        "draw2d.shape.basic.LineResizeHandle"
      ],
      "access": "",
      "virtual": false,
      "fires": "",
      "constructor": {
        "name": "GhostVertexResizeHandle",
        "description": "",
        "parameters": [],
        "examples": []
      },
      "functions": [
        {
          "name": "init",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setAlpha",
          "access": "",
          "virtual": false,
          "description": "<p>Set the alpha blending of this figure.</p>",
          "parameters": [
            {
              "name": "percent",
              "type": "Number",
              "description": "<p>Value between [0..1].</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onClick",
          "access": "",
          "virtual": false,
          "description": "<p>Called when a user clicks on the element</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onDragStart",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the drag and drop action begins. You can return [false] if you\nwant avoid the that the figure can be move.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onDrag",
          "access": "",
          "virtual": false,
          "description": "<p>Called from the framework during a drag&amp;drop operation</p>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>the x difference between the start of the drag drop operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>the y difference between the start of the drag drop operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dx2",
              "type": "Number",
              "description": "<p>The x diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy2",
              "type": "Number",
              "description": "<p>The y diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "onDragEnd",
          "access": "",
          "virtual": false,
          "description": "<p>Called after a drag and drop action.<br>\nSub classes can override this method to implement additional stuff. Don't forget to call the super implementation via <code>this._super();</code></p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "relocate",
          "access": "",
          "virtual": false,
          "description": "<p>Controls the location of the resize handle</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getOwner",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the current used SVG as string</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "getIndex",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the index of the selection. In case of a PlyLine the count is dynamic.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "createShapeElement",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setBackgroundColor",
          "access": "",
          "virtual": false,
          "description": "<p>Set the new background color of the figure. It is possible to hands over\n<code>null</code> to set the background transparent.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;bgColor&quot;: &quot;#f0f0f0&quot;\n });</code></pre>",
          "parameters": [
            {
              "name": "color",
              "type": [
                "String",
                "draw2d.util.Color"
              ],
              "description": "<p>The new background color of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getRelatedPort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the port below the ResizeHandle.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.Port",
            "description": ""
          }
        },
        {
          "name": "getOppositePort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the port of the other side of the related connection.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.Port",
            "description": ""
          }
        },
        {
          "name": "repaint",
          "access": "private",
          "virtual": false,
          "description": "<p>propagate all attributes like color, stroke,... to the shape element</p>",
          "parameters": [
            {
              "name": "attributes",
              "type": "Object",
              "description": "<p>the style attributes for the SVG shape</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "supportsSnapToHelper",
          "access": "",
          "virtual": false,
          "description": "<p>The LineResizeHandle didn't support the SnapToHelper feature if the\ncorresponding object is an Connection. A Connection is always bounded to\nPort. In this case it makes no sense to use a Grid or Geometry for snapping.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": "<p>return false if the corresponding object didn't support snapTo</p>"
          }
        },
        {
          "name": "show",
          "access": "",
          "virtual": false,
          "description": "<p>Show the ResizeHandle and add it to the canvas.<br>\nAdditional bring it in to the front of other figures.</p>",
          "parameters": [
            {
              "name": "canvas",
              "type": "draw2d.Canvas",
              "description": "<p>the canvas to use</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-position</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-position</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "hide",
          "access": "",
          "virtual": false,
          "description": "<p>Hide the resize handle and remove it from the canvas.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onKeyDown",
          "access": "",
          "virtual": false,
          "description": "<p>Override this method and redirect them to the canvas. A ResizeHandle didn't support\nKeyboard interaction at the moment.</p>",
          "parameters": [
            {
              "name": "keyCode",
              "type": "Number",
              "description": "<p>the id of the pressed key</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrl",
              "type": "Boolean",
              "description": "<p>true if the user has pressed the CTRL/STRG key as well.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setDiameter",
          "access": "",
          "virtual": false,
          "description": "<p>Set the diameter of the circle. The center of the circle will be retained.</p>",
          "parameters": [
            {
              "name": "d",
              "type": "Number",
              "description": "<p>The new diameter of the circle.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getDiameter",
          "access": "",
          "virtual": false,
          "description": "<p>Get the diameter of the circle.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setRadius",
          "access": "",
          "virtual": false,
          "description": "<p>Set the radius of the circle. The center of the circle will be retained.</p>",
          "parameters": [
            {
              "name": "d",
              "type": "Number",
              "description": "<p>The new radius of the circle.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPersistentAttributes",
          "access": "",
          "virtual": false,
          "description": "<p>Return an objects with all important attributes for XML or JSON serialization</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Object",
            "description": ""
          }
        },
        {
          "name": "getCenter",
          "access": "",
          "virtual": false,
          "description": "<p>Get the center of the figure</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setCenter",
          "access": "",
          "virtual": false,
          "description": "<p>Set the center of the figure.</p>",
          "parameters": [
            {
              "name": "x",
              "type": [
                "Number",
                "draw2d.geo.Point"
              ],
              "description": "<p>the new x coordinate of the center or a draw2d.geo.Point object with the center</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y coordinate of the new center of the first argument isn't a draw2d.geo.Point object</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "intersectionWithLine",
          "access": "",
          "virtual": false,
          "description": "<p>NOTE: Rotation will need to be added to this function</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getRadius",
          "access": "",
          "virtual": false,
          "description": "<p>Get the corner radius of the edges.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setDashArray",
          "access": "",
          "virtual": false,
          "description": "<p>Set the line style for this object.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   dash: dashPattern\n });</code></pre>",
          "parameters": [
            {
              "name": "dash",
              "type": "String",
              "description": "<p>can be one of this [&quot;&quot;, &quot;-&quot;, &quot;.&quot;, &quot;-.&quot;, &quot;-..&quot;, &quot;. &quot;, &quot;- &quot;, &quot;--&quot;, &quot;- .&quot;, &quot;--.&quot;, &quot;--..&quot;]</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getDashArray",
          "access": "",
          "virtual": false,
          "description": "<p>Get the line style for this object.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr(&quot;dash&quot;);</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setGlow",
          "access": "",
          "virtual": false,
          "description": "<p>Highlight the element or remove the highlighting</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>indicates glow/noGlow</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getBackgroundColor",
          "access": "",
          "virtual": false,
          "description": "<p>The current used background color.</p>\n<pre><code> // Alternatively you can use the attr method:\n var color =figure.attr(&quot;bgColor&quot;);</code></pre>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.Color",
            "description": ""
          }
        },
        {
          "name": "setStroke",
          "access": "",
          "virtual": false,
          "description": "<p>Set the stroke to use.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;stroke&quot;: 2\n });</code></pre>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "<p>The new line width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getStroke",
          "access": "",
          "virtual": false,
          "description": "<p>The used line width.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setColor",
          "access": "",
          "virtual": false,
          "description": "<p>Set the foreground color of the figure.\nThis method fires a <i>document dirty</i> event.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;color&quot;: &quot;#f3f3f3&quot;\n });</code></pre>",
          "parameters": [
            {
              "name": "color",
              "type": [
                "String",
                "draw2d.util.Color"
              ],
              "description": "<p>The new color of the line.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getColor",
          "access": "",
          "virtual": false,
          "description": "<p>Get the current used foreground color</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.Color",
            "description": ""
          }
        },
        {
          "name": "setPersistentAttributes",
          "access": "",
          "virtual": false,
          "description": "<p>Read all attributes from the serialized properties and transfer them into the shape.</p>",
          "parameters": [
            {
              "name": "memento",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setPersistPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Indicates if the node should read/write the ports via the draw2d.Figure.getPersistenAttributes\nto the JSON object</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPersistPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Indicates if the figure writes the ports to the JSON structore too.\nDefault is &quot;false&quot;</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "toFront",
          "access": "",
          "virtual": false,
          "description": "<p>Moves the element so it is the closest to the viewerâ€™s eyes, on top of other elements. Additional\nthe internal model changed as well.</p>\n<p>Optional: Inserts current object in front of the given one.</p>",
          "parameters": [
            {
              "name": "figure",
              "type": "draw2d.Figure",
              "description": "<p>move current object in front of the given one.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "toBack",
          "access": "",
          "virtual": false,
          "description": "<p>Moves the element to the background. Additional\nthe internal model changed as well.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setVisible",
          "access": "",
          "virtual": false,
          "description": "<p>Show/hide the element. The element didn't receive any mouse events (click, dblclick) if you hide the\nfigure.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   visible: flag\n });</code></pre>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "duration",
              "type": "Number",
              "description": "<p>the optional number for the fadeIn /fadeOut of the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Return all ports of the node. The results contains\nall ports of the children too per default. Set <b>recursive</b>\nto false to retrieve direct assigned ports only.</p>",
          "parameters": [
            {
              "name": "recursive",
              "type": "Boolean",
              "description": "<p>indicates if the method should return children ports too. Default is <b>true</b></p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "getInputPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Return all input ports of the node.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "getOutputPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Return all output ports of the node.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "clone",
          "access": "",
          "virtual": false,
          "description": "<p>Clone the figure. <br>\nYou must override and implement the methods <b>getPersistentAttributes</b> and <b>setPersistentAttributes</b> for your custom\nfigures if the have special attributes.</p>\n<p>The clone() method performs a deep copy of the object, meaning that it copies the children, ports and decorations\nper default. You can control the clone procedure with the 'cloneMetaData'.</p>",
          "parameters": [
            {
              "name": "cloneMetaData",
              "type": "Object",
              "description": "<p>controls the clone procedure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "cloneMetaData.excludeChildren",
              "type": "Boolean",
              "description": "<p>set it to true if you want exclude the children.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "cloneMetaData.excludePorts",
              "type": "Boolean",
              "description": "<p>set it to true if you want exclude the ports of the node.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portName",
              "type": "String",
              "description": "<p>The name of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.Port",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getInputPort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the input port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.InputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getOutputPort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the output port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or the numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.OutputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getHybridPort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the input port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.InputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "addPort",
          "access": "",
          "virtual": false,
          "description": "<p>Add a port to this node at the given position.<br></p>",
          "parameters": [
            {
              "name": "port",
              "type": "draw2d.Port",
              "description": "<p>The new port to add.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>The layout for the port.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "resetPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Remove all ports of this node</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "removePort",
          "access": "",
          "virtual": false,
          "description": "<p>Removes a port and all related connections from this node.<br></p>",
          "parameters": [
            {
              "name": "port",
              "type": "draw2d.Port",
              "description": "<p>The port to remove.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "createPort",
          "access": "",
          "virtual": false,
          "description": "<p>Create a standard Port for this element. Inherited class can override this\nmethod to create its own type of ports.</p>",
          "parameters": [
            {
              "name": "type",
              "type": "String",
              "description": "<p>the type of the requested port. possible [&quot;input&quot;, &quot;output&quot;]</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>the layouter to use for this port</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getConnections",
          "access": "",
          "virtual": false,
          "description": "<p>Return all connections related to this node.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "setCanvas",
          "access": "",
          "virtual": false,
          "description": "<p>Set the canvas element of this figures. This can be used to determine whenever an element\nis added or removed to the canvas.</p>",
          "parameters": [
            {
              "name": "canvas",
              "type": "draw2d.Canvas",
              "description": "<p>the new parent of the figure or null</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setRotationAngle",
          "access": "",
          "virtual": false,
          "description": "<p>Set the rotation angle in degree [0..356]<br>\n<b>Only steps of 90 degree is working well</b>\n<br>\n// Alternatively you can use the attr method:\nfigure.attr({\nangle: angle\n});</p>",
          "parameters": [
            {
              "name": "angle",
              "type": "Number",
              "description": "<p>the rotation angle in degree</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setDimension",
          "access": "",
          "virtual": false,
          "description": "<p>Set the new width and height of the figure.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n    width:  w,\n    height: h\n });</code></pre>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "<p>The new width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "h",
              "type": "Number",
              "description": "<p>The new height of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onPortValueChanged",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the value of any port has been changed</p>",
          "parameters": [
            {
              "name": "relatedPort",
              "type": "draw2d.Port",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "layoutPorts",
          "access": "private",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "createCommand",
          "access": "private",
          "virtual": false,
          "description": "<p>Returns the Command to perform the specified Request or null.</p>",
          "parameters": [
            {
              "name": "request",
              "type": "draw2d.command.CommandType",
              "description": "<p>describes the Command being requested</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.command.Command",
            "description": "<p>null or a Command</p>"
          }
        },
        {
          "name": "attr",
          "access": "",
          "virtual": false,
          "description": "<p>Read or set shape attributes.<br>\nWhen no value is given, reads specified attribute from the element.<br>\nWhen value is given, sets the attribute to that value.\nMultiple attributes can be set by passing an object with name-value pairs.</p>\n<pre><code>let figure = new draw2d.shape.basic.Rectangle();\nfigure.attr('x');      //=&gt; read value\nfigure.attr('x', 30);  //=&gt; set value\n\n// multiple attributes:\nfigure.attr({\n  x: 30,\n  y: 40,\n  width : 200,\n  height: 50,\n  cssClass: &quot;red_border_figure&quot;\n});\n\n// it is possible to override any method of the figure as well\n// Instead of inheritance you can just override the callback methods\n// like\n//\nfigure.attr({\n   onClick : function(){\n       alert(&quot;click&quot;);\n   }\n});\n\n// or you can pass the attr values in the constructor\n//\nlet clickFigure = new draw2d.shape.basic.Rectangle({\n   onClick : function(){\n       alert(&quot;click&quot;);\n   }\n});\n</code></pre>\n<p>Additional you can set the user defined values (userData) with this method\nusing the dot-notation. User defined values are always part of the exported\nJSON data.</p>\n<pre><code>// setting multiple attributes:\nfigure.attr({\n  &quot;userData.my.property.x&quot;: 30,\n  &quot;userData.my.property.y&quot;: 40\n});\n</code></pre>\n<p>Also set using array notation is possible for the userData:</p>\n<pre><code>// dot notation and array brackets:\nfigure.attr({\n  &quot;userData.my.names[0]&quot;: &quot;John&quot;,\n  &quot;userData.my.names[1]&quot;: &quot;Doe&quot;\n});\n</code></pre>\n<p>The Object returned should be the equivalent structured object:</p>\n<pre><code>let obj = figure.getUserData();\n</code></pre>\n<p>That is, where obj is equivalent to:</p>\n<pre><code>let obj = {\n    my:{\n        property:{\n            x: 30,\n            y: 40\n       },\n       names:  [&quot;John&quot;, &quot;Doe&quot;]\n   }\n</code></pre>\n<p>};</p>",
          "parameters": [
            {
              "name": "name",
              "type": "String/Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "value",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "pick",
          "access": "",
          "virtual": false,
          "description": "<p>Return a copy of the object, filtered to only have values for the whitelisted keys.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "select",
          "access": "private",
          "virtual": false,
          "description": "<p>Add the figure to the current selection and propagate this to all edit policies.</p>",
          "parameters": [
            {
              "name": "asPrimarySelection",
              "type": "Boolean",
              "description": "<p>true if the element should be the primary selection</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "unselect",
          "access": "private",
          "virtual": false,
          "description": "<p>Unselect the figure and propagete this event to all edit policies.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setSelectionAdapter",
          "access": "",
          "virtual": false,
          "description": "<p>Returns a function which returns the the figure which must handle the selection handling.</p>",
          "parameters": [
            {
              "name": "adapter",
              "type": "function",
              "description": "<p>function which returns the figure which handles the selection handling</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getSelectionAdapter",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "function",
            "description": ""
          }
        },
        {
          "name": "isSelected",
          "access": "",
          "virtual": false,
          "description": "<p>Returns true if the figure part of the current canvas selection.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setUserData",
          "access": "",
          "virtual": false,
          "description": "<p>Allows a user to attach (or remove) data to an element, without needing to create a custom figure or shape.\nThe data must be a valid JSON object.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   userData: object\n });</code></pre>",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getUserData",
          "access": "",
          "virtual": false,
          "description": "<p>Returns any user data set previously on the given figure by setUserData.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Object",
            "description": ""
          }
        },
        {
          "name": "getId",
          "access": "",
          "virtual": false,
          "description": "<p>Return the UUID of this element.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "setId",
          "access": "",
          "virtual": false,
          "description": "<p>Set the id of this element.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  id: newId\n});</code></pre>",
          "parameters": [
            {
              "name": "newId",
              "type": "String",
              "description": "<p>the new id for this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Return the css styling class name of the element.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "setCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Set the css class of the node.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;cssClass&quot;: &quot;red_border_figure&quot;\n });</code></pre>",
          "parameters": [
            {
              "name": "cssClass",
              "type": "String",
              "description": "<p>the new css class name of the node</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "hasCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>The method will return true if the class is assigned to the element, even if other classes also are.</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the class name to check</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "addCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Add a CSS class to the figure.<br>\nIt's important to note that this method does not replace a class. It simply adds the class,\nappending it to any which may already be assigned to the elements.</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "removeCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Remove the given css class name from the figure</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the css class name to add</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "toggleCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Add or remove the given css class name from the figure</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the class name to toggle</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getCanvas",
          "access": "",
          "virtual": false,
          "description": "<p>Return the current assigned canvas container.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.Canvas",
            "description": ""
          }
        },
        {
          "name": "startTimer",
          "access": "",
          "virtual": false,
          "description": "<p>Start a timer which calls the onTimer method in the given interval.</p>",
          "parameters": [
            {
              "name": "milliSeconds",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "stopTimer",
          "access": "",
          "virtual": false,
          "description": "<p>Stop the internal timer.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onTimer",
          "access": "",
          "virtual": false,
          "description": "<p>Callback method for the internal timer handling<br>\nInherit classes must override this method if they want use the timer feature.</p>\n<pre><code> // Alternatively you can register for this event with\n figure.on(&quot;timer&quot;, function(emitter){\n     alert(&quot;timer fired&quot;);\n });</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "installEditPolicy",
          "access": "",
          "virtual": false,
          "description": "<p>Install a new edit policy to the figure. Each editpolicy is able to focus on a single editing\ntask or group of related tasks. This also allows editing behavior to be selectively reused across\ndifferent figure implementations. Also, behavior can change dynamically, such as when the layouts\nor routing methods change.</p>\n<p>Example for limited DragDrop behavior can be a draw2d.layout.constraint.RegionConstriantPolicy.</p>",
          "parameters": [
            {
              "name": "policy",
              "type": "draw2d.policy.EditPolicy",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "uninstallEditPolicy",
          "access": "",
          "virtual": false,
          "description": "<p>UnInstall the edit policy from the figure. Either the instance itself if found\nor all kind of the given edit policies.</p>",
          "parameters": [
            {
              "name": "policy",
              "type": "draw2d.policy.EditPolicy",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "add",
          "access": "",
          "virtual": false,
          "description": "<p>Add a child figure to the figure. The hands over figure doesn't support drag&amp;drop\noperations. It's only a decorator for the connection.<br>\nMainly for labels or other decorations</p>\n<pre><code>let start = new draw2d.shape.node.Start({x:80, y:150});\nstart.add(new draw2d.shape.basic.Label({text:&quot;Test Label&quot;}), new draw2d.layout.locator.TopLocator());\n\ncanvas.add( start);</code></pre>",
          "parameters": [
            {
              "name": "child",
              "type": "draw2d.Figure",
              "description": "<p>the figure to add as decoration to the connection.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>the locator for the child.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "index",
              "type": "Number",
              "description": "<p>optional index where to insert the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "remove",
          "access": "",
          "virtual": false,
          "description": "<p>Remove the child figure from this figure and the canvas</p>",
          "parameters": [
            {
              "name": "child",
              "type": "draw2d.Figure",
              "description": "<p>the figure to remove.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Object",
            "description": "<p>the removed tupple of figure/locator or null if the child isn't found</p>"
          }
        },
        {
          "name": "getChildren",
          "access": "",
          "virtual": false,
          "description": "<p>Return all children/decorations of this shape which has been added with\ndraw2d.Figure.add</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "resetChildren",
          "access": "",
          "virtual": false,
          "description": "<p>Remove all children/decorations of this shape</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getShapeElement",
          "access": "protected",
          "virtual": false,
          "description": "<p>return the current SVG shape element or create it on demand.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getTopLevelShapeElement",
          "access": "private",
          "virtual": false,
          "description": "<p>Get the top level shape element. May the figure has a set of SVG elements. In this case this\nmethod must return the top level node.<br>\nThis method is used for the toFront/toBack method to order the nodes in the correct way.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "applyTransformation",
          "access": "private",
          "virtual": false,
          "description": "<p>apply a transformation to the shape like rotation, translate,..</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getHandleBBox",
          "access": "",
          "virtual": false,
          "description": "<p>Allow dragging only when the cursor is over a specific part of the figure.\n<br>\nOverride this method to specify the bounding box of an element or a draw2d.util.ArrayList\nof draw2d.geo.Rectangle of bounding boxes used to drag the figure. The returned coordinates\nare absolute coordinates to the canvas.\n<br>\n<br>\nDefault implementation returns <b>null</b> to indicate to use the complete figures as\ndrag handle.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": [
              "draw2d.geo.Rectangle",
              "draw2d.util.ArrayList"
            ],
            "description": ""
          }
        },
        {
          "name": "onPanning",
          "access": "",
          "virtual": false,
          "description": "<p>Called by the framework if the figure returns false for the drag operation. In this\ncase we send a &quot;panning&quot; event - mouseDown + mouseMove. This is very useful for\nUI-Widget like slider, spinner,...</p>\n<pre><code> // You can alternatively register an event handler with:\n figure.on(&quot;panning&quot;, function(emitter, eventData){\n     alert(&quot;panning of the figure called&quot;);\n });</code></pre>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>the x difference between the mouse down operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>the y difference between the mouse down operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dx2",
              "type": "Number",
              "description": "<p>The x diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy2",
              "type": "Number",
              "description": "<p>The y diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onPanningEnd",
          "access": "",
          "virtual": false,
          "description": "<p>Called by the framework if the panning event of the figures ends. This happens\nafter the mous up event if the panning is active.</p>\n<pre><code> // You can alternatively register an event handler with:\n figure.on(&quot;panningEnd&quot;, function(emitter){\n     alert(&quot;panning of the figure called&quot;);\n });</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "delegateTarget",
          "access": "private",
          "virtual": false,
          "description": "<p>Called by the framework during drag&amp;drop operations if the user drag a figure over this figure</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": "<p>the figure which should receive the drop event or null if the element didn't want a drop event</p>"
          }
        },
        {
          "name": "onDragEnter",
          "access": "",
          "virtual": false,
          "description": "<p>Called by the framework during drag&amp;drop operations if the user drag a figure over this figure</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onDragLeave",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the DragDrop object leaving the current hover figure.</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onDrop",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the user drop this element onto the dropTarget. This event is ONLY fired if the\nshape return &quot;this&quot; in the {@link draw2d.Figure#onDragEnter} method.</p>",
          "parameters": [
            {
              "name": "dropTarget",
              "type": "draw2d.Figure",
              "description": "<p>The drop target.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onCatch",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the user dropped an figure onto this element. This event is ONLY fired if the\nin the canvas installed {@link draw2d.policy.canvas.DropInterceptorPolicy} allow this.</p>",
          "parameters": [
            {
              "name": "droppedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The dropped figure.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onMouseEnter",
          "access": "",
          "virtual": false,
          "description": "<p>Callback method for the mouse enter event. Usefull for mouse hover-effects.\nOverride this method for your own effects. Don't call them manually.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onMouseLeave",
          "access": "",
          "virtual": false,
          "description": "<p>Callback method for the mouse leave event. Useful for mouse hover-effects.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onDoubleClick",
          "access": "",
          "virtual": false,
          "description": "<p>Called when a user dbl clicks on the element</p>\n<pre><code> // Alternatively you can register an event with:\n //\n figure.on(&quot;dblclick&quot;, function(emitter, event){\n     alert(&quot;user dbl click on the figure&quot;);\n });</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onContextMenu",
          "access": "",
          "virtual": false,
          "description": "<p>called by the framework if the figure should show the context menu.<br>\nThe strategy to show the context menu depends on the platform. Either looong press or\nright click with the mouse.</p>\n<pre><code> // Alternatively you register for this event with:\n figure.on(&quot;contextmenu&quot;, function(emitter, event){\n     alert(&quot;user press the right mouse button for a context menu&quot;);\n });</code></pre>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate to show the menu</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate to show the menu</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getAlpha",
          "access": "",
          "virtual": false,
          "description": "<p>Return the alpha blending of the figure</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the current alpha blending</p>"
          }
        },
        {
          "name": "getRotationAngle",
          "access": "",
          "virtual": false,
          "description": "<p>return the rotation angle of the figure in degree of [0..356].</p>\n<br>\n<b>NOTE: this method is pre alpha and not for production. Only steps of 90 degree is working well</b>\n<br>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "isVisible",
          "access": "",
          "virtual": false,
          "description": "<p>Return true if the figure visible.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setKeepAspectRatio",
          "access": "",
          "virtual": false,
          "description": "<p>Guarantee, that the figure width/height will not be distorted. Applicable before calling setDimension().\nIt is false by default.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>boolean flag if the figure should respect the aspect ratio</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getKeepAspectRatio",
          "access": "",
          "virtual": false,
          "description": "<p>Return the flag if the shape keep the aspect ratio.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getZOrder",
          "access": "",
          "virtual": false,
          "description": "<p>Return the current z-index of the element. Currently this is an expensive method. The index will be calculated\nall the time. Caching is not implemented at the moment.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setCanSnapToHelper",
          "access": "",
          "virtual": false,
          "description": "<p>Set the flag if this object can snap to grid or geometry.\nA window of dialog should set this flag to false.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The snap to grid/geometry enable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getCanSnapToHelper",
          "access": "",
          "virtual": false,
          "description": "<p>Returns true if the figure can snap to any helper like a grid, guide, geometrie\nor something else.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "getSnapToGridAnchor",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "setSnapToGridAnchor",
          "access": "",
          "virtual": false,
          "description": "<p>Set the hot spot for all snapTo### operations.</p>",
          "parameters": [
            {
              "name": "point",
              "type": "draw2d.geo.Point",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setWidth",
          "access": "",
          "virtual": false,
          "description": "<p>Set the width of the figure and consider the minWidth attribute</p>",
          "parameters": [
            {
              "name": "width",
              "type": "Number",
              "description": "<p>the new width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getWidth",
          "access": "",
          "virtual": false,
          "description": "<p>The current width of the figure.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setHeight",
          "access": "",
          "virtual": false,
          "description": "<p>Set the heigth of the figure and consider the minWidth attribute</p>",
          "parameters": [
            {
              "name": "height",
              "type": "Number",
              "description": "<p>the new height of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getHeight",
          "access": "",
          "virtual": false,
          "description": "<p>The current height of the figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "getMinWidth",
          "access": "",
          "virtual": false,
          "description": "<p>This value is relevant for the interactive resize of the figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>Returns the min. width of this object.</p>"
          }
        },
        {
          "name": "setMinWidth",
          "access": "",
          "virtual": false,
          "description": "<p>Set the minimum width of this figure</p>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getMinHeight",
          "access": "",
          "virtual": false,
          "description": "<p>This value is relevant for the interactive resize of the figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>Returns the min. height of this object.</p>"
          }
        },
        {
          "name": "setMinHeight",
          "access": "",
          "virtual": false,
          "description": "<p>Set the minimum height of the figure.</p>",
          "parameters": [
            {
              "name": "h",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setX",
          "access": "",
          "virtual": false,
          "description": "<p>the the x-offset related to the parent figure or canvas</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the new x offset of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getX",
          "access": "",
          "virtual": false,
          "description": "<p>The x-offset related to the parent figure or canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the x-offset to the parent figure</p>"
          }
        },
        {
          "name": "setY",
          "access": "",
          "virtual": false,
          "description": "<p>the the y-offset related to the parent figure or canvas</p>",
          "parameters": [
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the new x offset of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getY",
          "access": "",
          "virtual": false,
          "description": "<p>The y-offset related to the parent figure or canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>The y-offset to the parent figure.</p>"
          }
        },
        {
          "name": "getAbsoluteX",
          "access": "",
          "virtual": false,
          "description": "<p>The x-offset related to the canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the x-offset to the canvas</p>"
          }
        },
        {
          "name": "getAbsoluteY",
          "access": "",
          "virtual": false,
          "description": "<p>The y-offset related to the canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>The y-offset to the canvas.</p>"
          }
        },
        {
          "name": "getAbsolutePosition",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the absolute y-position of the port.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getAbsoluteBounds",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the absolute y-position of the port.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "setPosition",
          "access": "",
          "virtual": false,
          "description": "<p>Set the position of the object.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   x: x,\n   y: y\n });</code></pre>",
          "parameters": [
            {
              "name": "x",
              "type": [
                "Number",
                "draw2d.geo.Point"
              ],
              "description": "<p>The new x coordinate of the figure or the x/y coordinate if it is an draw2d.geo.Point</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The new y coordinate of the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPosition",
          "access": "",
          "virtual": false,
          "description": "<p>Get the current position of the figure</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "translate",
          "access": "",
          "virtual": false,
          "description": "<p>Translate the figure with the given x/y offset.</p>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>The x offset to translate</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>The y offset to translate</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setBoundingBox",
          "access": "",
          "virtual": false,
          "description": "<p>Set the bounding box of the figure</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   width: w,\n   height: h,\n   x: x,\n   y: y\n });\n\n // or\n figure.attr({\n   boundingBox: {x:1, y:100, width:30, height:30}\n });</code></pre>",
          "parameters": [
            {
              "name": "rect",
              "type": "draw2d.geo.Rectangle",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getBoundingBox",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the bounding box of the figure in absolute position to the canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "hitTest",
          "access": "",
          "virtual": false,
          "description": "<p>Detect whenever the hands over coordinate is inside the figure.\nThe default implementation is a simple bounding box test.</p>",
          "parameters": [
            {
              "name": "iX",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "iY",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "corona",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setDraggable",
          "access": "",
          "virtual": false,
          "description": "<p>Switch on/off the drag drop behaviour of this object</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The new drag drop indicator</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "isDraggable",
          "access": "",
          "virtual": false,
          "description": "<p>Get the Drag drop enable flag</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": "<p>The new drag drop indicator</p>"
          }
        },
        {
          "name": "isResizeable",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the true if the figure can be resized.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setResizeable",
          "access": "",
          "virtual": false,
          "description": "<p>You can change the resizeable behaviour of this object. Hands over [false] and\nthe figure has no resizehandles if you select them with the mouse.<br></p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   resizeable: flag\n });</code></pre>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The resizeable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "isSelectable",
          "access": "",
          "virtual": false,
          "description": "<p>Indicates whenever the element is selectable by user interaction or API.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setSelectable",
          "access": "",
          "virtual": false,
          "description": "<p>You can change the selectable behavior of this object. Hands over [false] and\nthe figure has no selection handles if you try to select them with the mouse.<br></p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The selectable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "isStrechable",
          "access": "",
          "virtual": false,
          "description": "<p>Return true if the object doesn't care about the aspect ratio.\nYou can change the height and width independent.<br></p>\n<p>Replaced with &quot;getKeepAspectRatio&quot;</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "isDeleteable",
          "access": "",
          "virtual": false,
          "description": "<p>Return false if you avoid that the user can delete your figure.\nSub class can override this method.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setDeleteable",
          "access": "",
          "virtual": false,
          "description": "<p>Set the flag if the shape is deleteable.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>enable or disable flag for the delete operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setParent",
          "access": "private",
          "virtual": false,
          "description": "<p>Set the parent of this figure.\nDon't call them manually.</p>",
          "parameters": [
            {
              "name": "parent",
              "type": "draw2d.Figure",
              "description": "<p>The new parent of this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getParent",
          "access": "",
          "virtual": false,
          "description": "<p>Get the parent of this figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": ""
          }
        },
        {
          "name": "contains",
          "access": "",
          "virtual": false,
          "description": "<p>Check to see if a figure is a descendant of another figure.\n<br>\nThe contains() method returns true if the figure provided by the argument is a descendant of this figure,\nwhether it is a direct child or nested more deeply. Otherwise, it returns false.</p>",
          "parameters": [
            {
              "name": "containedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure that may be contained by (a descendant of) this figure.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getRoot",
          "access": "",
          "virtual": false,
          "description": "<p>Get the top most parent of this figure. This can be an layout figure or parent container</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": ""
          }
        },
        {
          "name": "setComposite",
          "access": "",
          "virtual": false,
          "description": "<p>Set the assigned composite of this figure.</p>",
          "parameters": [
            {
              "name": "composite",
              "type": "draw2d.shape.composite.StrongComposite",
              "description": "<p>The assigned composite of this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getComposite",
          "access": "",
          "virtual": false,
          "description": "<p>Get the assigned composite of this figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.shape.composite.StrongComposite",
            "description": ""
          }
        },
        {
          "name": "fireEvent",
          "access": "",
          "virtual": false,
          "description": "<p>Execute all handlers and behaviors attached to the figure for the given event type.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "String",
              "description": "<p>the event to trigger</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "args",
              "type": "Object",
              "description": "<p>optional parameters for the triggered event callback</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "on",
          "access": "",
          "virtual": false,
          "description": "<p>Attach an event handler function for one or more events to the figure.\nTo remove events bound with .on(), see {@link #off}.</p>\n<p>possible events are:<br></p>\n<ul>\n  <li>click</li>\n  <li>dblclick</li>\n  <li>move</li>\n  <li>resize</li>\n  <li>timer</li>\n  <li>contextmenu</li>\n  <li>show</li>\n  <li>hide</li>\n  <li>added</li>\n  <li>removed</li>\n  <li>change:[attr]</li>\n</ul>",
          "parameters": [
            {
              "name": "event",
              "type": "String",
              "description": "<p>One or more space-separated event types</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback",
              "type": "function",
              "description": "<p>A function to execute when the event is triggered.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback.emitter",
              "type": "draw2d.Figure",
              "description": "<p>the emitter of the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback.obj",
              "type": "Object",
              "description": "<p>optional event related data</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "context",
              "type": "Object",
              "description": "<p>optional context of the function callback.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "off",
          "access": "",
          "virtual": false,
          "description": "<p>The .off() method removes event handlers that were attached with {@link #on}.<br>\nCalling .off() with no arguments removes all handlers attached to the elements.<br>\n<br>\nIf a simple event name such as &quot;move&quot; is provided, all events of that type are removed from the figure.</p>",
          "parameters": [
            {
              "name": "eventOrFunction",
              "type": [
                "String",
                "function"
              ],
              "description": "<p>the event name of the registerd function or the function itself</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getBestChild",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the best figure at the location [x,y]. It is a simple hit test. Keep in mind that only visible objects\nare returned.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>The x position.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The y position.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "figureToIgnore",
              "type": [
                "draw2d.Figure",
                "Array"
              ],
              "description": "<p>The figures which should be ignored.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        }
      ]
    },
    {
      "name": "Image",
      "namespace": "draw2d.shape.basic",
      "description": "<p>draw2d.shape.basic.Image\nSimple Image shape.</p>",
      "extends": [
        "draw2d.shape.node.Node"
      ],
      "access": "",
      "virtual": false,
      "fires": "",
      "constructor": {
        "name": "Image",
        "description": "",
        "parameters": [],
        "examples": []
      },
      "functions": [
        {
          "name": "init",
          "access": "",
          "virtual": false,
          "description": "<p>Creates a new figure element which are not assigned to any canvas.</p>",
          "parameters": [
            {
              "name": "attr",
              "type": "Object",
              "description": "<p>the configuration of the shape</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setPath",
          "access": "",
          "virtual": false,
          "description": "<p>Set the image path attribute of the Image shape and repaint them.\nThe path can be relative or absolute</p>",
          "parameters": [
            {
              "name": "path",
              "type": "",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPath",
          "access": "",
          "virtual": false,
          "description": "<p>Return the image path attribute of the shape.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "repaint",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "createShapeElement",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getPersistentAttributes",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setPersistentAttributes",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setPersistPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Indicates if the node should read/write the ports via the draw2d.Figure.getPersistenAttributes\nto the JSON object</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPersistPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Indicates if the figure writes the ports to the JSON structore too.\nDefault is &quot;false&quot;</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "toFront",
          "access": "",
          "virtual": false,
          "description": "<p>Moves the element so it is the closest to the viewerâ€™s eyes, on top of other elements. Additional\nthe internal model changed as well.</p>\n<p>Optional: Inserts current object in front of the given one.</p>",
          "parameters": [
            {
              "name": "figure",
              "type": "draw2d.Figure",
              "description": "<p>move current object in front of the given one.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "toBack",
          "access": "",
          "virtual": false,
          "description": "<p>Moves the element to the background. Additional\nthe internal model changed as well.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setVisible",
          "access": "",
          "virtual": false,
          "description": "<p>Show/hide the element. The element didn't receive any mouse events (click, dblclick) if you hide the\nfigure.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   visible: flag\n });</code></pre>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "duration",
              "type": "Number",
              "description": "<p>the optional number for the fadeIn /fadeOut of the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Return all ports of the node. The results contains\nall ports of the children too per default. Set <b>recursive</b>\nto false to retrieve direct assigned ports only.</p>",
          "parameters": [
            {
              "name": "recursive",
              "type": "Boolean",
              "description": "<p>indicates if the method should return children ports too. Default is <b>true</b></p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "getInputPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Return all input ports of the node.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "getOutputPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Return all output ports of the node.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "clone",
          "access": "",
          "virtual": false,
          "description": "<p>Clone the figure. <br>\nYou must override and implement the methods <b>getPersistentAttributes</b> and <b>setPersistentAttributes</b> for your custom\nfigures if the have special attributes.</p>\n<p>The clone() method performs a deep copy of the object, meaning that it copies the children, ports and decorations\nper default. You can control the clone procedure with the 'cloneMetaData'.</p>",
          "parameters": [
            {
              "name": "cloneMetaData",
              "type": "Object",
              "description": "<p>controls the clone procedure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "cloneMetaData.excludeChildren",
              "type": "Boolean",
              "description": "<p>set it to true if you want exclude the children.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "cloneMetaData.excludePorts",
              "type": "Boolean",
              "description": "<p>set it to true if you want exclude the ports of the node.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portName",
              "type": "String",
              "description": "<p>The name of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.Port",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getInputPort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the input port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.InputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getOutputPort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the output port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or the numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.OutputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getHybridPort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the input port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.InputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "addPort",
          "access": "",
          "virtual": false,
          "description": "<p>Add a port to this node at the given position.<br></p>",
          "parameters": [
            {
              "name": "port",
              "type": "draw2d.Port",
              "description": "<p>The new port to add.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>The layout for the port.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "resetPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Remove all ports of this node</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "removePort",
          "access": "",
          "virtual": false,
          "description": "<p>Removes a port and all related connections from this node.<br></p>",
          "parameters": [
            {
              "name": "port",
              "type": "draw2d.Port",
              "description": "<p>The port to remove.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "createPort",
          "access": "",
          "virtual": false,
          "description": "<p>Create a standard Port for this element. Inherited class can override this\nmethod to create its own type of ports.</p>",
          "parameters": [
            {
              "name": "type",
              "type": "String",
              "description": "<p>the type of the requested port. possible [&quot;input&quot;, &quot;output&quot;]</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>the layouter to use for this port</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getConnections",
          "access": "",
          "virtual": false,
          "description": "<p>Return all connections related to this node.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "setCanvas",
          "access": "",
          "virtual": false,
          "description": "<p>Set the canvas element of this figures. This can be used to determine whenever an element\nis added or removed to the canvas.</p>",
          "parameters": [
            {
              "name": "canvas",
              "type": "draw2d.Canvas",
              "description": "<p>the new parent of the figure or null</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setRotationAngle",
          "access": "",
          "virtual": false,
          "description": "<p>Set the rotation angle in degree [0..356]<br>\n<b>Only steps of 90 degree is working well</b>\n<br>\n// Alternatively you can use the attr method:\nfigure.attr({\nangle: angle\n});</p>",
          "parameters": [
            {
              "name": "angle",
              "type": "Number",
              "description": "<p>the rotation angle in degree</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setDimension",
          "access": "",
          "virtual": false,
          "description": "<p>Set the new width and height of the figure.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n    width:  w,\n    height: h\n });</code></pre>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "<p>The new width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "h",
              "type": "Number",
              "description": "<p>The new height of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onPortValueChanged",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the value of any port has been changed</p>",
          "parameters": [
            {
              "name": "relatedPort",
              "type": "draw2d.Port",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "repaint",
          "access": "private",
          "virtual": false,
          "description": "<p>propagate all attributes like color, stroke,... to the shape element</p>",
          "parameters": [
            {
              "name": "attributes",
              "type": "Object",
              "description": "<p>the style attributes for the SVG shape</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "layoutPorts",
          "access": "private",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "createCommand",
          "access": "private",
          "virtual": false,
          "description": "<p>Returns the Command to perform the specified Request or null.</p>",
          "parameters": [
            {
              "name": "request",
              "type": "draw2d.command.CommandType",
              "description": "<p>describes the Command being requested</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.command.Command",
            "description": "<p>null or a Command</p>"
          }
        },
        {
          "name": "getPersistentAttributes",
          "access": "",
          "virtual": false,
          "description": "<p>Return an objects with all important attributes for XML or JSON serialization</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Object",
            "description": ""
          }
        },
        {
          "name": "setPersistentAttributes",
          "access": "",
          "virtual": false,
          "description": "<p>Read all attributes from the serialized properties and transfer them into the shape.</p>",
          "parameters": [
            {
              "name": "memento",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "attr",
          "access": "",
          "virtual": false,
          "description": "<p>Read or set shape attributes.<br>\nWhen no value is given, reads specified attribute from the element.<br>\nWhen value is given, sets the attribute to that value.\nMultiple attributes can be set by passing an object with name-value pairs.</p>\n<pre><code>let figure = new draw2d.shape.basic.Rectangle();\nfigure.attr('x');      //=&gt; read value\nfigure.attr('x', 30);  //=&gt; set value\n\n// multiple attributes:\nfigure.attr({\n  x: 30,\n  y: 40,\n  width : 200,\n  height: 50,\n  cssClass: &quot;red_border_figure&quot;\n});\n\n// it is possible to override any method of the figure as well\n// Instead of inheritance you can just override the callback methods\n// like\n//\nfigure.attr({\n   onClick : function(){\n       alert(&quot;click&quot;);\n   }\n});\n\n// or you can pass the attr values in the constructor\n//\nlet clickFigure = new draw2d.shape.basic.Rectangle({\n   onClick : function(){\n       alert(&quot;click&quot;);\n   }\n});\n</code></pre>\n<p>Additional you can set the user defined values (userData) with this method\nusing the dot-notation. User defined values are always part of the exported\nJSON data.</p>\n<pre><code>// setting multiple attributes:\nfigure.attr({\n  &quot;userData.my.property.x&quot;: 30,\n  &quot;userData.my.property.y&quot;: 40\n});\n</code></pre>\n<p>Also set using array notation is possible for the userData:</p>\n<pre><code>// dot notation and array brackets:\nfigure.attr({\n  &quot;userData.my.names[0]&quot;: &quot;John&quot;,\n  &quot;userData.my.names[1]&quot;: &quot;Doe&quot;\n});\n</code></pre>\n<p>The Object returned should be the equivalent structured object:</p>\n<pre><code>let obj = figure.getUserData();\n</code></pre>\n<p>That is, where obj is equivalent to:</p>\n<pre><code>let obj = {\n    my:{\n        property:{\n            x: 30,\n            y: 40\n       },\n       names:  [&quot;John&quot;, &quot;Doe&quot;]\n   }\n</code></pre>\n<p>};</p>",
          "parameters": [
            {
              "name": "name",
              "type": "String/Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "value",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "pick",
          "access": "",
          "virtual": false,
          "description": "<p>Return a copy of the object, filtered to only have values for the whitelisted keys.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "select",
          "access": "private",
          "virtual": false,
          "description": "<p>Add the figure to the current selection and propagate this to all edit policies.</p>",
          "parameters": [
            {
              "name": "asPrimarySelection",
              "type": "Boolean",
              "description": "<p>true if the element should be the primary selection</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "unselect",
          "access": "private",
          "virtual": false,
          "description": "<p>Unselect the figure and propagete this event to all edit policies.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setSelectionAdapter",
          "access": "",
          "virtual": false,
          "description": "<p>Returns a function which returns the the figure which must handle the selection handling.</p>",
          "parameters": [
            {
              "name": "adapter",
              "type": "function",
              "description": "<p>function which returns the figure which handles the selection handling</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getSelectionAdapter",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "function",
            "description": ""
          }
        },
        {
          "name": "isSelected",
          "access": "",
          "virtual": false,
          "description": "<p>Returns true if the figure part of the current canvas selection.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setUserData",
          "access": "",
          "virtual": false,
          "description": "<p>Allows a user to attach (or remove) data to an element, without needing to create a custom figure or shape.\nThe data must be a valid JSON object.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   userData: object\n });</code></pre>",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getUserData",
          "access": "",
          "virtual": false,
          "description": "<p>Returns any user data set previously on the given figure by setUserData.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Object",
            "description": ""
          }
        },
        {
          "name": "getId",
          "access": "",
          "virtual": false,
          "description": "<p>Return the UUID of this element.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "setId",
          "access": "",
          "virtual": false,
          "description": "<p>Set the id of this element.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  id: newId\n});</code></pre>",
          "parameters": [
            {
              "name": "newId",
              "type": "String",
              "description": "<p>the new id for this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Return the css styling class name of the element.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "setCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Set the css class of the node.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;cssClass&quot;: &quot;red_border_figure&quot;\n });</code></pre>",
          "parameters": [
            {
              "name": "cssClass",
              "type": "String",
              "description": "<p>the new css class name of the node</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "hasCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>The method will return true if the class is assigned to the element, even if other classes also are.</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the class name to check</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "addCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Add a CSS class to the figure.<br>\nIt's important to note that this method does not replace a class. It simply adds the class,\nappending it to any which may already be assigned to the elements.</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "removeCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Remove the given css class name from the figure</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the css class name to add</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "toggleCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Add or remove the given css class name from the figure</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the class name to toggle</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getCanvas",
          "access": "",
          "virtual": false,
          "description": "<p>Return the current assigned canvas container.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.Canvas",
            "description": ""
          }
        },
        {
          "name": "startTimer",
          "access": "",
          "virtual": false,
          "description": "<p>Start a timer which calls the onTimer method in the given interval.</p>",
          "parameters": [
            {
              "name": "milliSeconds",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "stopTimer",
          "access": "",
          "virtual": false,
          "description": "<p>Stop the internal timer.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onTimer",
          "access": "",
          "virtual": false,
          "description": "<p>Callback method for the internal timer handling<br>\nInherit classes must override this method if they want use the timer feature.</p>\n<pre><code> // Alternatively you can register for this event with\n figure.on(&quot;timer&quot;, function(emitter){\n     alert(&quot;timer fired&quot;);\n });</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "installEditPolicy",
          "access": "",
          "virtual": false,
          "description": "<p>Install a new edit policy to the figure. Each editpolicy is able to focus on a single editing\ntask or group of related tasks. This also allows editing behavior to be selectively reused across\ndifferent figure implementations. Also, behavior can change dynamically, such as when the layouts\nor routing methods change.</p>\n<p>Example for limited DragDrop behavior can be a draw2d.layout.constraint.RegionConstriantPolicy.</p>",
          "parameters": [
            {
              "name": "policy",
              "type": "draw2d.policy.EditPolicy",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "uninstallEditPolicy",
          "access": "",
          "virtual": false,
          "description": "<p>UnInstall the edit policy from the figure. Either the instance itself if found\nor all kind of the given edit policies.</p>",
          "parameters": [
            {
              "name": "policy",
              "type": "draw2d.policy.EditPolicy",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "add",
          "access": "",
          "virtual": false,
          "description": "<p>Add a child figure to the figure. The hands over figure doesn't support drag&amp;drop\noperations. It's only a decorator for the connection.<br>\nMainly for labels or other decorations</p>\n<pre><code>let start = new draw2d.shape.node.Start({x:80, y:150});\nstart.add(new draw2d.shape.basic.Label({text:&quot;Test Label&quot;}), new draw2d.layout.locator.TopLocator());\n\ncanvas.add( start);</code></pre>",
          "parameters": [
            {
              "name": "child",
              "type": "draw2d.Figure",
              "description": "<p>the figure to add as decoration to the connection.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>the locator for the child.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "index",
              "type": "Number",
              "description": "<p>optional index where to insert the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "remove",
          "access": "",
          "virtual": false,
          "description": "<p>Remove the child figure from this figure and the canvas</p>",
          "parameters": [
            {
              "name": "child",
              "type": "draw2d.Figure",
              "description": "<p>the figure to remove.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Object",
            "description": "<p>the removed tupple of figure/locator or null if the child isn't found</p>"
          }
        },
        {
          "name": "getChildren",
          "access": "",
          "virtual": false,
          "description": "<p>Return all children/decorations of this shape which has been added with\ndraw2d.Figure.add</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "resetChildren",
          "access": "",
          "virtual": false,
          "description": "<p>Remove all children/decorations of this shape</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getShapeElement",
          "access": "protected",
          "virtual": false,
          "description": "<p>return the current SVG shape element or create it on demand.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getTopLevelShapeElement",
          "access": "private",
          "virtual": false,
          "description": "<p>Get the top level shape element. May the figure has a set of SVG elements. In this case this\nmethod must return the top level node.<br>\nThis method is used for the toFront/toBack method to order the nodes in the correct way.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "createShapeElement",
          "access": "",
          "virtual": false,
          "description": "<p>Inherited classes must override this method to implement it's own draw functionality.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "applyTransformation",
          "access": "private",
          "virtual": false,
          "description": "<p>apply a transformation to the shape like rotation, translate,..</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setGlow",
          "access": "",
          "virtual": false,
          "description": "<p>Highlight the element or remove the highlighting</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   glow: flag\n });</code></pre>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>indicates glow/noGlow</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getHandleBBox",
          "access": "",
          "virtual": false,
          "description": "<p>Allow dragging only when the cursor is over a specific part of the figure.\n<br>\nOverride this method to specify the bounding box of an element or a draw2d.util.ArrayList\nof draw2d.geo.Rectangle of bounding boxes used to drag the figure. The returned coordinates\nare absolute coordinates to the canvas.\n<br>\n<br>\nDefault implementation returns <b>null</b> to indicate to use the complete figures as\ndrag handle.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": [
              "draw2d.geo.Rectangle",
              "draw2d.util.ArrayList"
            ],
            "description": ""
          }
        },
        {
          "name": "onDragStart",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the drag and drop action begins. You can return [false] if you\nwant avoid that the figure can be move.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": "<p>true if the figure accepts dragging</p>"
          }
        },
        {
          "name": "onDrag",
          "access": "private",
          "virtual": false,
          "description": "<p>Don't call them manually. This will be done by the framework.<br>\nWill be called if the object are moved via drag and drop.\nSub classes can override this method to implement additional stuff. Don't forget to call\nthe super implementation via <code>this._super(dx, dy, dx2, dy2);</code></p>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>the x difference between the start of the drag drop operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>the y difference between the start of the drag drop operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dx2",
              "type": "Number",
              "description": "<p>The x diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy2",
              "type": "Number",
              "description": "<p>The y diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onPanning",
          "access": "",
          "virtual": false,
          "description": "<p>Called by the framework if the figure returns false for the drag operation. In this\ncase we send a &quot;panning&quot; event - mouseDown + mouseMove. This is very useful for\nUI-Widget like slider, spinner,...</p>\n<pre><code> // You can alternatively register an event handler with:\n figure.on(&quot;panning&quot;, function(emitter, eventData){\n     alert(&quot;panning of the figure called&quot;);\n });</code></pre>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>the x difference between the mouse down operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>the y difference between the mouse down operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dx2",
              "type": "Number",
              "description": "<p>The x diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy2",
              "type": "Number",
              "description": "<p>The y diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onPanningEnd",
          "access": "",
          "virtual": false,
          "description": "<p>Called by the framework if the panning event of the figures ends. This happens\nafter the mous up event if the panning is active.</p>\n<pre><code> // You can alternatively register an event handler with:\n figure.on(&quot;panningEnd&quot;, function(emitter){\n     alert(&quot;panning of the figure called&quot;);\n });</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onDragEnd",
          "access": "",
          "virtual": false,
          "description": "<p>Will be called after a drag and drop action.<br>\nSub classes can override this method to implement additional stuff. Don't forget to call\nthe super implementation via <code>this._super();</code></p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "delegateTarget",
          "access": "private",
          "virtual": false,
          "description": "<p>Called by the framework during drag&amp;drop operations if the user drag a figure over this figure</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": "<p>the figure which should receive the drop event or null if the element didn't want a drop event</p>"
          }
        },
        {
          "name": "onDragEnter",
          "access": "",
          "virtual": false,
          "description": "<p>Called by the framework during drag&amp;drop operations if the user drag a figure over this figure</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onDragLeave",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the DragDrop object leaving the current hover figure.</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onDrop",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the user drop this element onto the dropTarget. This event is ONLY fired if the\nshape return &quot;this&quot; in the {@link draw2d.Figure#onDragEnter} method.</p>",
          "parameters": [
            {
              "name": "dropTarget",
              "type": "draw2d.Figure",
              "description": "<p>The drop target.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onCatch",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the user dropped an figure onto this element. This event is ONLY fired if the\nin the canvas installed {@link draw2d.policy.canvas.DropInterceptorPolicy} allow this.</p>",
          "parameters": [
            {
              "name": "droppedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The dropped figure.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onMouseEnter",
          "access": "",
          "virtual": false,
          "description": "<p>Callback method for the mouse enter event. Usefull for mouse hover-effects.\nOverride this method for your own effects. Don't call them manually.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onMouseLeave",
          "access": "",
          "virtual": false,
          "description": "<p>Callback method for the mouse leave event. Useful for mouse hover-effects.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onDoubleClick",
          "access": "",
          "virtual": false,
          "description": "<p>Called when a user dbl clicks on the element</p>\n<pre><code> // Alternatively you can register an event with:\n //\n figure.on(&quot;dblclick&quot;, function(emitter, event){\n     alert(&quot;user dbl click on the figure&quot;);\n });</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onClick",
          "access": "",
          "virtual": false,
          "description": "<p>Called when a user clicks on the element.</p>\n<pre><code> // You can alternatively register an event handler with:\n figure.on(&quot;click&quot;, function(emitter, event){\n     alert(&quot;user click on the figure&quot;);\n });</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onContextMenu",
          "access": "",
          "virtual": false,
          "description": "<p>called by the framework if the figure should show the context menu.<br>\nThe strategy to show the context menu depends on the platform. Either looong press or\nright click with the mouse.</p>\n<pre><code> // Alternatively you register for this event with:\n figure.on(&quot;contextmenu&quot;, function(emitter, event){\n     alert(&quot;user press the right mouse button for a context menu&quot;);\n });</code></pre>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate to show the menu</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate to show the menu</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setAlpha",
          "access": "",
          "virtual": false,
          "description": "<p>Set the alpha blending of this figure.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;alpha&quot;: percent\n });\n\n // ...or:\n figure.attr({\n   &quot;opacity&quot;: percent\n });</code></pre>",
          "parameters": [
            {
              "name": "percent",
              "type": "Number",
              "description": "<p>value between [0..1].</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getAlpha",
          "access": "",
          "virtual": false,
          "description": "<p>Return the alpha blending of the figure</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the current alpha blending</p>"
          }
        },
        {
          "name": "getRotationAngle",
          "access": "",
          "virtual": false,
          "description": "<p>return the rotation angle of the figure in degree of [0..356].</p>\n<br>\n<b>NOTE: this method is pre alpha and not for production. Only steps of 90 degree is working well</b>\n<br>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "isVisible",
          "access": "",
          "virtual": false,
          "description": "<p>Return true if the figure visible.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setKeepAspectRatio",
          "access": "",
          "virtual": false,
          "description": "<p>Guarantee, that the figure width/height will not be distorted. Applicable before calling setDimension().\nIt is false by default.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>boolean flag if the figure should respect the aspect ratio</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getKeepAspectRatio",
          "access": "",
          "virtual": false,
          "description": "<p>Return the flag if the shape keep the aspect ratio.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getZOrder",
          "access": "",
          "virtual": false,
          "description": "<p>Return the current z-index of the element. Currently this is an expensive method. The index will be calculated\nall the time. Caching is not implemented at the moment.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setCanSnapToHelper",
          "access": "",
          "virtual": false,
          "description": "<p>Set the flag if this object can snap to grid or geometry.\nA window of dialog should set this flag to false.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The snap to grid/geometry enable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getCanSnapToHelper",
          "access": "",
          "virtual": false,
          "description": "<p>Returns true if the figure can snap to any helper like a grid, guide, geometrie\nor something else.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "getSnapToGridAnchor",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "setSnapToGridAnchor",
          "access": "",
          "virtual": false,
          "description": "<p>Set the hot spot for all snapTo### operations.</p>",
          "parameters": [
            {
              "name": "point",
              "type": "draw2d.geo.Point",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setWidth",
          "access": "",
          "virtual": false,
          "description": "<p>Set the width of the figure and consider the minWidth attribute</p>",
          "parameters": [
            {
              "name": "width",
              "type": "Number",
              "description": "<p>the new width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getWidth",
          "access": "",
          "virtual": false,
          "description": "<p>The current width of the figure.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setHeight",
          "access": "",
          "virtual": false,
          "description": "<p>Set the heigth of the figure and consider the minWidth attribute</p>",
          "parameters": [
            {
              "name": "height",
              "type": "Number",
              "description": "<p>the new height of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getHeight",
          "access": "",
          "virtual": false,
          "description": "<p>The current height of the figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "getMinWidth",
          "access": "",
          "virtual": false,
          "description": "<p>This value is relevant for the interactive resize of the figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>Returns the min. width of this object.</p>"
          }
        },
        {
          "name": "setMinWidth",
          "access": "",
          "virtual": false,
          "description": "<p>Set the minimum width of this figure</p>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getMinHeight",
          "access": "",
          "virtual": false,
          "description": "<p>This value is relevant for the interactive resize of the figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>Returns the min. height of this object.</p>"
          }
        },
        {
          "name": "setMinHeight",
          "access": "",
          "virtual": false,
          "description": "<p>Set the minimum height of the figure.</p>",
          "parameters": [
            {
              "name": "h",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setX",
          "access": "",
          "virtual": false,
          "description": "<p>the the x-offset related to the parent figure or canvas</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the new x offset of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getX",
          "access": "",
          "virtual": false,
          "description": "<p>The x-offset related to the parent figure or canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the x-offset to the parent figure</p>"
          }
        },
        {
          "name": "setY",
          "access": "",
          "virtual": false,
          "description": "<p>the the y-offset related to the parent figure or canvas</p>",
          "parameters": [
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the new x offset of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getY",
          "access": "",
          "virtual": false,
          "description": "<p>The y-offset related to the parent figure or canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>The y-offset to the parent figure.</p>"
          }
        },
        {
          "name": "getAbsoluteX",
          "access": "",
          "virtual": false,
          "description": "<p>The x-offset related to the canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the x-offset to the canvas</p>"
          }
        },
        {
          "name": "getAbsoluteY",
          "access": "",
          "virtual": false,
          "description": "<p>The y-offset related to the canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>The y-offset to the canvas.</p>"
          }
        },
        {
          "name": "getAbsolutePosition",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the absolute y-position of the port.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getAbsoluteBounds",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the absolute y-position of the port.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "setPosition",
          "access": "",
          "virtual": false,
          "description": "<p>Set the position of the object.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   x: x,\n   y: y\n });</code></pre>",
          "parameters": [
            {
              "name": "x",
              "type": [
                "Number",
                "draw2d.geo.Point"
              ],
              "description": "<p>The new x coordinate of the figure or the x/y coordinate if it is an draw2d.geo.Point</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The new y coordinate of the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPosition",
          "access": "",
          "virtual": false,
          "description": "<p>Get the current position of the figure</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "translate",
          "access": "",
          "virtual": false,
          "description": "<p>Translate the figure with the given x/y offset.</p>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>The x offset to translate</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>The y offset to translate</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setBoundingBox",
          "access": "",
          "virtual": false,
          "description": "<p>Set the bounding box of the figure</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   width: w,\n   height: h,\n   x: x,\n   y: y\n });\n\n // or\n figure.attr({\n   boundingBox: {x:1, y:100, width:30, height:30}\n });</code></pre>",
          "parameters": [
            {
              "name": "rect",
              "type": "draw2d.geo.Rectangle",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getBoundingBox",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the bounding box of the figure in absolute position to the canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "hitTest",
          "access": "",
          "virtual": false,
          "description": "<p>Detect whenever the hands over coordinate is inside the figure.\nThe default implementation is a simple bounding box test.</p>",
          "parameters": [
            {
              "name": "iX",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "iY",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "corona",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setDraggable",
          "access": "",
          "virtual": false,
          "description": "<p>Switch on/off the drag drop behaviour of this object</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The new drag drop indicator</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "isDraggable",
          "access": "",
          "virtual": false,
          "description": "<p>Get the Drag drop enable flag</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": "<p>The new drag drop indicator</p>"
          }
        },
        {
          "name": "isResizeable",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the true if the figure can be resized.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setResizeable",
          "access": "",
          "virtual": false,
          "description": "<p>You can change the resizeable behaviour of this object. Hands over [false] and\nthe figure has no resizehandles if you select them with the mouse.<br></p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   resizeable: flag\n });</code></pre>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The resizeable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "isSelectable",
          "access": "",
          "virtual": false,
          "description": "<p>Indicates whenever the element is selectable by user interaction or API.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setSelectable",
          "access": "",
          "virtual": false,
          "description": "<p>You can change the selectable behavior of this object. Hands over [false] and\nthe figure has no selection handles if you try to select them with the mouse.<br></p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The selectable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "isStrechable",
          "access": "",
          "virtual": false,
          "description": "<p>Return true if the object doesn't care about the aspect ratio.\nYou can change the height and width independent.<br></p>\n<p>Replaced with &quot;getKeepAspectRatio&quot;</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "isDeleteable",
          "access": "",
          "virtual": false,
          "description": "<p>Return false if you avoid that the user can delete your figure.\nSub class can override this method.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setDeleteable",
          "access": "",
          "virtual": false,
          "description": "<p>Set the flag if the shape is deleteable.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>enable or disable flag for the delete operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setParent",
          "access": "private",
          "virtual": false,
          "description": "<p>Set the parent of this figure.\nDon't call them manually.</p>",
          "parameters": [
            {
              "name": "parent",
              "type": "draw2d.Figure",
              "description": "<p>The new parent of this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getParent",
          "access": "",
          "virtual": false,
          "description": "<p>Get the parent of this figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": ""
          }
        },
        {
          "name": "contains",
          "access": "",
          "virtual": false,
          "description": "<p>Check to see if a figure is a descendant of another figure.\n<br>\nThe contains() method returns true if the figure provided by the argument is a descendant of this figure,\nwhether it is a direct child or nested more deeply. Otherwise, it returns false.</p>",
          "parameters": [
            {
              "name": "containedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure that may be contained by (a descendant of) this figure.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getRoot",
          "access": "",
          "virtual": false,
          "description": "<p>Get the top most parent of this figure. This can be an layout figure or parent container</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": ""
          }
        },
        {
          "name": "setComposite",
          "access": "",
          "virtual": false,
          "description": "<p>Set the assigned composite of this figure.</p>",
          "parameters": [
            {
              "name": "composite",
              "type": "draw2d.shape.composite.StrongComposite",
              "description": "<p>The assigned composite of this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getComposite",
          "access": "",
          "virtual": false,
          "description": "<p>Get the assigned composite of this figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.shape.composite.StrongComposite",
            "description": ""
          }
        },
        {
          "name": "fireEvent",
          "access": "",
          "virtual": false,
          "description": "<p>Execute all handlers and behaviors attached to the figure for the given event type.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "String",
              "description": "<p>the event to trigger</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "args",
              "type": "Object",
              "description": "<p>optional parameters for the triggered event callback</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "on",
          "access": "",
          "virtual": false,
          "description": "<p>Attach an event handler function for one or more events to the figure.\nTo remove events bound with .on(), see {@link #off}.</p>\n<p>possible events are:<br></p>\n<ul>\n  <li>click</li>\n  <li>dblclick</li>\n  <li>move</li>\n  <li>resize</li>\n  <li>timer</li>\n  <li>contextmenu</li>\n  <li>show</li>\n  <li>hide</li>\n  <li>added</li>\n  <li>removed</li>\n  <li>change:[attr]</li>\n</ul>",
          "parameters": [
            {
              "name": "event",
              "type": "String",
              "description": "<p>One or more space-separated event types</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback",
              "type": "function",
              "description": "<p>A function to execute when the event is triggered.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback.emitter",
              "type": "draw2d.Figure",
              "description": "<p>the emitter of the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback.obj",
              "type": "Object",
              "description": "<p>optional event related data</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "context",
              "type": "Object",
              "description": "<p>optional context of the function callback.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "off",
          "access": "",
          "virtual": false,
          "description": "<p>The .off() method removes event handlers that were attached with {@link #on}.<br>\nCalling .off() with no arguments removes all handlers attached to the elements.<br>\n<br>\nIf a simple event name such as &quot;move&quot; is provided, all events of that type are removed from the figure.</p>",
          "parameters": [
            {
              "name": "eventOrFunction",
              "type": [
                "String",
                "function"
              ],
              "description": "<p>the event name of the registerd function or the function itself</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getBestChild",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the best figure at the location [x,y]. It is a simple hit test. Keep in mind that only visible objects\nare returned.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>The x position.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The y position.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "figureToIgnore",
              "type": [
                "draw2d.Figure",
                "Array"
              ],
              "description": "<p>The figures which should be ignored.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        }
      ]
    },
    {
      "name": "Label",
      "namespace": "draw2d.shape.basic",
      "description": "<p>draw2d.shape.basic.Label\nImplements a simple text label.</p>",
      "extends": [
        "draw2d.SetFigure"
      ],
      "access": "",
      "virtual": false,
      "fires": "",
      "constructor": {
        "name": "Label",
        "description": "",
        "parameters": [],
        "examples": [
          "let shape =  new draw2d.shape.basic.Label({text:\"This is a simple label\", x:40, y:10});\n\n    canvas.add(shape);"
        ]
      },
      "functions": [
        {
          "name": "init",
          "access": "",
          "virtual": false,
          "description": "<p>Creates a new text element.</p>",
          "parameters": [
            {
              "name": "attr",
              "type": "Object",
              "description": "<p>the configuration of the shape</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "createSet",
          "access": "",
          "virtual": false,
          "description": "<p>Creates the shape object for a text node.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setCanvas",
          "access": "",
          "virtual": false,
          "description": "<p>Set the canvas element of this figures.</p>",
          "parameters": [
            {
              "name": "canvas",
              "type": "draw2d.Canvas",
              "description": "<p>the new parent of the figure or null</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "repaint",
          "access": "",
          "virtual": false,
          "description": "<p>Trigger the repaint of the element and transport all style properties to the visual representation.<br>\nCalled by the framework.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "calculateTextAttr",
          "access": "protected",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "applyTransformation",
          "access": "private",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setFontSize",
          "access": "",
          "virtual": false,
          "description": "<p>Set the new font size in [pt].</p>",
          "parameters": [
            {
              "name": "size",
              "type": "Number",
              "description": "<p>The new font size in <code>pt</code></p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getFontSize",
          "access": "",
          "virtual": false,
          "description": "<p>Return the current used font size in px.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setBold",
          "access": "",
          "virtual": false,
          "description": "<p>Set the label to <b>bold</b> or <b>normal</b> font weight.</p>",
          "parameters": [
            {
              "name": "bold",
              "type": "Boolean",
              "description": "<p>The bold flag for the label</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "isBold",
          "access": "",
          "virtual": false,
          "description": "<p>Return the &quot;bold&quot; attribute of the label</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setOutlineColor",
          "access": "",
          "virtual": false,
          "description": "<p>Set the outline color of the font.</p>",
          "parameters": [
            {
              "name": "color",
              "type": "draw2d.util.Color/String",
              "description": "<p>The new color of the line.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getOutlineColor",
          "access": "",
          "virtual": false,
          "description": "<p>The outlien color of the text</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.Color",
            "description": ""
          }
        },
        {
          "name": "setOutlineStroke",
          "access": "",
          "virtual": false,
          "description": "<p>Set the stroke of the text to use.</p>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "<p>The new line width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getOutlineStroke",
          "access": "",
          "virtual": false,
          "description": "<p>The used outline line width.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setFontColor",
          "access": "",
          "virtual": false,
          "description": "<p>Set the color of the font.</p>",
          "parameters": [
            {
              "name": "color",
              "type": [
                "draw2d.util.Color",
                "String"
              ],
              "description": "<p>The new color of the line.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getFontColor",
          "access": "",
          "virtual": false,
          "description": "<p>The current used font color</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.Color",
            "description": ""
          }
        },
        {
          "name": "setPadding",
          "access": "",
          "virtual": false,
          "description": "<p>Set the padding of the element</p>\n<pre><code> // Alternatively you can use the attr method:\n //\n // set the padding for top,left,bottom,right in one call\n figure.attr({\n   padding: 3\n });\n\n // update the padding left and top\n figure.attr({\n   padding: {left:3, top:30}\n });</code></pre>",
          "parameters": [
            {
              "name": "padding",
              "type": [
                "Number",
                "Object"
              ],
              "description": "<p>The new padding</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPadding",
          "access": "",
          "virtual": false,
          "description": "<p>Get the padding of the element.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setFontFamily",
          "access": "",
          "virtual": false,
          "description": "<p>Set the font family to use. If you use the shown font names the typical fallback\nfont are installed as well.</p>\n<p><b>Serif Fonts</b></p>\n<ul>\n <li><span style=\"font-family:'Georgia'\">Georgia</span></li>\n <li><span style=\"font-family:'Palatino Linotype'\">Palatino Linotype</span></li>\n <li><span style=\"font-family:'Times New Roman'\">Times New Roman</span></li>\n</ul>\n<p><b>Sans-Serif Fonts</b></p>\n<ul>\n <li><span style=\"font-family:'Arial'\">Arial</span></li>\n <li><span style=\"font-family:'Arial Black'\">Arial Black</span></li>\n <li><span style=\"font-family:'Comic Sans MS'\">Comic Sans MS</span></li>\n <li><span style=\"font-family:'Impact, Charcoal'\">Impact, Charcoal</span></li>\n <li><span style=\"font-family:'Lucida Sans Unicode'\">Lucida Sans Unicode</span></li>\n <li><span style=\"font-family:'Tahoma, Geneva'\">Tahoma, Geneva</span></li>\n <li><span style=\"font-family:'Trebuchet MS'\">Trebuchet MS</span> </li>\n <li><span style=\"font-family:'Verdana'\">Verdana</span></li>\n</ul>\n<p><b>Monospace Fonts</b></p>\n<ul>\n <li><span style=\"font-family:'Courier New'\">Courier New</span></li>\n <li><span style=\"font-family:'Lucida Console'\">Lucida Console</span></li>\n</ul>",
          "parameters": [
            {
              "name": "font",
              "type": "String",
              "description": "<p>The font to use</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getFontFamily",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the used font family of the label.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "setDimension",
          "access": "",
          "virtual": false,
          "description": "<p>A Label did have &quot;autosize&quot;. Do nothing at all.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "clearCache",
          "access": "private",
          "virtual": false,
          "description": "<p>clear the internal cache for width/height precalculation</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getMinWidth",
          "access": "",
          "virtual": false,
          "description": "<p>This value is relevant for the interactive resize of the figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>Returns the min. width of this object.</p>"
          }
        },
        {
          "name": "getMinHeight",
          "access": "",
          "virtual": false,
          "description": "<p>This value is relevant for the interactive resize of the figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>Returns the min. width of this object.</p>"
          }
        },
        {
          "name": "getWidth",
          "access": "",
          "virtual": false,
          "description": "<p>Return the calculate width of the set. This calculates the bounding box of all elements.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the calculated width of the label</p>"
          }
        },
        {
          "name": "getHeight",
          "access": "",
          "virtual": false,
          "description": "<p>Return the calculated height of the set. This calculates the bounding box of all elements.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the calculated height of the label</p>"
          }
        },
        {
          "name": "installEditor",
          "access": "",
          "virtual": false,
          "description": "<p>Set an editor for the label. This can be a dialog or inplace editor for the\nText.<br>\nThe editor will be activated if you doubleClick on the label.</p>",
          "parameters": [
            {
              "name": "editor",
              "type": [
                "draw2d.ui.LabelEditor",
                "String"
              ],
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onDoubleClick",
          "access": "",
          "virtual": false,
          "description": "<p>Called when a user dbl clicks on the element</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getText",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the current text of the label.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "",
            "description": "<p>the current display text of the label</p>"
          }
        },
        {
          "name": "setText",
          "access": "",
          "virtual": false,
          "description": "<p>Set the text for the label. Use \\n for multiline text.</p>",
          "parameters": [
            {
              "name": "text",
              "type": "String",
              "description": "<p>The new text for the label.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPersistentAttributes",
          "access": "",
          "virtual": false,
          "description": "<p>Return an objects with all important attributes for XML or JSON serialization</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Object",
            "description": ""
          }
        },
        {
          "name": "setPersistentAttributes",
          "access": "",
          "virtual": false,
          "description": "<p>Read all attributes from the serialized properties and transfer them into the shape.</p>",
          "parameters": [
            {
              "name": "memento",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Set the css class if the node.</p>",
          "parameters": [
            {
              "name": "cssClass",
              "type": "String",
              "description": "<p>the new css class name of the node</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setVisible",
          "access": "",
          "virtual": false,
          "description": "<p>Show/hide the element. The element didn't receive any mouse events (click, dblclick) if you hide the\nfigure.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   visible: flag\n });</code></pre>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "duration",
              "type": "Number",
              "description": "<p>the optional number for the fadeIn /fadeOut of the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "applyAlpha",
          "access": "private",
          "virtual": false,
          "description": "<p>Apply the opacity to all child set elements. Override this if you want to avoid opacity changes.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "toFront",
          "access": "",
          "virtual": false,
          "description": "<p>Moves the element so it is the closest to the viewerâ€™s eyes, on top of other elements. Additional\nthe internal model changed as well.</p>\n<p>Optional: Inserts current object in front of the given one.</p>",
          "parameters": [
            {
              "name": "figure",
              "type": "draw2d.Figure",
              "description": "<p>move current object in front of the given one.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "toBack",
          "access": "",
          "virtual": false,
          "description": "<p>Moves the element to the background. Additional\nthe internal model changed as well.</p>\n<p>Optional: Inserts current object in front of the given one.</p>",
          "parameters": [
            {
              "name": "figure",
              "type": "draw2d.Figure",
              "description": "<p>move current object in front of the given one.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getTopLevelShapeElement",
          "access": "private",
          "virtual": false,
          "description": "<p>Get the top level shape element. May the figure has a set of SVG elements. In this case this\nmethod must return the top level node.<br>\nThis method is used for the toFront/toBack method to order the nodes in the correct way.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "createShapeElement",
          "access": "private",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setDashArray",
          "access": "",
          "virtual": false,
          "description": "<p>Set the line style for dot/dash styling. Possible values are\n[&quot;&quot;, &quot;-&quot;, &quot;.&quot;, &quot;-.&quot;, &quot;-..&quot;, &quot;. &quot;, &quot;- &quot;, &quot;--&quot;, &quot;- .&quot;, &quot;--.&quot;, &quot;--..&quot;]</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   dash: pattern\n });</code></pre>",
          "parameters": [
            {
              "name": "pattern",
              "type": "String",
              "description": "<p>the string with the dot/dash pattern. valid values: [&quot;&quot;, &quot;-&quot;, &quot;.&quot;, &quot;-.&quot;, &quot;-..&quot;, &quot;. &quot;, &quot;- &quot;, &quot;--&quot;, &quot;- .&quot;, &quot;--.&quot;, &quot;--..&quot;]</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getDashArray",
          "access": "",
          "virtual": false,
          "description": "<p>Get the line style for this object.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr(&quot;dash&quot;);</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setRadius",
          "access": "",
          "virtual": false,
          "description": "<p>Sets the corner radius or the edges.</p>",
          "parameters": [
            {
              "name": "radius",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getRadius",
          "access": "",
          "virtual": false,
          "description": "<p>Get the corner radius of the edges.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setGlow",
          "access": "",
          "virtual": false,
          "description": "<p>Highlight the element or remove the highlighting</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>indicates glow/noGlow</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setBackgroundColor",
          "access": "",
          "virtual": false,
          "description": "<p>Set the new background color of the figure. It is possible to hands over\n<code>null</code> to set the background transparent.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;bgColor&quot;: &quot;#f0f0f0&quot;\n });</code></pre>",
          "parameters": [
            {
              "name": "color",
              "type": [
                "String",
                "draw2d.util.Color"
              ],
              "description": "<p>The new background color of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getBackgroundColor",
          "access": "",
          "virtual": false,
          "description": "<p>The current used background color.</p>\n<pre><code> // Alternatively you can use the attr method:\n var color =figure.attr(&quot;bgColor&quot;);</code></pre>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.Color",
            "description": ""
          }
        },
        {
          "name": "setStroke",
          "access": "",
          "virtual": false,
          "description": "<p>Set the stroke to use.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;stroke&quot;: 2\n });</code></pre>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "<p>The new line width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getStroke",
          "access": "",
          "virtual": false,
          "description": "<p>The used line width.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setColor",
          "access": "",
          "virtual": false,
          "description": "<p>Set the foreground color of the figure.\nThis method fires a <i>document dirty</i> event.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;color&quot;: &quot;#f3f3f3&quot;\n });</code></pre>",
          "parameters": [
            {
              "name": "color",
              "type": [
                "String",
                "draw2d.util.Color"
              ],
              "description": "<p>The new color of the line.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getColor",
          "access": "",
          "virtual": false,
          "description": "<p>Get the current used foreground color</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.Color",
            "description": ""
          }
        },
        {
          "name": "setPersistPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Indicates if the node should read/write the ports via the draw2d.Figure.getPersistenAttributes\nto the JSON object</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPersistPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Indicates if the figure writes the ports to the JSON structore too.\nDefault is &quot;false&quot;</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "getPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Return all ports of the node. The results contains\nall ports of the children too per default. Set <b>recursive</b>\nto false to retrieve direct assigned ports only.</p>",
          "parameters": [
            {
              "name": "recursive",
              "type": "Boolean",
              "description": "<p>indicates if the method should return children ports too. Default is <b>true</b></p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "getInputPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Return all input ports of the node.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "getOutputPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Return all output ports of the node.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "clone",
          "access": "",
          "virtual": false,
          "description": "<p>Clone the figure. <br>\nYou must override and implement the methods <b>getPersistentAttributes</b> and <b>setPersistentAttributes</b> for your custom\nfigures if the have special attributes.</p>\n<p>The clone() method performs a deep copy of the object, meaning that it copies the children, ports and decorations\nper default. You can control the clone procedure with the 'cloneMetaData'.</p>",
          "parameters": [
            {
              "name": "cloneMetaData",
              "type": "Object",
              "description": "<p>controls the clone procedure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "cloneMetaData.excludeChildren",
              "type": "Boolean",
              "description": "<p>set it to true if you want exclude the children.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "cloneMetaData.excludePorts",
              "type": "Boolean",
              "description": "<p>set it to true if you want exclude the ports of the node.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portName",
              "type": "String",
              "description": "<p>The name of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.Port",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getInputPort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the input port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.InputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getOutputPort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the output port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or the numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.OutputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getHybridPort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the input port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.InputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "addPort",
          "access": "",
          "virtual": false,
          "description": "<p>Add a port to this node at the given position.<br></p>",
          "parameters": [
            {
              "name": "port",
              "type": "draw2d.Port",
              "description": "<p>The new port to add.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>The layout for the port.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "resetPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Remove all ports of this node</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "removePort",
          "access": "",
          "virtual": false,
          "description": "<p>Removes a port and all related connections from this node.<br></p>",
          "parameters": [
            {
              "name": "port",
              "type": "draw2d.Port",
              "description": "<p>The port to remove.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "createPort",
          "access": "",
          "virtual": false,
          "description": "<p>Create a standard Port for this element. Inherited class can override this\nmethod to create its own type of ports.</p>",
          "parameters": [
            {
              "name": "type",
              "type": "String",
              "description": "<p>the type of the requested port. possible [&quot;input&quot;, &quot;output&quot;]</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>the layouter to use for this port</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getConnections",
          "access": "",
          "virtual": false,
          "description": "<p>Return all connections related to this node.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "setRotationAngle",
          "access": "",
          "virtual": false,
          "description": "<p>Set the rotation angle in degree [0..356]<br>\n<b>Only steps of 90 degree is working well</b>\n<br>\n// Alternatively you can use the attr method:\nfigure.attr({\nangle: angle\n});</p>",
          "parameters": [
            {
              "name": "angle",
              "type": "Number",
              "description": "<p>the rotation angle in degree</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onPortValueChanged",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the value of any port has been changed</p>",
          "parameters": [
            {
              "name": "relatedPort",
              "type": "draw2d.Port",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "layoutPorts",
          "access": "private",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "createCommand",
          "access": "private",
          "virtual": false,
          "description": "<p>Returns the Command to perform the specified Request or null.</p>",
          "parameters": [
            {
              "name": "request",
              "type": "draw2d.command.CommandType",
              "description": "<p>describes the Command being requested</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.command.Command",
            "description": "<p>null or a Command</p>"
          }
        },
        {
          "name": "attr",
          "access": "",
          "virtual": false,
          "description": "<p>Read or set shape attributes.<br>\nWhen no value is given, reads specified attribute from the element.<br>\nWhen value is given, sets the attribute to that value.\nMultiple attributes can be set by passing an object with name-value pairs.</p>\n<pre><code>let figure = new draw2d.shape.basic.Rectangle();\nfigure.attr('x');      //=&gt; read value\nfigure.attr('x', 30);  //=&gt; set value\n\n// multiple attributes:\nfigure.attr({\n  x: 30,\n  y: 40,\n  width : 200,\n  height: 50,\n  cssClass: &quot;red_border_figure&quot;\n});\n\n// it is possible to override any method of the figure as well\n// Instead of inheritance you can just override the callback methods\n// like\n//\nfigure.attr({\n   onClick : function(){\n       alert(&quot;click&quot;);\n   }\n});\n\n// or you can pass the attr values in the constructor\n//\nlet clickFigure = new draw2d.shape.basic.Rectangle({\n   onClick : function(){\n       alert(&quot;click&quot;);\n   }\n});\n</code></pre>\n<p>Additional you can set the user defined values (userData) with this method\nusing the dot-notation. User defined values are always part of the exported\nJSON data.</p>\n<pre><code>// setting multiple attributes:\nfigure.attr({\n  &quot;userData.my.property.x&quot;: 30,\n  &quot;userData.my.property.y&quot;: 40\n});\n</code></pre>\n<p>Also set using array notation is possible for the userData:</p>\n<pre><code>// dot notation and array brackets:\nfigure.attr({\n  &quot;userData.my.names[0]&quot;: &quot;John&quot;,\n  &quot;userData.my.names[1]&quot;: &quot;Doe&quot;\n});\n</code></pre>\n<p>The Object returned should be the equivalent structured object:</p>\n<pre><code>let obj = figure.getUserData();\n</code></pre>\n<p>That is, where obj is equivalent to:</p>\n<pre><code>let obj = {\n    my:{\n        property:{\n            x: 30,\n            y: 40\n       },\n       names:  [&quot;John&quot;, &quot;Doe&quot;]\n   }\n</code></pre>\n<p>};</p>",
          "parameters": [
            {
              "name": "name",
              "type": "String/Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "value",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "pick",
          "access": "",
          "virtual": false,
          "description": "<p>Return a copy of the object, filtered to only have values for the whitelisted keys.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "select",
          "access": "private",
          "virtual": false,
          "description": "<p>Add the figure to the current selection and propagate this to all edit policies.</p>",
          "parameters": [
            {
              "name": "asPrimarySelection",
              "type": "Boolean",
              "description": "<p>true if the element should be the primary selection</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "unselect",
          "access": "private",
          "virtual": false,
          "description": "<p>Unselect the figure and propagete this event to all edit policies.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setSelectionAdapter",
          "access": "",
          "virtual": false,
          "description": "<p>Returns a function which returns the the figure which must handle the selection handling.</p>",
          "parameters": [
            {
              "name": "adapter",
              "type": "function",
              "description": "<p>function which returns the figure which handles the selection handling</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getSelectionAdapter",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "function",
            "description": ""
          }
        },
        {
          "name": "isSelected",
          "access": "",
          "virtual": false,
          "description": "<p>Returns true if the figure part of the current canvas selection.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setUserData",
          "access": "",
          "virtual": false,
          "description": "<p>Allows a user to attach (or remove) data to an element, without needing to create a custom figure or shape.\nThe data must be a valid JSON object.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   userData: object\n });</code></pre>",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getUserData",
          "access": "",
          "virtual": false,
          "description": "<p>Returns any user data set previously on the given figure by setUserData.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Object",
            "description": ""
          }
        },
        {
          "name": "getId",
          "access": "",
          "virtual": false,
          "description": "<p>Return the UUID of this element.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "setId",
          "access": "",
          "virtual": false,
          "description": "<p>Set the id of this element.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  id: newId\n});</code></pre>",
          "parameters": [
            {
              "name": "newId",
              "type": "String",
              "description": "<p>the new id for this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Return the css styling class name of the element.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "hasCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>The method will return true if the class is assigned to the element, even if other classes also are.</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the class name to check</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "addCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Add a CSS class to the figure.<br>\nIt's important to note that this method does not replace a class. It simply adds the class,\nappending it to any which may already be assigned to the elements.</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "removeCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Remove the given css class name from the figure</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the css class name to add</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "toggleCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Add or remove the given css class name from the figure</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the class name to toggle</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getCanvas",
          "access": "",
          "virtual": false,
          "description": "<p>Return the current assigned canvas container.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.Canvas",
            "description": ""
          }
        },
        {
          "name": "startTimer",
          "access": "",
          "virtual": false,
          "description": "<p>Start a timer which calls the onTimer method in the given interval.</p>",
          "parameters": [
            {
              "name": "milliSeconds",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "stopTimer",
          "access": "",
          "virtual": false,
          "description": "<p>Stop the internal timer.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onTimer",
          "access": "",
          "virtual": false,
          "description": "<p>Callback method for the internal timer handling<br>\nInherit classes must override this method if they want use the timer feature.</p>\n<pre><code> // Alternatively you can register for this event with\n figure.on(&quot;timer&quot;, function(emitter){\n     alert(&quot;timer fired&quot;);\n });</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "installEditPolicy",
          "access": "",
          "virtual": false,
          "description": "<p>Install a new edit policy to the figure. Each editpolicy is able to focus on a single editing\ntask or group of related tasks. This also allows editing behavior to be selectively reused across\ndifferent figure implementations. Also, behavior can change dynamically, such as when the layouts\nor routing methods change.</p>\n<p>Example for limited DragDrop behavior can be a draw2d.layout.constraint.RegionConstriantPolicy.</p>",
          "parameters": [
            {
              "name": "policy",
              "type": "draw2d.policy.EditPolicy",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "uninstallEditPolicy",
          "access": "",
          "virtual": false,
          "description": "<p>UnInstall the edit policy from the figure. Either the instance itself if found\nor all kind of the given edit policies.</p>",
          "parameters": [
            {
              "name": "policy",
              "type": "draw2d.policy.EditPolicy",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "add",
          "access": "",
          "virtual": false,
          "description": "<p>Add a child figure to the figure. The hands over figure doesn't support drag&amp;drop\noperations. It's only a decorator for the connection.<br>\nMainly for labels or other decorations</p>\n<pre><code>let start = new draw2d.shape.node.Start({x:80, y:150});\nstart.add(new draw2d.shape.basic.Label({text:&quot;Test Label&quot;}), new draw2d.layout.locator.TopLocator());\n\ncanvas.add( start);</code></pre>",
          "parameters": [
            {
              "name": "child",
              "type": "draw2d.Figure",
              "description": "<p>the figure to add as decoration to the connection.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>the locator for the child.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "index",
              "type": "Number",
              "description": "<p>optional index where to insert the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "remove",
          "access": "",
          "virtual": false,
          "description": "<p>Remove the child figure from this figure and the canvas</p>",
          "parameters": [
            {
              "name": "child",
              "type": "draw2d.Figure",
              "description": "<p>the figure to remove.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Object",
            "description": "<p>the removed tupple of figure/locator or null if the child isn't found</p>"
          }
        },
        {
          "name": "getChildren",
          "access": "",
          "virtual": false,
          "description": "<p>Return all children/decorations of this shape which has been added with\ndraw2d.Figure.add</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "resetChildren",
          "access": "",
          "virtual": false,
          "description": "<p>Remove all children/decorations of this shape</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getShapeElement",
          "access": "protected",
          "virtual": false,
          "description": "<p>return the current SVG shape element or create it on demand.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getHandleBBox",
          "access": "",
          "virtual": false,
          "description": "<p>Allow dragging only when the cursor is over a specific part of the figure.\n<br>\nOverride this method to specify the bounding box of an element or a draw2d.util.ArrayList\nof draw2d.geo.Rectangle of bounding boxes used to drag the figure. The returned coordinates\nare absolute coordinates to the canvas.\n<br>\n<br>\nDefault implementation returns <b>null</b> to indicate to use the complete figures as\ndrag handle.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": [
              "draw2d.geo.Rectangle",
              "draw2d.util.ArrayList"
            ],
            "description": ""
          }
        },
        {
          "name": "onDragStart",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the drag and drop action begins. You can return [false] if you\nwant avoid that the figure can be move.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": "<p>true if the figure accepts dragging</p>"
          }
        },
        {
          "name": "onDrag",
          "access": "private",
          "virtual": false,
          "description": "<p>Don't call them manually. This will be done by the framework.<br>\nWill be called if the object are moved via drag and drop.\nSub classes can override this method to implement additional stuff. Don't forget to call\nthe super implementation via <code>this._super(dx, dy, dx2, dy2);</code></p>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>the x difference between the start of the drag drop operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>the y difference between the start of the drag drop operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dx2",
              "type": "Number",
              "description": "<p>The x diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy2",
              "type": "Number",
              "description": "<p>The y diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onPanning",
          "access": "",
          "virtual": false,
          "description": "<p>Called by the framework if the figure returns false for the drag operation. In this\ncase we send a &quot;panning&quot; event - mouseDown + mouseMove. This is very useful for\nUI-Widget like slider, spinner,...</p>\n<pre><code> // You can alternatively register an event handler with:\n figure.on(&quot;panning&quot;, function(emitter, eventData){\n     alert(&quot;panning of the figure called&quot;);\n });</code></pre>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>the x difference between the mouse down operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>the y difference between the mouse down operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dx2",
              "type": "Number",
              "description": "<p>The x diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy2",
              "type": "Number",
              "description": "<p>The y diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onPanningEnd",
          "access": "",
          "virtual": false,
          "description": "<p>Called by the framework if the panning event of the figures ends. This happens\nafter the mous up event if the panning is active.</p>\n<pre><code> // You can alternatively register an event handler with:\n figure.on(&quot;panningEnd&quot;, function(emitter){\n     alert(&quot;panning of the figure called&quot;);\n });</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onDragEnd",
          "access": "",
          "virtual": false,
          "description": "<p>Will be called after a drag and drop action.<br>\nSub classes can override this method to implement additional stuff. Don't forget to call\nthe super implementation via <code>this._super();</code></p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "delegateTarget",
          "access": "private",
          "virtual": false,
          "description": "<p>Called by the framework during drag&amp;drop operations if the user drag a figure over this figure</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": "<p>the figure which should receive the drop event or null if the element didn't want a drop event</p>"
          }
        },
        {
          "name": "onDragEnter",
          "access": "",
          "virtual": false,
          "description": "<p>Called by the framework during drag&amp;drop operations if the user drag a figure over this figure</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onDragLeave",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the DragDrop object leaving the current hover figure.</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onDrop",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the user drop this element onto the dropTarget. This event is ONLY fired if the\nshape return &quot;this&quot; in the {@link draw2d.Figure#onDragEnter} method.</p>",
          "parameters": [
            {
              "name": "dropTarget",
              "type": "draw2d.Figure",
              "description": "<p>The drop target.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onCatch",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the user dropped an figure onto this element. This event is ONLY fired if the\nin the canvas installed {@link draw2d.policy.canvas.DropInterceptorPolicy} allow this.</p>",
          "parameters": [
            {
              "name": "droppedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The dropped figure.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onMouseEnter",
          "access": "",
          "virtual": false,
          "description": "<p>Callback method for the mouse enter event. Usefull for mouse hover-effects.\nOverride this method for your own effects. Don't call them manually.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onMouseLeave",
          "access": "",
          "virtual": false,
          "description": "<p>Callback method for the mouse leave event. Useful for mouse hover-effects.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onClick",
          "access": "",
          "virtual": false,
          "description": "<p>Called when a user clicks on the element.</p>\n<pre><code> // You can alternatively register an event handler with:\n figure.on(&quot;click&quot;, function(emitter, event){\n     alert(&quot;user click on the figure&quot;);\n });</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onContextMenu",
          "access": "",
          "virtual": false,
          "description": "<p>called by the framework if the figure should show the context menu.<br>\nThe strategy to show the context menu depends on the platform. Either looong press or\nright click with the mouse.</p>\n<pre><code> // Alternatively you register for this event with:\n figure.on(&quot;contextmenu&quot;, function(emitter, event){\n     alert(&quot;user press the right mouse button for a context menu&quot;);\n });</code></pre>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate to show the menu</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate to show the menu</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setAlpha",
          "access": "",
          "virtual": false,
          "description": "<p>Set the alpha blending of this figure.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;alpha&quot;: percent\n });\n\n // ...or:\n figure.attr({\n   &quot;opacity&quot;: percent\n });</code></pre>",
          "parameters": [
            {
              "name": "percent",
              "type": "Number",
              "description": "<p>value between [0..1].</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getAlpha",
          "access": "",
          "virtual": false,
          "description": "<p>Return the alpha blending of the figure</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the current alpha blending</p>"
          }
        },
        {
          "name": "getRotationAngle",
          "access": "",
          "virtual": false,
          "description": "<p>return the rotation angle of the figure in degree of [0..356].</p>\n<br>\n<b>NOTE: this method is pre alpha and not for production. Only steps of 90 degree is working well</b>\n<br>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "isVisible",
          "access": "",
          "virtual": false,
          "description": "<p>Return true if the figure visible.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setKeepAspectRatio",
          "access": "",
          "virtual": false,
          "description": "<p>Guarantee, that the figure width/height will not be distorted. Applicable before calling setDimension().\nIt is false by default.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>boolean flag if the figure should respect the aspect ratio</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getKeepAspectRatio",
          "access": "",
          "virtual": false,
          "description": "<p>Return the flag if the shape keep the aspect ratio.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getZOrder",
          "access": "",
          "virtual": false,
          "description": "<p>Return the current z-index of the element. Currently this is an expensive method. The index will be calculated\nall the time. Caching is not implemented at the moment.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setCanSnapToHelper",
          "access": "",
          "virtual": false,
          "description": "<p>Set the flag if this object can snap to grid or geometry.\nA window of dialog should set this flag to false.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The snap to grid/geometry enable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getCanSnapToHelper",
          "access": "",
          "virtual": false,
          "description": "<p>Returns true if the figure can snap to any helper like a grid, guide, geometrie\nor something else.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "getSnapToGridAnchor",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "setSnapToGridAnchor",
          "access": "",
          "virtual": false,
          "description": "<p>Set the hot spot for all snapTo### operations.</p>",
          "parameters": [
            {
              "name": "point",
              "type": "draw2d.geo.Point",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setWidth",
          "access": "",
          "virtual": false,
          "description": "<p>Set the width of the figure and consider the minWidth attribute</p>",
          "parameters": [
            {
              "name": "width",
              "type": "Number",
              "description": "<p>the new width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setHeight",
          "access": "",
          "virtual": false,
          "description": "<p>Set the heigth of the figure and consider the minWidth attribute</p>",
          "parameters": [
            {
              "name": "height",
              "type": "Number",
              "description": "<p>the new height of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setMinWidth",
          "access": "",
          "virtual": false,
          "description": "<p>Set the minimum width of this figure</p>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setMinHeight",
          "access": "",
          "virtual": false,
          "description": "<p>Set the minimum height of the figure.</p>",
          "parameters": [
            {
              "name": "h",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setX",
          "access": "",
          "virtual": false,
          "description": "<p>the the x-offset related to the parent figure or canvas</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the new x offset of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getX",
          "access": "",
          "virtual": false,
          "description": "<p>The x-offset related to the parent figure or canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the x-offset to the parent figure</p>"
          }
        },
        {
          "name": "setY",
          "access": "",
          "virtual": false,
          "description": "<p>the the y-offset related to the parent figure or canvas</p>",
          "parameters": [
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the new x offset of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getY",
          "access": "",
          "virtual": false,
          "description": "<p>The y-offset related to the parent figure or canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>The y-offset to the parent figure.</p>"
          }
        },
        {
          "name": "getAbsoluteX",
          "access": "",
          "virtual": false,
          "description": "<p>The x-offset related to the canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the x-offset to the canvas</p>"
          }
        },
        {
          "name": "getAbsoluteY",
          "access": "",
          "virtual": false,
          "description": "<p>The y-offset related to the canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>The y-offset to the canvas.</p>"
          }
        },
        {
          "name": "getAbsolutePosition",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the absolute y-position of the port.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getAbsoluteBounds",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the absolute y-position of the port.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "setPosition",
          "access": "",
          "virtual": false,
          "description": "<p>Set the position of the object.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   x: x,\n   y: y\n });</code></pre>",
          "parameters": [
            {
              "name": "x",
              "type": [
                "Number",
                "draw2d.geo.Point"
              ],
              "description": "<p>The new x coordinate of the figure or the x/y coordinate if it is an draw2d.geo.Point</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The new y coordinate of the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPosition",
          "access": "",
          "virtual": false,
          "description": "<p>Get the current position of the figure</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "translate",
          "access": "",
          "virtual": false,
          "description": "<p>Translate the figure with the given x/y offset.</p>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>The x offset to translate</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>The y offset to translate</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setBoundingBox",
          "access": "",
          "virtual": false,
          "description": "<p>Set the bounding box of the figure</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   width: w,\n   height: h,\n   x: x,\n   y: y\n });\n\n // or\n figure.attr({\n   boundingBox: {x:1, y:100, width:30, height:30}\n });</code></pre>",
          "parameters": [
            {
              "name": "rect",
              "type": "draw2d.geo.Rectangle",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getBoundingBox",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the bounding box of the figure in absolute position to the canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "hitTest",
          "access": "",
          "virtual": false,
          "description": "<p>Detect whenever the hands over coordinate is inside the figure.\nThe default implementation is a simple bounding box test.</p>",
          "parameters": [
            {
              "name": "iX",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "iY",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "corona",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setDraggable",
          "access": "",
          "virtual": false,
          "description": "<p>Switch on/off the drag drop behaviour of this object</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The new drag drop indicator</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "isDraggable",
          "access": "",
          "virtual": false,
          "description": "<p>Get the Drag drop enable flag</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": "<p>The new drag drop indicator</p>"
          }
        },
        {
          "name": "isResizeable",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the true if the figure can be resized.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setResizeable",
          "access": "",
          "virtual": false,
          "description": "<p>You can change the resizeable behaviour of this object. Hands over [false] and\nthe figure has no resizehandles if you select them with the mouse.<br></p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   resizeable: flag\n });</code></pre>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The resizeable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "isSelectable",
          "access": "",
          "virtual": false,
          "description": "<p>Indicates whenever the element is selectable by user interaction or API.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setSelectable",
          "access": "",
          "virtual": false,
          "description": "<p>You can change the selectable behavior of this object. Hands over [false] and\nthe figure has no selection handles if you try to select them with the mouse.<br></p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The selectable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "isStrechable",
          "access": "",
          "virtual": false,
          "description": "<p>Return true if the object doesn't care about the aspect ratio.\nYou can change the height and width independent.<br></p>\n<p>Replaced with &quot;getKeepAspectRatio&quot;</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "isDeleteable",
          "access": "",
          "virtual": false,
          "description": "<p>Return false if you avoid that the user can delete your figure.\nSub class can override this method.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setDeleteable",
          "access": "",
          "virtual": false,
          "description": "<p>Set the flag if the shape is deleteable.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>enable or disable flag for the delete operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setParent",
          "access": "private",
          "virtual": false,
          "description": "<p>Set the parent of this figure.\nDon't call them manually.</p>",
          "parameters": [
            {
              "name": "parent",
              "type": "draw2d.Figure",
              "description": "<p>The new parent of this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getParent",
          "access": "",
          "virtual": false,
          "description": "<p>Get the parent of this figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": ""
          }
        },
        {
          "name": "contains",
          "access": "",
          "virtual": false,
          "description": "<p>Check to see if a figure is a descendant of another figure.\n<br>\nThe contains() method returns true if the figure provided by the argument is a descendant of this figure,\nwhether it is a direct child or nested more deeply. Otherwise, it returns false.</p>",
          "parameters": [
            {
              "name": "containedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure that may be contained by (a descendant of) this figure.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getRoot",
          "access": "",
          "virtual": false,
          "description": "<p>Get the top most parent of this figure. This can be an layout figure or parent container</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": ""
          }
        },
        {
          "name": "setComposite",
          "access": "",
          "virtual": false,
          "description": "<p>Set the assigned composite of this figure.</p>",
          "parameters": [
            {
              "name": "composite",
              "type": "draw2d.shape.composite.StrongComposite",
              "description": "<p>The assigned composite of this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getComposite",
          "access": "",
          "virtual": false,
          "description": "<p>Get the assigned composite of this figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.shape.composite.StrongComposite",
            "description": ""
          }
        },
        {
          "name": "fireEvent",
          "access": "",
          "virtual": false,
          "description": "<p>Execute all handlers and behaviors attached to the figure for the given event type.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "String",
              "description": "<p>the event to trigger</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "args",
              "type": "Object",
              "description": "<p>optional parameters for the triggered event callback</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "on",
          "access": "",
          "virtual": false,
          "description": "<p>Attach an event handler function for one or more events to the figure.\nTo remove events bound with .on(), see {@link #off}.</p>\n<p>possible events are:<br></p>\n<ul>\n  <li>click</li>\n  <li>dblclick</li>\n  <li>move</li>\n  <li>resize</li>\n  <li>timer</li>\n  <li>contextmenu</li>\n  <li>show</li>\n  <li>hide</li>\n  <li>added</li>\n  <li>removed</li>\n  <li>change:[attr]</li>\n</ul>",
          "parameters": [
            {
              "name": "event",
              "type": "String",
              "description": "<p>One or more space-separated event types</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback",
              "type": "function",
              "description": "<p>A function to execute when the event is triggered.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback.emitter",
              "type": "draw2d.Figure",
              "description": "<p>the emitter of the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback.obj",
              "type": "Object",
              "description": "<p>optional event related data</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "context",
              "type": "Object",
              "description": "<p>optional context of the function callback.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "off",
          "access": "",
          "virtual": false,
          "description": "<p>The .off() method removes event handlers that were attached with {@link #on}.<br>\nCalling .off() with no arguments removes all handlers attached to the elements.<br>\n<br>\nIf a simple event name such as &quot;move&quot; is provided, all events of that type are removed from the figure.</p>",
          "parameters": [
            {
              "name": "eventOrFunction",
              "type": [
                "String",
                "function"
              ],
              "description": "<p>the event name of the registerd function or the function itself</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getBestChild",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the best figure at the location [x,y]. It is a simple hit test. Keep in mind that only visible objects\nare returned.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>The x position.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The y position.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "figureToIgnore",
              "type": [
                "draw2d.Figure",
                "Array"
              ],
              "description": "<p>The figures which should be ignored.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        }
      ]
    },
    {
      "name": "Line",
      "namespace": "draw2d.shape.basic",
      "description": "<p>draw2d.shape.basic.Line\nThe base class for all visible elements inside a canvas.</p>",
      "extends": [
        "draw2d.Figure"
      ],
      "access": "",
      "virtual": false,
      "fires": "",
      "constructor": {
        "name": "Line",
        "description": "",
        "parameters": [],
        "examples": [
          "// Create the line and modify the start/end after inserting them into\n    // the canvas\n    let line1 =  new draw2d.shape.basic.Line({startX:30, startY:30, endX:100, endY:80});\n\n    canvas.add(line1);\n\n    // Create the line with a given start/end coordinate in the constructor\n    //\n    let line2 = new draw2d.shape.basic.Line({\n          startX:20,\n          startY:80,\n          endX:200,\n          endY:150,\n          stroke:3,\n          color:\"#1d1dff\"\n     });\n    canvas.add(line2);"
        ]
      },
      "functions": [
        {
          "name": "init",
          "access": "",
          "virtual": false,
          "description": "<p>Creates a new figure element which are not assigned to any canvas witht he given start and\nend coordinate.</p>",
          "parameters": [
            {
              "name": "attr",
              "type": "Object",
              "description": "<p>the configuration of the shape</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setOutlineColor",
          "access": "",
          "virtual": false,
          "description": "<p>Set the outline color of the line.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   outlineColor: color\n });</code></pre>",
          "parameters": [
            {
              "name": "color",
              "type": "draw2d.util.Color/String",
              "description": "<p>The new color of the line.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getOutlineColor",
          "access": "",
          "virtual": false,
          "description": "<p>The outline color of the text</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.Color",
            "description": ""
          }
        },
        {
          "name": "setOutlineStroke",
          "access": "",
          "virtual": false,
          "description": "<p>Set the outline stroke of the line to use.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   outlineStroke: w\n });</code></pre>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "<p>The new outline width of the line</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getOutlineStroke",
          "access": "",
          "virtual": false,
          "description": "<p>The used outline line width.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "onDragStart",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the drag and drop action begins. You can return [false] if you\nwant avoid that the figure can be move.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": "<p>true if the figure accepts dragging</p>"
          }
        },
        {
          "name": "onDrag",
          "access": "private",
          "virtual": false,
          "description": "<p>Don't call them manually. This will be done by the framework.<br>\nWill be called if the object are moved via drag and drop.\nSub classes can override this method to implement additional stuff. Don't forget to call\nthe super implementation via <code>this._super(dx, dy, dx2, dy2);</code></p>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>the x difference between the start of the drag drop operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>the y difference between the start of the drag drop operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dx2",
              "type": "Number",
              "description": "<p>The x diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy2",
              "type": "Number",
              "description": "<p>The y diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onDragEnd",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onClick",
          "access": "",
          "virtual": false,
          "description": "<p>Called when a user clicks on the element.</p>\n<pre><code> // Alternatively you can register for this event with\n figure.on(&quot;click&quot;, function(emitterFigure){\n     alert(&quot;clicked&quot;);\n });</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setDashArray",
          "access": "",
          "virtual": false,
          "description": "<p>Set the line style for this object.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   dasharray: dashPattern\n });</code></pre>",
          "parameters": [
            {
              "name": "dashPattern",
              "type": "String",
              "description": "<p>Can be one of this [&quot;&quot;, &quot;-&quot;, &quot;.&quot;, &quot;-.&quot;, &quot;-..&quot;, &quot;. &quot;, &quot;- &quot;, &quot;--&quot;, &quot;- .&quot;, &quot;--.&quot;, &quot;--..&quot;]</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getDashArray",
          "access": "",
          "virtual": false,
          "description": "<p>Get the line style for this object.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr(&quot;dasharray&quot;);</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setCoronaWidth",
          "access": "",
          "virtual": false,
          "description": "<p>Set the width for the click hit test of this line.</p>",
          "parameters": [
            {
              "name": "width",
              "type": "Number",
              "description": "<p>the width of the line hit test.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "createShapeElement",
          "access": "private",
          "virtual": false,
          "description": "<p>Called by the framework. Don't call them manually.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "repaint",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "toBack",
          "access": "",
          "virtual": false,
          "description": "<p>Moves the element to the background. Additional\nthe internal model changed as well.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setGlow",
          "access": "",
          "virtual": false,
          "description": "<p>Highlight the element or remove the highlighting</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   glow: flag\n });</code></pre>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>indicates glow/noGlow</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "isResizeable",
          "access": "",
          "virtual": false,
          "description": "<p>You can't drag&amp;drop the resize handles if the line not resizeable.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "",
            "description": "<p>boolean</p>"
          }
        },
        {
          "name": "setStroke",
          "access": "",
          "virtual": false,
          "description": "<p>Set the line width. This enforce a repaint of the line.\nThis method fires a <i>document dirty</i> event.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   stroke: w\n });</code></pre>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "<p>The new line width of the figure.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getStroke",
          "access": "",
          "virtual": false,
          "description": "<p>The used line width.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setColor",
          "access": "",
          "virtual": false,
          "description": "<p>Set the color of the line.\nThis method fires a <i>document dirty</i> event.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   color: color\n });</code></pre>",
          "parameters": [
            {
              "name": "color",
              "type": [
                "draw2d.util.Color",
                "String"
              ],
              "description": "<p>The new color of the line.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getColor",
          "access": "",
          "virtual": false,
          "description": "<p>Return the current paint color.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.Color",
            "description": "<p>The paint color of the line.</p>"
          }
        },
        {
          "name": "translate",
          "access": "",
          "virtual": false,
          "description": "<p>Translate the line with the given x/y offset.</p>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>The new x translate offset</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>The new y translate offset</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getBoundingBox",
          "access": "",
          "virtual": false,
          "description": "<p>return the bounding box of the line or polygon</p>\n<p>TODO: precalculate or cache this values</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "setStartPosition",
          "access": "",
          "virtual": false,
          "description": "<p>Set the start point of the line.\nThis method fires a <i>document dirty</i> event.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   startX: x,\n   startY: y\n });</code></pre>",
          "parameters": [
            {
              "name": "x",
              "type": [
                "Number",
                "draw2d.geo.Point"
              ],
              "description": "<p>the x coordinate of the start point</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y coordinate of the start point</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setStartPoint",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setEndPosition",
          "access": "",
          "virtual": false,
          "description": "<p>Set the end point of the line.\nThis method fires a <i>document dirty</i> event.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   endX: 3,\n   endY: 10\n });\n\n // or\n figure.attr({\n   end: {x:3, y:10}\n });</code></pre>",
          "parameters": [
            {
              "name": "x",
              "type": [
                "Number",
                "draw2d.geo.Point"
              ],
              "description": "<p>the x coordinate or a draw2d.geo.Point of the end point</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y coordinate of the end point</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setEndPoint",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getStartX",
          "access": "",
          "virtual": false,
          "description": "<p>Return the x coordinate of the start.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "getStartY",
          "access": "",
          "virtual": false,
          "description": "<p>Return the y coordinate of the start.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "getStartPosition",
          "access": "",
          "virtual": false,
          "description": "<p>Return the start point.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "getStartPoint",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getEndX",
          "access": "",
          "virtual": false,
          "description": "<p>Return the x coordinate of the end point</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "getEndY",
          "access": "",
          "virtual": false,
          "description": "<p>Return the y coordinate of the end point.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "getEndPosition",
          "access": "",
          "virtual": false,
          "description": "<p>Return the end point.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "getEndPoint",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getX",
          "access": "",
          "virtual": false,
          "description": "<p>The x-offset related to the parent figure or canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the x-offset to the parent figure</p>"
          }
        },
        {
          "name": "getY",
          "access": "",
          "virtual": false,
          "description": "<p>The x-offset related to the parent figure or canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the x-offset to the parent figure</p>"
          }
        },
        {
          "name": "getVertex",
          "access": "",
          "virtual": false,
          "description": "<p>Return the Vertex with the given index.</p>",
          "parameters": [
            {
              "name": "index",
              "type": "Number",
              "description": "<p>the index of the vertex to return</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setVertex",
          "access": "",
          "virtual": false,
          "description": "<p>Update the vertex at the give position with the new coordinate</p>",
          "parameters": [
            {
              "name": "index",
              "type": "Number",
              "description": "<p>the index of the vertex to update</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": [
                "Number",
                "draw2d.geo.Point"
              ],
              "description": "<p>the x coordinate or the draw2d.geo.Point object</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y coordinate or undefined of the second argument is a point</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getVertices",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the vertices of the connection</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": "<p>an draw2d.util.ArrayList of type draw2d.Point</p>"
          }
        },
        {
          "name": "setVertices",
          "access": "",
          "virtual": false,
          "description": "<p>Update the vertices of the object. The given array is copied and assigned.</p>",
          "parameters": [
            {
              "name": "vertices",
              "type": [
                "draw2d.util.ArrayList",
                "Array"
              ],
              "description": "<p>the new vertices of the polyline.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getSegments",
          "access": "",
          "virtual": false,
          "description": "<p>Return the segments of the line with {start:s, end: e} JSON array list</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "getLength",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the length of the line.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "getAngle",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the angle of the line in degree.</p>\n<pre>\n                                270Â°\n                              |\n                              |\n                              |\n                              |\n180Â° -------------------------+------------------------> +X\n                              |                        0Â°\n                              |\n                              |\n                              |\n                              V +Y\n                             90Â°\n</pre>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "createCommand",
          "access": "private",
          "virtual": false,
          "description": "<p>Returns the Command to perform the specified Request or null if the shape want cancel the\noperation or it can't operate the command.</p>",
          "parameters": [
            {
              "name": "request",
              "type": "draw2d.command.CommandType",
              "description": "<p>describes the Command being requested</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.command.Command",
            "description": "<p>null or a Command</p>"
          }
        },
        {
          "name": "hitTest",
          "access": "",
          "virtual": false,
          "description": "<p>Checks if the hands over coordinate close to the line. The 'corona' is considered\nfor this test. This means the point isn't direct on the line. Is it only close to the\nline!</p>",
          "parameters": [
            {
              "name": "px",
              "type": "Number",
              "description": "<p>the x coordinate of the test point</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "py",
              "type": "Number",
              "description": "<p>the y coordinate of the test point</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "pointProjection",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the projection of the point on the line.</p>",
          "parameters": [
            {
              "name": "px",
              "type": "Number",
              "description": "<p>the x coordinate of the test point</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "py",
              "type": "Number",
              "description": "<p>the y coordinate of the test point</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "lerp",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the point onto the line which has the 'percentage' position onto the line.</p>",
          "parameters": [
            {
              "name": "percentage",
              "type": "Number",
              "description": "<p>value between [0..1]</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "*",
            "description": ""
          }
        },
        {
          "name": "intersection",
          "access": "",
          "virtual": false,
          "description": "<p>Return all intersection points between the given Line.</p>",
          "parameters": [
            {
              "name": "other",
              "type": "draw2d.shape.basic.Line",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "getPersistentAttributes",
          "access": "",
          "virtual": false,
          "description": "<p>Return an objects with all important attributes for XML or JSON serialization</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Object",
            "description": ""
          }
        },
        {
          "name": "setPersistentAttributes",
          "access": "",
          "virtual": false,
          "description": "<p>Read all attributes from the serialized properties and transfer them into the shape.</p>",
          "parameters": [
            {
              "name": "memento",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "intersection",
          "access": "private",
          "virtual": false,
          "description": "<p>see: http://en.wikipedia.org/wiki/Line-line_intersection</p>",
          "parameters": [
            {
              "name": "a1",
              "type": "draw2d.geo.Point",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "a2",
              "type": "draw2d.geo.Point",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "b1",
              "type": "draw2d.geo.Point",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "b2",
              "type": "draw2d.geo.Point",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "hit",
          "access": "private",
          "virtual": false,
          "description": "<p>Static util function to determine is a point(px,py) on the line(x1,y1,x2,y2)\nA simple hit test.</p>",
          "parameters": [
            {
              "name": "coronaWidth",
              "type": "Number",
              "description": "<p>the accepted corona for the hit test</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "X1",
              "type": "Number",
              "description": "<p>x coordinate of the start point of the line</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "Y1",
              "type": "Number",
              "description": "<p>y coordinate of the start point of the line</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "X2",
              "type": "Number",
              "description": "<p>x coordinate of the end point of the line</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "Y2",
              "type": "Number",
              "description": "<p>y coordinate of the end point of the line</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "px",
              "type": "Number",
              "description": "<p>x coordinate of the point to test</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "py",
              "type": "Number",
              "description": "<p>y coordinate of the point to test</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "attr",
          "access": "",
          "virtual": false,
          "description": "<p>Read or set shape attributes.<br>\nWhen no value is given, reads specified attribute from the element.<br>\nWhen value is given, sets the attribute to that value.\nMultiple attributes can be set by passing an object with name-value pairs.</p>\n<pre><code>let figure = new draw2d.shape.basic.Rectangle();\nfigure.attr('x');      //=&gt; read value\nfigure.attr('x', 30);  //=&gt; set value\n\n// multiple attributes:\nfigure.attr({\n  x: 30,\n  y: 40,\n  width : 200,\n  height: 50,\n  cssClass: &quot;red_border_figure&quot;\n});\n\n// it is possible to override any method of the figure as well\n// Instead of inheritance you can just override the callback methods\n// like\n//\nfigure.attr({\n   onClick : function(){\n       alert(&quot;click&quot;);\n   }\n});\n\n// or you can pass the attr values in the constructor\n//\nlet clickFigure = new draw2d.shape.basic.Rectangle({\n   onClick : function(){\n       alert(&quot;click&quot;);\n   }\n});\n</code></pre>\n<p>Additional you can set the user defined values (userData) with this method\nusing the dot-notation. User defined values are always part of the exported\nJSON data.</p>\n<pre><code>// setting multiple attributes:\nfigure.attr({\n  &quot;userData.my.property.x&quot;: 30,\n  &quot;userData.my.property.y&quot;: 40\n});\n</code></pre>\n<p>Also set using array notation is possible for the userData:</p>\n<pre><code>// dot notation and array brackets:\nfigure.attr({\n  &quot;userData.my.names[0]&quot;: &quot;John&quot;,\n  &quot;userData.my.names[1]&quot;: &quot;Doe&quot;\n});\n</code></pre>\n<p>The Object returned should be the equivalent structured object:</p>\n<pre><code>let obj = figure.getUserData();\n</code></pre>\n<p>That is, where obj is equivalent to:</p>\n<pre><code>let obj = {\n    my:{\n        property:{\n            x: 30,\n            y: 40\n       },\n       names:  [&quot;John&quot;, &quot;Doe&quot;]\n   }\n</code></pre>\n<p>};</p>",
          "parameters": [
            {
              "name": "name",
              "type": "String/Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "value",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "pick",
          "access": "",
          "virtual": false,
          "description": "<p>Return a copy of the object, filtered to only have values for the whitelisted keys.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "select",
          "access": "private",
          "virtual": false,
          "description": "<p>Add the figure to the current selection and propagate this to all edit policies.</p>",
          "parameters": [
            {
              "name": "asPrimarySelection",
              "type": "Boolean",
              "description": "<p>true if the element should be the primary selection</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "unselect",
          "access": "private",
          "virtual": false,
          "description": "<p>Unselect the figure and propagete this event to all edit policies.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setSelectionAdapter",
          "access": "",
          "virtual": false,
          "description": "<p>Returns a function which returns the the figure which must handle the selection handling.</p>",
          "parameters": [
            {
              "name": "adapter",
              "type": "function",
              "description": "<p>function which returns the figure which handles the selection handling</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getSelectionAdapter",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "function",
            "description": ""
          }
        },
        {
          "name": "isSelected",
          "access": "",
          "virtual": false,
          "description": "<p>Returns true if the figure part of the current canvas selection.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setUserData",
          "access": "",
          "virtual": false,
          "description": "<p>Allows a user to attach (or remove) data to an element, without needing to create a custom figure or shape.\nThe data must be a valid JSON object.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   userData: object\n });</code></pre>",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getUserData",
          "access": "",
          "virtual": false,
          "description": "<p>Returns any user data set previously on the given figure by setUserData.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Object",
            "description": ""
          }
        },
        {
          "name": "getId",
          "access": "",
          "virtual": false,
          "description": "<p>Return the UUID of this element.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "setId",
          "access": "",
          "virtual": false,
          "description": "<p>Set the id of this element.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  id: newId\n});</code></pre>",
          "parameters": [
            {
              "name": "newId",
              "type": "String",
              "description": "<p>the new id for this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Return the css styling class name of the element.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "setCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Set the css class of the node.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;cssClass&quot;: &quot;red_border_figure&quot;\n });</code></pre>",
          "parameters": [
            {
              "name": "cssClass",
              "type": "String",
              "description": "<p>the new css class name of the node</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "hasCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>The method will return true if the class is assigned to the element, even if other classes also are.</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the class name to check</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "addCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Add a CSS class to the figure.<br>\nIt's important to note that this method does not replace a class. It simply adds the class,\nappending it to any which may already be assigned to the elements.</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "removeCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Remove the given css class name from the figure</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the css class name to add</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "toggleCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Add or remove the given css class name from the figure</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the class name to toggle</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setCanvas",
          "access": "",
          "virtual": false,
          "description": "<p>Set the canvas element of this figures. This can be used to determine whenever an element\nis added or removed to the canvas.</p>",
          "parameters": [
            {
              "name": "canvas",
              "type": "draw2d.Canvas",
              "description": "<p>the new parent of the figure or null</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getCanvas",
          "access": "",
          "virtual": false,
          "description": "<p>Return the current assigned canvas container.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.Canvas",
            "description": ""
          }
        },
        {
          "name": "startTimer",
          "access": "",
          "virtual": false,
          "description": "<p>Start a timer which calls the onTimer method in the given interval.</p>",
          "parameters": [
            {
              "name": "milliSeconds",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "stopTimer",
          "access": "",
          "virtual": false,
          "description": "<p>Stop the internal timer.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onTimer",
          "access": "",
          "virtual": false,
          "description": "<p>Callback method for the internal timer handling<br>\nInherit classes must override this method if they want use the timer feature.</p>\n<pre><code> // Alternatively you can register for this event with\n figure.on(&quot;timer&quot;, function(emitter){\n     alert(&quot;timer fired&quot;);\n });</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "toFront",
          "access": "",
          "virtual": false,
          "description": "<p>Moves the element so it is the closest to the viewerâ€™s eyes, on top of other elements. Additional\nthe internal model changed as well.</p>\n<p>Optional: Inserts current object in front of the given one.</p>",
          "parameters": [
            {
              "name": "figure",
              "type": "draw2d.Figure",
              "description": "<p>move current object in front of the given one.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "installEditPolicy",
          "access": "",
          "virtual": false,
          "description": "<p>Install a new edit policy to the figure. Each editpolicy is able to focus on a single editing\ntask or group of related tasks. This also allows editing behavior to be selectively reused across\ndifferent figure implementations. Also, behavior can change dynamically, such as when the layouts\nor routing methods change.</p>\n<p>Example for limited DragDrop behavior can be a draw2d.layout.constraint.RegionConstriantPolicy.</p>",
          "parameters": [
            {
              "name": "policy",
              "type": "draw2d.policy.EditPolicy",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "uninstallEditPolicy",
          "access": "",
          "virtual": false,
          "description": "<p>UnInstall the edit policy from the figure. Either the instance itself if found\nor all kind of the given edit policies.</p>",
          "parameters": [
            {
              "name": "policy",
              "type": "draw2d.policy.EditPolicy",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "add",
          "access": "",
          "virtual": false,
          "description": "<p>Add a child figure to the figure. The hands over figure doesn't support drag&amp;drop\noperations. It's only a decorator for the connection.<br>\nMainly for labels or other decorations</p>\n<pre><code>let start = new draw2d.shape.node.Start({x:80, y:150});\nstart.add(new draw2d.shape.basic.Label({text:&quot;Test Label&quot;}), new draw2d.layout.locator.TopLocator());\n\ncanvas.add( start);</code></pre>",
          "parameters": [
            {
              "name": "child",
              "type": "draw2d.Figure",
              "description": "<p>the figure to add as decoration to the connection.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>the locator for the child.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "index",
              "type": "Number",
              "description": "<p>optional index where to insert the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "remove",
          "access": "",
          "virtual": false,
          "description": "<p>Remove the child figure from this figure and the canvas</p>",
          "parameters": [
            {
              "name": "child",
              "type": "draw2d.Figure",
              "description": "<p>the figure to remove.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Object",
            "description": "<p>the removed tupple of figure/locator or null if the child isn't found</p>"
          }
        },
        {
          "name": "getChildren",
          "access": "",
          "virtual": false,
          "description": "<p>Return all children/decorations of this shape which has been added with\ndraw2d.Figure.add</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "resetChildren",
          "access": "",
          "virtual": false,
          "description": "<p>Remove all children/decorations of this shape</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getShapeElement",
          "access": "protected",
          "virtual": false,
          "description": "<p>return the current SVG shape element or create it on demand.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getTopLevelShapeElement",
          "access": "private",
          "virtual": false,
          "description": "<p>Get the top level shape element. May the figure has a set of SVG elements. In this case this\nmethod must return the top level node.<br>\nThis method is used for the toFront/toBack method to order the nodes in the correct way.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "repaint",
          "access": "private",
          "virtual": false,
          "description": "<p>propagate all attributes like color, stroke,... to the shape element</p>",
          "parameters": [
            {
              "name": "attributes",
              "type": "Object",
              "description": "<p>the style attributes for the SVG shape</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "applyTransformation",
          "access": "private",
          "virtual": false,
          "description": "<p>apply a transformation to the shape like rotation, translate,..</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getHandleBBox",
          "access": "",
          "virtual": false,
          "description": "<p>Allow dragging only when the cursor is over a specific part of the figure.\n<br>\nOverride this method to specify the bounding box of an element or a draw2d.util.ArrayList\nof draw2d.geo.Rectangle of bounding boxes used to drag the figure. The returned coordinates\nare absolute coordinates to the canvas.\n<br>\n<br>\nDefault implementation returns <b>null</b> to indicate to use the complete figures as\ndrag handle.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": [
              "draw2d.geo.Rectangle",
              "draw2d.util.ArrayList"
            ],
            "description": ""
          }
        },
        {
          "name": "onPanning",
          "access": "",
          "virtual": false,
          "description": "<p>Called by the framework if the figure returns false for the drag operation. In this\ncase we send a &quot;panning&quot; event - mouseDown + mouseMove. This is very useful for\nUI-Widget like slider, spinner,...</p>\n<pre><code> // You can alternatively register an event handler with:\n figure.on(&quot;panning&quot;, function(emitter, eventData){\n     alert(&quot;panning of the figure called&quot;);\n });</code></pre>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>the x difference between the mouse down operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>the y difference between the mouse down operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dx2",
              "type": "Number",
              "description": "<p>The x diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy2",
              "type": "Number",
              "description": "<p>The y diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onPanningEnd",
          "access": "",
          "virtual": false,
          "description": "<p>Called by the framework if the panning event of the figures ends. This happens\nafter the mous up event if the panning is active.</p>\n<pre><code> // You can alternatively register an event handler with:\n figure.on(&quot;panningEnd&quot;, function(emitter){\n     alert(&quot;panning of the figure called&quot;);\n });</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "delegateTarget",
          "access": "private",
          "virtual": false,
          "description": "<p>Called by the framework during drag&amp;drop operations if the user drag a figure over this figure</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": "<p>the figure which should receive the drop event or null if the element didn't want a drop event</p>"
          }
        },
        {
          "name": "onDragEnter",
          "access": "",
          "virtual": false,
          "description": "<p>Called by the framework during drag&amp;drop operations if the user drag a figure over this figure</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onDragLeave",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the DragDrop object leaving the current hover figure.</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onDrop",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the user drop this element onto the dropTarget. This event is ONLY fired if the\nshape return &quot;this&quot; in the {@link draw2d.Figure#onDragEnter} method.</p>",
          "parameters": [
            {
              "name": "dropTarget",
              "type": "draw2d.Figure",
              "description": "<p>The drop target.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onCatch",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the user dropped an figure onto this element. This event is ONLY fired if the\nin the canvas installed {@link draw2d.policy.canvas.DropInterceptorPolicy} allow this.</p>",
          "parameters": [
            {
              "name": "droppedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The dropped figure.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onMouseEnter",
          "access": "",
          "virtual": false,
          "description": "<p>Callback method for the mouse enter event. Usefull for mouse hover-effects.\nOverride this method for your own effects. Don't call them manually.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onMouseLeave",
          "access": "",
          "virtual": false,
          "description": "<p>Callback method for the mouse leave event. Useful for mouse hover-effects.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onDoubleClick",
          "access": "",
          "virtual": false,
          "description": "<p>Called when a user dbl clicks on the element</p>\n<pre><code> // Alternatively you can register an event with:\n //\n figure.on(&quot;dblclick&quot;, function(emitter, event){\n     alert(&quot;user dbl click on the figure&quot;);\n });</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onContextMenu",
          "access": "",
          "virtual": false,
          "description": "<p>called by the framework if the figure should show the context menu.<br>\nThe strategy to show the context menu depends on the platform. Either looong press or\nright click with the mouse.</p>\n<pre><code> // Alternatively you register for this event with:\n figure.on(&quot;contextmenu&quot;, function(emitter, event){\n     alert(&quot;user press the right mouse button for a context menu&quot;);\n });</code></pre>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate to show the menu</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate to show the menu</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setAlpha",
          "access": "",
          "virtual": false,
          "description": "<p>Set the alpha blending of this figure.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;alpha&quot;: percent\n });\n\n // ...or:\n figure.attr({\n   &quot;opacity&quot;: percent\n });</code></pre>",
          "parameters": [
            {
              "name": "percent",
              "type": "Number",
              "description": "<p>value between [0..1].</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getAlpha",
          "access": "",
          "virtual": false,
          "description": "<p>Return the alpha blending of the figure</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the current alpha blending</p>"
          }
        },
        {
          "name": "setRotationAngle",
          "access": "",
          "virtual": false,
          "description": "<p>Set the rotation angle in degree [0..356]<br>\n<b>Only steps of 90 degree is working well</b>\n<br>\n// Alternatively you can use the attr method:\nfigure.attr({\nangle: angle\n});</p>",
          "parameters": [
            {
              "name": "angle",
              "type": "Number",
              "description": "<p>the rotation angle in degree</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getRotationAngle",
          "access": "",
          "virtual": false,
          "description": "<p>return the rotation angle of the figure in degree of [0..356].</p>\n<br>\n<b>NOTE: this method is pre alpha and not for production. Only steps of 90 degree is working well</b>\n<br>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setVisible",
          "access": "",
          "virtual": false,
          "description": "<p>Show/hide the element. The element didn't receive any mouse events (click, dblclick) if you hide the\nfigure.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   visible: flag\n });</code></pre>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "duration",
              "type": "Number",
              "description": "<p>the optional number for the fadeIn /fadeOut of the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "isVisible",
          "access": "",
          "virtual": false,
          "description": "<p>Return true if the figure visible.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setKeepAspectRatio",
          "access": "",
          "virtual": false,
          "description": "<p>Guarantee, that the figure width/height will not be distorted. Applicable before calling setDimension().\nIt is false by default.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>boolean flag if the figure should respect the aspect ratio</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getKeepAspectRatio",
          "access": "",
          "virtual": false,
          "description": "<p>Return the flag if the shape keep the aspect ratio.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getZOrder",
          "access": "",
          "virtual": false,
          "description": "<p>Return the current z-index of the element. Currently this is an expensive method. The index will be calculated\nall the time. Caching is not implemented at the moment.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setCanSnapToHelper",
          "access": "",
          "virtual": false,
          "description": "<p>Set the flag if this object can snap to grid or geometry.\nA window of dialog should set this flag to false.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The snap to grid/geometry enable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getCanSnapToHelper",
          "access": "",
          "virtual": false,
          "description": "<p>Returns true if the figure can snap to any helper like a grid, guide, geometrie\nor something else.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "getSnapToGridAnchor",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "setSnapToGridAnchor",
          "access": "",
          "virtual": false,
          "description": "<p>Set the hot spot for all snapTo### operations.</p>",
          "parameters": [
            {
              "name": "point",
              "type": "draw2d.geo.Point",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setWidth",
          "access": "",
          "virtual": false,
          "description": "<p>Set the width of the figure and consider the minWidth attribute</p>",
          "parameters": [
            {
              "name": "width",
              "type": "Number",
              "description": "<p>the new width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getWidth",
          "access": "",
          "virtual": false,
          "description": "<p>The current width of the figure.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setHeight",
          "access": "",
          "virtual": false,
          "description": "<p>Set the heigth of the figure and consider the minWidth attribute</p>",
          "parameters": [
            {
              "name": "height",
              "type": "Number",
              "description": "<p>the new height of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getHeight",
          "access": "",
          "virtual": false,
          "description": "<p>The current height of the figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "getMinWidth",
          "access": "",
          "virtual": false,
          "description": "<p>This value is relevant for the interactive resize of the figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>Returns the min. width of this object.</p>"
          }
        },
        {
          "name": "setMinWidth",
          "access": "",
          "virtual": false,
          "description": "<p>Set the minimum width of this figure</p>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getMinHeight",
          "access": "",
          "virtual": false,
          "description": "<p>This value is relevant for the interactive resize of the figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>Returns the min. height of this object.</p>"
          }
        },
        {
          "name": "setMinHeight",
          "access": "",
          "virtual": false,
          "description": "<p>Set the minimum height of the figure.</p>",
          "parameters": [
            {
              "name": "h",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setX",
          "access": "",
          "virtual": false,
          "description": "<p>the the x-offset related to the parent figure or canvas</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the new x offset of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setY",
          "access": "",
          "virtual": false,
          "description": "<p>the the y-offset related to the parent figure or canvas</p>",
          "parameters": [
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the new x offset of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getAbsoluteX",
          "access": "",
          "virtual": false,
          "description": "<p>The x-offset related to the canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the x-offset to the canvas</p>"
          }
        },
        {
          "name": "getAbsoluteY",
          "access": "",
          "virtual": false,
          "description": "<p>The y-offset related to the canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>The y-offset to the canvas.</p>"
          }
        },
        {
          "name": "getAbsolutePosition",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the absolute y-position of the port.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getAbsoluteBounds",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the absolute y-position of the port.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "setPosition",
          "access": "",
          "virtual": false,
          "description": "<p>Set the position of the object.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   x: x,\n   y: y\n });</code></pre>",
          "parameters": [
            {
              "name": "x",
              "type": [
                "Number",
                "draw2d.geo.Point"
              ],
              "description": "<p>The new x coordinate of the figure or the x/y coordinate if it is an draw2d.geo.Point</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The new y coordinate of the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPosition",
          "access": "",
          "virtual": false,
          "description": "<p>Get the current position of the figure</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "setDimension",
          "access": "",
          "virtual": false,
          "description": "<p>Set the new width and height of the figure.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n    width:  w,\n    height: h\n });</code></pre>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "<p>The new width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "h",
              "type": "Number",
              "description": "<p>The new height of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setBoundingBox",
          "access": "",
          "virtual": false,
          "description": "<p>Set the bounding box of the figure</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   width: w,\n   height: h,\n   x: x,\n   y: y\n });\n\n // or\n figure.attr({\n   boundingBox: {x:1, y:100, width:30, height:30}\n });</code></pre>",
          "parameters": [
            {
              "name": "rect",
              "type": "draw2d.geo.Rectangle",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setDraggable",
          "access": "",
          "virtual": false,
          "description": "<p>Switch on/off the drag drop behaviour of this object</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The new drag drop indicator</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "isDraggable",
          "access": "",
          "virtual": false,
          "description": "<p>Get the Drag drop enable flag</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": "<p>The new drag drop indicator</p>"
          }
        },
        {
          "name": "setResizeable",
          "access": "",
          "virtual": false,
          "description": "<p>You can change the resizeable behaviour of this object. Hands over [false] and\nthe figure has no resizehandles if you select them with the mouse.<br></p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   resizeable: flag\n });</code></pre>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The resizeable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "isSelectable",
          "access": "",
          "virtual": false,
          "description": "<p>Indicates whenever the element is selectable by user interaction or API.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setSelectable",
          "access": "",
          "virtual": false,
          "description": "<p>You can change the selectable behavior of this object. Hands over [false] and\nthe figure has no selection handles if you try to select them with the mouse.<br></p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The selectable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "isStrechable",
          "access": "",
          "virtual": false,
          "description": "<p>Return true if the object doesn't care about the aspect ratio.\nYou can change the height and width independent.<br></p>\n<p>Replaced with &quot;getKeepAspectRatio&quot;</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "isDeleteable",
          "access": "",
          "virtual": false,
          "description": "<p>Return false if you avoid that the user can delete your figure.\nSub class can override this method.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setDeleteable",
          "access": "",
          "virtual": false,
          "description": "<p>Set the flag if the shape is deleteable.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>enable or disable flag for the delete operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setParent",
          "access": "private",
          "virtual": false,
          "description": "<p>Set the parent of this figure.\nDon't call them manually.</p>",
          "parameters": [
            {
              "name": "parent",
              "type": "draw2d.Figure",
              "description": "<p>The new parent of this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getParent",
          "access": "",
          "virtual": false,
          "description": "<p>Get the parent of this figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": ""
          }
        },
        {
          "name": "contains",
          "access": "",
          "virtual": false,
          "description": "<p>Check to see if a figure is a descendant of another figure.\n<br>\nThe contains() method returns true if the figure provided by the argument is a descendant of this figure,\nwhether it is a direct child or nested more deeply. Otherwise, it returns false.</p>",
          "parameters": [
            {
              "name": "containedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure that may be contained by (a descendant of) this figure.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getRoot",
          "access": "",
          "virtual": false,
          "description": "<p>Get the top most parent of this figure. This can be an layout figure or parent container</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": ""
          }
        },
        {
          "name": "setComposite",
          "access": "",
          "virtual": false,
          "description": "<p>Set the assigned composite of this figure.</p>",
          "parameters": [
            {
              "name": "composite",
              "type": "draw2d.shape.composite.StrongComposite",
              "description": "<p>The assigned composite of this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getComposite",
          "access": "",
          "virtual": false,
          "description": "<p>Get the assigned composite of this figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.shape.composite.StrongComposite",
            "description": ""
          }
        },
        {
          "name": "fireEvent",
          "access": "",
          "virtual": false,
          "description": "<p>Execute all handlers and behaviors attached to the figure for the given event type.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "String",
              "description": "<p>the event to trigger</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "args",
              "type": "Object",
              "description": "<p>optional parameters for the triggered event callback</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "on",
          "access": "",
          "virtual": false,
          "description": "<p>Attach an event handler function for one or more events to the figure.\nTo remove events bound with .on(), see {@link #off}.</p>\n<p>possible events are:<br></p>\n<ul>\n  <li>click</li>\n  <li>dblclick</li>\n  <li>move</li>\n  <li>resize</li>\n  <li>timer</li>\n  <li>contextmenu</li>\n  <li>show</li>\n  <li>hide</li>\n  <li>added</li>\n  <li>removed</li>\n  <li>change:[attr]</li>\n</ul>",
          "parameters": [
            {
              "name": "event",
              "type": "String",
              "description": "<p>One or more space-separated event types</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback",
              "type": "function",
              "description": "<p>A function to execute when the event is triggered.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback.emitter",
              "type": "draw2d.Figure",
              "description": "<p>the emitter of the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback.obj",
              "type": "Object",
              "description": "<p>optional event related data</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "context",
              "type": "Object",
              "description": "<p>optional context of the function callback.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "off",
          "access": "",
          "virtual": false,
          "description": "<p>The .off() method removes event handlers that were attached with {@link #on}.<br>\nCalling .off() with no arguments removes all handlers attached to the elements.<br>\n<br>\nIf a simple event name such as &quot;move&quot; is provided, all events of that type are removed from the figure.</p>",
          "parameters": [
            {
              "name": "eventOrFunction",
              "type": [
                "String",
                "function"
              ],
              "description": "<p>the event name of the registerd function or the function itself</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getBestChild",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the best figure at the location [x,y]. It is a simple hit test. Keep in mind that only visible objects\nare returned.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>The x position.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The y position.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "figureToIgnore",
              "type": [
                "draw2d.Figure",
                "Array"
              ],
              "description": "<p>The figures which should be ignored.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "clone",
          "access": "",
          "virtual": false,
          "description": "<p>Clone the figure. <br>\nYou must override and implement the methods <b>getPersistentAttributes</b> and <b>setPersistentAttributes</b> for your custom\nfigures if the have special attributes.</p>\n<p>The clone() method performs a deep copy of the object, meaning that it copies the children, ports and decorations\nper default. You can control the clone procedure with the 'cloneMetaData'.</p>",
          "parameters": [
            {
              "name": "cloneMetaData",
              "type": "Object",
              "description": "<p>controls the clone procedure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "cloneMetaData.excludeChildren",
              "type": "Boolean",
              "description": "<p>set it to true if you want exclude the children.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        }
      ]
    },
    {
      "name": "LineEndResizeHandle",
      "namespace": "draw2d.shape.basic",
      "description": "<p>draw2d.shape.basic.LineEndResizeHandle</p>\n<p>Selection handle for connections and normal lines.</p>",
      "extends": [
        "draw2d.shape.basic.LineResizeHandle"
      ],
      "access": "",
      "virtual": false,
      "fires": "",
      "constructor": {
        "name": "LineEndResizeHandle",
        "description": "",
        "parameters": [],
        "examples": []
      },
      "functions": [
        {
          "name": "init",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getRelatedPort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the Port assigned to this ResizeHandle if the line is an instance of draw2d.Connection</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.Port",
            "description": ""
          }
        },
        {
          "name": "getOppositePort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the peer Port assigned to this ResizeHandle if the line is an instance of draw2d.Connection</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.Port",
            "description": ""
          }
        },
        {
          "name": "onDrag",
          "access": "private",
          "virtual": false,
          "description": "<p>Called from the framework during a drag&amp;drop operation</p>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>the x difference between the start of the drag drop operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>the y difference between the start of the drag drop operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dx2",
              "type": "Number",
              "description": "<p>The x diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy2",
              "type": "Number",
              "description": "<p>The y diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "onDrop",
          "access": "private",
          "virtual": false,
          "description": "<p>Resizehandle has been drop on a InputPort/OutputPort.</p>",
          "parameters": [
            {
              "name": "dropTarget",
              "type": "draw2d.Figure",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "relocate",
          "access": "",
          "virtual": false,
          "description": "<p>Controls the location of the resize handle</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getOwner",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the current used SVG as string</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "getIndex",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the index of the selection. In case of a PlyLine the count is dynamic.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "createShapeElement",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setBackgroundColor",
          "access": "",
          "virtual": false,
          "description": "<p>Set the new background color of the figure. It is possible to hands over\n<code>null</code> to set the background transparent.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;bgColor&quot;: &quot;#f0f0f0&quot;\n });</code></pre>",
          "parameters": [
            {
              "name": "color",
              "type": [
                "String",
                "draw2d.util.Color"
              ],
              "description": "<p>The new background color of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "repaint",
          "access": "private",
          "virtual": false,
          "description": "<p>propagate all attributes like color, stroke,... to the shape element</p>",
          "parameters": [
            {
              "name": "attributes",
              "type": "Object",
              "description": "<p>the style attributes for the SVG shape</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onDragStart",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the drag and drop action begins. You can return [false] if you\nwant avoid the that the figure can be move.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onDragEnd",
          "access": "",
          "virtual": false,
          "description": "<p>Called after a drag and drop action.<br>\nSub classes can override this method to implement additional stuff. Don't forget to call the super implementation via <code>this._super();</code></p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "supportsSnapToHelper",
          "access": "",
          "virtual": false,
          "description": "<p>The LineResizeHandle didn't support the SnapToHelper feature if the\ncorresponding object is an Connection. A Connection is always bounded to\nPort. In this case it makes no sense to use a Grid or Geometry for snapping.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": "<p>return false if the corresponding object didn't support snapTo</p>"
          }
        },
        {
          "name": "show",
          "access": "",
          "virtual": false,
          "description": "<p>Show the ResizeHandle and add it to the canvas.<br>\nAdditional bring it in to the front of other figures.</p>",
          "parameters": [
            {
              "name": "canvas",
              "type": "draw2d.Canvas",
              "description": "<p>the canvas to use</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-position</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-position</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "hide",
          "access": "",
          "virtual": false,
          "description": "<p>Hide the resize handle and remove it from the canvas.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onKeyDown",
          "access": "",
          "virtual": false,
          "description": "<p>Override this method and redirect them to the canvas. A ResizeHandle didn't support\nKeyboard interaction at the moment.</p>",
          "parameters": [
            {
              "name": "keyCode",
              "type": "Number",
              "description": "<p>the id of the pressed key</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrl",
              "type": "Boolean",
              "description": "<p>true if the user has pressed the CTRL/STRG key as well.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setAlpha",
          "access": "",
          "virtual": false,
          "description": "<p>the the opacity of the element.</p>",
          "parameters": [
            {
              "name": "percent",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setDiameter",
          "access": "",
          "virtual": false,
          "description": "<p>Set the diameter of the circle. The center of the circle will be retained.</p>",
          "parameters": [
            {
              "name": "d",
              "type": "Number",
              "description": "<p>The new diameter of the circle.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getDiameter",
          "access": "",
          "virtual": false,
          "description": "<p>Get the diameter of the circle.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setRadius",
          "access": "",
          "virtual": false,
          "description": "<p>Set the radius of the circle. The center of the circle will be retained.</p>",
          "parameters": [
            {
              "name": "d",
              "type": "Number",
              "description": "<p>The new radius of the circle.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPersistentAttributes",
          "access": "",
          "virtual": false,
          "description": "<p>Return an objects with all important attributes for XML or JSON serialization</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Object",
            "description": ""
          }
        },
        {
          "name": "getCenter",
          "access": "",
          "virtual": false,
          "description": "<p>Get the center of the figure</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setCenter",
          "access": "",
          "virtual": false,
          "description": "<p>Set the center of the figure.</p>",
          "parameters": [
            {
              "name": "x",
              "type": [
                "Number",
                "draw2d.geo.Point"
              ],
              "description": "<p>the new x coordinate of the center or a draw2d.geo.Point object with the center</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y coordinate of the new center of the first argument isn't a draw2d.geo.Point object</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "intersectionWithLine",
          "access": "",
          "virtual": false,
          "description": "<p>NOTE: Rotation will need to be added to this function</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getRadius",
          "access": "",
          "virtual": false,
          "description": "<p>Get the corner radius of the edges.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setDashArray",
          "access": "",
          "virtual": false,
          "description": "<p>Set the line style for this object.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   dash: dashPattern\n });</code></pre>",
          "parameters": [
            {
              "name": "dash",
              "type": "String",
              "description": "<p>can be one of this [&quot;&quot;, &quot;-&quot;, &quot;.&quot;, &quot;-.&quot;, &quot;-..&quot;, &quot;. &quot;, &quot;- &quot;, &quot;--&quot;, &quot;- .&quot;, &quot;--.&quot;, &quot;--..&quot;]</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getDashArray",
          "access": "",
          "virtual": false,
          "description": "<p>Get the line style for this object.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr(&quot;dash&quot;);</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setGlow",
          "access": "",
          "virtual": false,
          "description": "<p>Highlight the element or remove the highlighting</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>indicates glow/noGlow</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getBackgroundColor",
          "access": "",
          "virtual": false,
          "description": "<p>The current used background color.</p>\n<pre><code> // Alternatively you can use the attr method:\n var color =figure.attr(&quot;bgColor&quot;);</code></pre>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.Color",
            "description": ""
          }
        },
        {
          "name": "setStroke",
          "access": "",
          "virtual": false,
          "description": "<p>Set the stroke to use.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;stroke&quot;: 2\n });</code></pre>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "<p>The new line width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getStroke",
          "access": "",
          "virtual": false,
          "description": "<p>The used line width.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setColor",
          "access": "",
          "virtual": false,
          "description": "<p>Set the foreground color of the figure.\nThis method fires a <i>document dirty</i> event.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;color&quot;: &quot;#f3f3f3&quot;\n });</code></pre>",
          "parameters": [
            {
              "name": "color",
              "type": [
                "String",
                "draw2d.util.Color"
              ],
              "description": "<p>The new color of the line.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getColor",
          "access": "",
          "virtual": false,
          "description": "<p>Get the current used foreground color</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.Color",
            "description": ""
          }
        },
        {
          "name": "setPersistentAttributes",
          "access": "",
          "virtual": false,
          "description": "<p>Read all attributes from the serialized properties and transfer them into the shape.</p>",
          "parameters": [
            {
              "name": "memento",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setPersistPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Indicates if the node should read/write the ports via the draw2d.Figure.getPersistenAttributes\nto the JSON object</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPersistPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Indicates if the figure writes the ports to the JSON structore too.\nDefault is &quot;false&quot;</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "toFront",
          "access": "",
          "virtual": false,
          "description": "<p>Moves the element so it is the closest to the viewerâ€™s eyes, on top of other elements. Additional\nthe internal model changed as well.</p>\n<p>Optional: Inserts current object in front of the given one.</p>",
          "parameters": [
            {
              "name": "figure",
              "type": "draw2d.Figure",
              "description": "<p>move current object in front of the given one.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "toBack",
          "access": "",
          "virtual": false,
          "description": "<p>Moves the element to the background. Additional\nthe internal model changed as well.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setVisible",
          "access": "",
          "virtual": false,
          "description": "<p>Show/hide the element. The element didn't receive any mouse events (click, dblclick) if you hide the\nfigure.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   visible: flag\n });</code></pre>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "duration",
              "type": "Number",
              "description": "<p>the optional number for the fadeIn /fadeOut of the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Return all ports of the node. The results contains\nall ports of the children too per default. Set <b>recursive</b>\nto false to retrieve direct assigned ports only.</p>",
          "parameters": [
            {
              "name": "recursive",
              "type": "Boolean",
              "description": "<p>indicates if the method should return children ports too. Default is <b>true</b></p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "getInputPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Return all input ports of the node.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "getOutputPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Return all output ports of the node.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "clone",
          "access": "",
          "virtual": false,
          "description": "<p>Clone the figure. <br>\nYou must override and implement the methods <b>getPersistentAttributes</b> and <b>setPersistentAttributes</b> for your custom\nfigures if the have special attributes.</p>\n<p>The clone() method performs a deep copy of the object, meaning that it copies the children, ports and decorations\nper default. You can control the clone procedure with the 'cloneMetaData'.</p>",
          "parameters": [
            {
              "name": "cloneMetaData",
              "type": "Object",
              "description": "<p>controls the clone procedure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "cloneMetaData.excludeChildren",
              "type": "Boolean",
              "description": "<p>set it to true if you want exclude the children.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "cloneMetaData.excludePorts",
              "type": "Boolean",
              "description": "<p>set it to true if you want exclude the ports of the node.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portName",
              "type": "String",
              "description": "<p>The name of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.Port",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getInputPort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the input port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.InputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getOutputPort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the output port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or the numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.OutputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getHybridPort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the input port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.InputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "addPort",
          "access": "",
          "virtual": false,
          "description": "<p>Add a port to this node at the given position.<br></p>",
          "parameters": [
            {
              "name": "port",
              "type": "draw2d.Port",
              "description": "<p>The new port to add.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>The layout for the port.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "resetPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Remove all ports of this node</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "removePort",
          "access": "",
          "virtual": false,
          "description": "<p>Removes a port and all related connections from this node.<br></p>",
          "parameters": [
            {
              "name": "port",
              "type": "draw2d.Port",
              "description": "<p>The port to remove.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "createPort",
          "access": "",
          "virtual": false,
          "description": "<p>Create a standard Port for this element. Inherited class can override this\nmethod to create its own type of ports.</p>",
          "parameters": [
            {
              "name": "type",
              "type": "String",
              "description": "<p>the type of the requested port. possible [&quot;input&quot;, &quot;output&quot;]</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>the layouter to use for this port</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getConnections",
          "access": "",
          "virtual": false,
          "description": "<p>Return all connections related to this node.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "setCanvas",
          "access": "",
          "virtual": false,
          "description": "<p>Set the canvas element of this figures. This can be used to determine whenever an element\nis added or removed to the canvas.</p>",
          "parameters": [
            {
              "name": "canvas",
              "type": "draw2d.Canvas",
              "description": "<p>the new parent of the figure or null</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setRotationAngle",
          "access": "",
          "virtual": false,
          "description": "<p>Set the rotation angle in degree [0..356]<br>\n<b>Only steps of 90 degree is working well</b>\n<br>\n// Alternatively you can use the attr method:\nfigure.attr({\nangle: angle\n});</p>",
          "parameters": [
            {
              "name": "angle",
              "type": "Number",
              "description": "<p>the rotation angle in degree</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setDimension",
          "access": "",
          "virtual": false,
          "description": "<p>Set the new width and height of the figure.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n    width:  w,\n    height: h\n });</code></pre>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "<p>The new width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "h",
              "type": "Number",
              "description": "<p>The new height of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onPortValueChanged",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the value of any port has been changed</p>",
          "parameters": [
            {
              "name": "relatedPort",
              "type": "draw2d.Port",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "layoutPorts",
          "access": "private",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "createCommand",
          "access": "private",
          "virtual": false,
          "description": "<p>Returns the Command to perform the specified Request or null.</p>",
          "parameters": [
            {
              "name": "request",
              "type": "draw2d.command.CommandType",
              "description": "<p>describes the Command being requested</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.command.Command",
            "description": "<p>null or a Command</p>"
          }
        },
        {
          "name": "attr",
          "access": "",
          "virtual": false,
          "description": "<p>Read or set shape attributes.<br>\nWhen no value is given, reads specified attribute from the element.<br>\nWhen value is given, sets the attribute to that value.\nMultiple attributes can be set by passing an object with name-value pairs.</p>\n<pre><code>let figure = new draw2d.shape.basic.Rectangle();\nfigure.attr('x');      //=&gt; read value\nfigure.attr('x', 30);  //=&gt; set value\n\n// multiple attributes:\nfigure.attr({\n  x: 30,\n  y: 40,\n  width : 200,\n  height: 50,\n  cssClass: &quot;red_border_figure&quot;\n});\n\n// it is possible to override any method of the figure as well\n// Instead of inheritance you can just override the callback methods\n// like\n//\nfigure.attr({\n   onClick : function(){\n       alert(&quot;click&quot;);\n   }\n});\n\n// or you can pass the attr values in the constructor\n//\nlet clickFigure = new draw2d.shape.basic.Rectangle({\n   onClick : function(){\n       alert(&quot;click&quot;);\n   }\n});\n</code></pre>\n<p>Additional you can set the user defined values (userData) with this method\nusing the dot-notation. User defined values are always part of the exported\nJSON data.</p>\n<pre><code>// setting multiple attributes:\nfigure.attr({\n  &quot;userData.my.property.x&quot;: 30,\n  &quot;userData.my.property.y&quot;: 40\n});\n</code></pre>\n<p>Also set using array notation is possible for the userData:</p>\n<pre><code>// dot notation and array brackets:\nfigure.attr({\n  &quot;userData.my.names[0]&quot;: &quot;John&quot;,\n  &quot;userData.my.names[1]&quot;: &quot;Doe&quot;\n});\n</code></pre>\n<p>The Object returned should be the equivalent structured object:</p>\n<pre><code>let obj = figure.getUserData();\n</code></pre>\n<p>That is, where obj is equivalent to:</p>\n<pre><code>let obj = {\n    my:{\n        property:{\n            x: 30,\n            y: 40\n       },\n       names:  [&quot;John&quot;, &quot;Doe&quot;]\n   }\n</code></pre>\n<p>};</p>",
          "parameters": [
            {
              "name": "name",
              "type": "String/Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "value",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "pick",
          "access": "",
          "virtual": false,
          "description": "<p>Return a copy of the object, filtered to only have values for the whitelisted keys.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "select",
          "access": "private",
          "virtual": false,
          "description": "<p>Add the figure to the current selection and propagate this to all edit policies.</p>",
          "parameters": [
            {
              "name": "asPrimarySelection",
              "type": "Boolean",
              "description": "<p>true if the element should be the primary selection</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "unselect",
          "access": "private",
          "virtual": false,
          "description": "<p>Unselect the figure and propagete this event to all edit policies.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setSelectionAdapter",
          "access": "",
          "virtual": false,
          "description": "<p>Returns a function which returns the the figure which must handle the selection handling.</p>",
          "parameters": [
            {
              "name": "adapter",
              "type": "function",
              "description": "<p>function which returns the figure which handles the selection handling</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getSelectionAdapter",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "function",
            "description": ""
          }
        },
        {
          "name": "isSelected",
          "access": "",
          "virtual": false,
          "description": "<p>Returns true if the figure part of the current canvas selection.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setUserData",
          "access": "",
          "virtual": false,
          "description": "<p>Allows a user to attach (or remove) data to an element, without needing to create a custom figure or shape.\nThe data must be a valid JSON object.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   userData: object\n });</code></pre>",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getUserData",
          "access": "",
          "virtual": false,
          "description": "<p>Returns any user data set previously on the given figure by setUserData.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Object",
            "description": ""
          }
        },
        {
          "name": "getId",
          "access": "",
          "virtual": false,
          "description": "<p>Return the UUID of this element.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "setId",
          "access": "",
          "virtual": false,
          "description": "<p>Set the id of this element.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  id: newId\n});</code></pre>",
          "parameters": [
            {
              "name": "newId",
              "type": "String",
              "description": "<p>the new id for this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Return the css styling class name of the element.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "setCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Set the css class of the node.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;cssClass&quot;: &quot;red_border_figure&quot;\n });</code></pre>",
          "parameters": [
            {
              "name": "cssClass",
              "type": "String",
              "description": "<p>the new css class name of the node</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "hasCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>The method will return true if the class is assigned to the element, even if other classes also are.</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the class name to check</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "addCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Add a CSS class to the figure.<br>\nIt's important to note that this method does not replace a class. It simply adds the class,\nappending it to any which may already be assigned to the elements.</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "removeCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Remove the given css class name from the figure</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the css class name to add</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "toggleCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Add or remove the given css class name from the figure</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the class name to toggle</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getCanvas",
          "access": "",
          "virtual": false,
          "description": "<p>Return the current assigned canvas container.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.Canvas",
            "description": ""
          }
        },
        {
          "name": "startTimer",
          "access": "",
          "virtual": false,
          "description": "<p>Start a timer which calls the onTimer method in the given interval.</p>",
          "parameters": [
            {
              "name": "milliSeconds",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "stopTimer",
          "access": "",
          "virtual": false,
          "description": "<p>Stop the internal timer.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onTimer",
          "access": "",
          "virtual": false,
          "description": "<p>Callback method for the internal timer handling<br>\nInherit classes must override this method if they want use the timer feature.</p>\n<pre><code> // Alternatively you can register for this event with\n figure.on(&quot;timer&quot;, function(emitter){\n     alert(&quot;timer fired&quot;);\n });</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "installEditPolicy",
          "access": "",
          "virtual": false,
          "description": "<p>Install a new edit policy to the figure. Each editpolicy is able to focus on a single editing\ntask or group of related tasks. This also allows editing behavior to be selectively reused across\ndifferent figure implementations. Also, behavior can change dynamically, such as when the layouts\nor routing methods change.</p>\n<p>Example for limited DragDrop behavior can be a draw2d.layout.constraint.RegionConstriantPolicy.</p>",
          "parameters": [
            {
              "name": "policy",
              "type": "draw2d.policy.EditPolicy",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "uninstallEditPolicy",
          "access": "",
          "virtual": false,
          "description": "<p>UnInstall the edit policy from the figure. Either the instance itself if found\nor all kind of the given edit policies.</p>",
          "parameters": [
            {
              "name": "policy",
              "type": "draw2d.policy.EditPolicy",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "add",
          "access": "",
          "virtual": false,
          "description": "<p>Add a child figure to the figure. The hands over figure doesn't support drag&amp;drop\noperations. It's only a decorator for the connection.<br>\nMainly for labels or other decorations</p>\n<pre><code>let start = new draw2d.shape.node.Start({x:80, y:150});\nstart.add(new draw2d.shape.basic.Label({text:&quot;Test Label&quot;}), new draw2d.layout.locator.TopLocator());\n\ncanvas.add( start);</code></pre>",
          "parameters": [
            {
              "name": "child",
              "type": "draw2d.Figure",
              "description": "<p>the figure to add as decoration to the connection.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>the locator for the child.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "index",
              "type": "Number",
              "description": "<p>optional index where to insert the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "remove",
          "access": "",
          "virtual": false,
          "description": "<p>Remove the child figure from this figure and the canvas</p>",
          "parameters": [
            {
              "name": "child",
              "type": "draw2d.Figure",
              "description": "<p>the figure to remove.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Object",
            "description": "<p>the removed tupple of figure/locator or null if the child isn't found</p>"
          }
        },
        {
          "name": "getChildren",
          "access": "",
          "virtual": false,
          "description": "<p>Return all children/decorations of this shape which has been added with\ndraw2d.Figure.add</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "resetChildren",
          "access": "",
          "virtual": false,
          "description": "<p>Remove all children/decorations of this shape</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getShapeElement",
          "access": "protected",
          "virtual": false,
          "description": "<p>return the current SVG shape element or create it on demand.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getTopLevelShapeElement",
          "access": "private",
          "virtual": false,
          "description": "<p>Get the top level shape element. May the figure has a set of SVG elements. In this case this\nmethod must return the top level node.<br>\nThis method is used for the toFront/toBack method to order the nodes in the correct way.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "applyTransformation",
          "access": "private",
          "virtual": false,
          "description": "<p>apply a transformation to the shape like rotation, translate,..</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getHandleBBox",
          "access": "",
          "virtual": false,
          "description": "<p>Allow dragging only when the cursor is over a specific part of the figure.\n<br>\nOverride this method to specify the bounding box of an element or a draw2d.util.ArrayList\nof draw2d.geo.Rectangle of bounding boxes used to drag the figure. The returned coordinates\nare absolute coordinates to the canvas.\n<br>\n<br>\nDefault implementation returns <b>null</b> to indicate to use the complete figures as\ndrag handle.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": [
              "draw2d.geo.Rectangle",
              "draw2d.util.ArrayList"
            ],
            "description": ""
          }
        },
        {
          "name": "onPanning",
          "access": "",
          "virtual": false,
          "description": "<p>Called by the framework if the figure returns false for the drag operation. In this\ncase we send a &quot;panning&quot; event - mouseDown + mouseMove. This is very useful for\nUI-Widget like slider, spinner,...</p>\n<pre><code> // You can alternatively register an event handler with:\n figure.on(&quot;panning&quot;, function(emitter, eventData){\n     alert(&quot;panning of the figure called&quot;);\n });</code></pre>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>the x difference between the mouse down operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>the y difference between the mouse down operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dx2",
              "type": "Number",
              "description": "<p>The x diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy2",
              "type": "Number",
              "description": "<p>The y diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onPanningEnd",
          "access": "",
          "virtual": false,
          "description": "<p>Called by the framework if the panning event of the figures ends. This happens\nafter the mous up event if the panning is active.</p>\n<pre><code> // You can alternatively register an event handler with:\n figure.on(&quot;panningEnd&quot;, function(emitter){\n     alert(&quot;panning of the figure called&quot;);\n });</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "delegateTarget",
          "access": "private",
          "virtual": false,
          "description": "<p>Called by the framework during drag&amp;drop operations if the user drag a figure over this figure</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": "<p>the figure which should receive the drop event or null if the element didn't want a drop event</p>"
          }
        },
        {
          "name": "onDragEnter",
          "access": "",
          "virtual": false,
          "description": "<p>Called by the framework during drag&amp;drop operations if the user drag a figure over this figure</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onDragLeave",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the DragDrop object leaving the current hover figure.</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onCatch",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the user dropped an figure onto this element. This event is ONLY fired if the\nin the canvas installed {@link draw2d.policy.canvas.DropInterceptorPolicy} allow this.</p>",
          "parameters": [
            {
              "name": "droppedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The dropped figure.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onMouseEnter",
          "access": "",
          "virtual": false,
          "description": "<p>Callback method for the mouse enter event. Usefull for mouse hover-effects.\nOverride this method for your own effects. Don't call them manually.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onMouseLeave",
          "access": "",
          "virtual": false,
          "description": "<p>Callback method for the mouse leave event. Useful for mouse hover-effects.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onDoubleClick",
          "access": "",
          "virtual": false,
          "description": "<p>Called when a user dbl clicks on the element</p>\n<pre><code> // Alternatively you can register an event with:\n //\n figure.on(&quot;dblclick&quot;, function(emitter, event){\n     alert(&quot;user dbl click on the figure&quot;);\n });</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onClick",
          "access": "",
          "virtual": false,
          "description": "<p>Called when a user clicks on the element.</p>\n<pre><code> // You can alternatively register an event handler with:\n figure.on(&quot;click&quot;, function(emitter, event){\n     alert(&quot;user click on the figure&quot;);\n });</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onContextMenu",
          "access": "",
          "virtual": false,
          "description": "<p>called by the framework if the figure should show the context menu.<br>\nThe strategy to show the context menu depends on the platform. Either looong press or\nright click with the mouse.</p>\n<pre><code> // Alternatively you register for this event with:\n figure.on(&quot;contextmenu&quot;, function(emitter, event){\n     alert(&quot;user press the right mouse button for a context menu&quot;);\n });</code></pre>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate to show the menu</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate to show the menu</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getAlpha",
          "access": "",
          "virtual": false,
          "description": "<p>Return the alpha blending of the figure</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the current alpha blending</p>"
          }
        },
        {
          "name": "getRotationAngle",
          "access": "",
          "virtual": false,
          "description": "<p>return the rotation angle of the figure in degree of [0..356].</p>\n<br>\n<b>NOTE: this method is pre alpha and not for production. Only steps of 90 degree is working well</b>\n<br>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "isVisible",
          "access": "",
          "virtual": false,
          "description": "<p>Return true if the figure visible.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setKeepAspectRatio",
          "access": "",
          "virtual": false,
          "description": "<p>Guarantee, that the figure width/height will not be distorted. Applicable before calling setDimension().\nIt is false by default.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>boolean flag if the figure should respect the aspect ratio</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getKeepAspectRatio",
          "access": "",
          "virtual": false,
          "description": "<p>Return the flag if the shape keep the aspect ratio.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getZOrder",
          "access": "",
          "virtual": false,
          "description": "<p>Return the current z-index of the element. Currently this is an expensive method. The index will be calculated\nall the time. Caching is not implemented at the moment.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setCanSnapToHelper",
          "access": "",
          "virtual": false,
          "description": "<p>Set the flag if this object can snap to grid or geometry.\nA window of dialog should set this flag to false.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The snap to grid/geometry enable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getCanSnapToHelper",
          "access": "",
          "virtual": false,
          "description": "<p>Returns true if the figure can snap to any helper like a grid, guide, geometrie\nor something else.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "getSnapToGridAnchor",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "setSnapToGridAnchor",
          "access": "",
          "virtual": false,
          "description": "<p>Set the hot spot for all snapTo### operations.</p>",
          "parameters": [
            {
              "name": "point",
              "type": "draw2d.geo.Point",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setWidth",
          "access": "",
          "virtual": false,
          "description": "<p>Set the width of the figure and consider the minWidth attribute</p>",
          "parameters": [
            {
              "name": "width",
              "type": "Number",
              "description": "<p>the new width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getWidth",
          "access": "",
          "virtual": false,
          "description": "<p>The current width of the figure.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setHeight",
          "access": "",
          "virtual": false,
          "description": "<p>Set the heigth of the figure and consider the minWidth attribute</p>",
          "parameters": [
            {
              "name": "height",
              "type": "Number",
              "description": "<p>the new height of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getHeight",
          "access": "",
          "virtual": false,
          "description": "<p>The current height of the figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "getMinWidth",
          "access": "",
          "virtual": false,
          "description": "<p>This value is relevant for the interactive resize of the figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>Returns the min. width of this object.</p>"
          }
        },
        {
          "name": "setMinWidth",
          "access": "",
          "virtual": false,
          "description": "<p>Set the minimum width of this figure</p>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getMinHeight",
          "access": "",
          "virtual": false,
          "description": "<p>This value is relevant for the interactive resize of the figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>Returns the min. height of this object.</p>"
          }
        },
        {
          "name": "setMinHeight",
          "access": "",
          "virtual": false,
          "description": "<p>Set the minimum height of the figure.</p>",
          "parameters": [
            {
              "name": "h",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setX",
          "access": "",
          "virtual": false,
          "description": "<p>the the x-offset related to the parent figure or canvas</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the new x offset of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getX",
          "access": "",
          "virtual": false,
          "description": "<p>The x-offset related to the parent figure or canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the x-offset to the parent figure</p>"
          }
        },
        {
          "name": "setY",
          "access": "",
          "virtual": false,
          "description": "<p>the the y-offset related to the parent figure or canvas</p>",
          "parameters": [
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the new x offset of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getY",
          "access": "",
          "virtual": false,
          "description": "<p>The y-offset related to the parent figure or canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>The y-offset to the parent figure.</p>"
          }
        },
        {
          "name": "getAbsoluteX",
          "access": "",
          "virtual": false,
          "description": "<p>The x-offset related to the canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the x-offset to the canvas</p>"
          }
        },
        {
          "name": "getAbsoluteY",
          "access": "",
          "virtual": false,
          "description": "<p>The y-offset related to the canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>The y-offset to the canvas.</p>"
          }
        },
        {
          "name": "getAbsolutePosition",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the absolute y-position of the port.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getAbsoluteBounds",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the absolute y-position of the port.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "setPosition",
          "access": "",
          "virtual": false,
          "description": "<p>Set the position of the object.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   x: x,\n   y: y\n });</code></pre>",
          "parameters": [
            {
              "name": "x",
              "type": [
                "Number",
                "draw2d.geo.Point"
              ],
              "description": "<p>The new x coordinate of the figure or the x/y coordinate if it is an draw2d.geo.Point</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The new y coordinate of the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPosition",
          "access": "",
          "virtual": false,
          "description": "<p>Get the current position of the figure</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "translate",
          "access": "",
          "virtual": false,
          "description": "<p>Translate the figure with the given x/y offset.</p>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>The x offset to translate</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>The y offset to translate</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setBoundingBox",
          "access": "",
          "virtual": false,
          "description": "<p>Set the bounding box of the figure</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   width: w,\n   height: h,\n   x: x,\n   y: y\n });\n\n // or\n figure.attr({\n   boundingBox: {x:1, y:100, width:30, height:30}\n });</code></pre>",
          "parameters": [
            {
              "name": "rect",
              "type": "draw2d.geo.Rectangle",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getBoundingBox",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the bounding box of the figure in absolute position to the canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "hitTest",
          "access": "",
          "virtual": false,
          "description": "<p>Detect whenever the hands over coordinate is inside the figure.\nThe default implementation is a simple bounding box test.</p>",
          "parameters": [
            {
              "name": "iX",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "iY",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "corona",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setDraggable",
          "access": "",
          "virtual": false,
          "description": "<p>Switch on/off the drag drop behaviour of this object</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The new drag drop indicator</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "isDraggable",
          "access": "",
          "virtual": false,
          "description": "<p>Get the Drag drop enable flag</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": "<p>The new drag drop indicator</p>"
          }
        },
        {
          "name": "isResizeable",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the true if the figure can be resized.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setResizeable",
          "access": "",
          "virtual": false,
          "description": "<p>You can change the resizeable behaviour of this object. Hands over [false] and\nthe figure has no resizehandles if you select them with the mouse.<br></p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   resizeable: flag\n });</code></pre>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The resizeable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "isSelectable",
          "access": "",
          "virtual": false,
          "description": "<p>Indicates whenever the element is selectable by user interaction or API.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setSelectable",
          "access": "",
          "virtual": false,
          "description": "<p>You can change the selectable behavior of this object. Hands over [false] and\nthe figure has no selection handles if you try to select them with the mouse.<br></p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The selectable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "isStrechable",
          "access": "",
          "virtual": false,
          "description": "<p>Return true if the object doesn't care about the aspect ratio.\nYou can change the height and width independent.<br></p>\n<p>Replaced with &quot;getKeepAspectRatio&quot;</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "isDeleteable",
          "access": "",
          "virtual": false,
          "description": "<p>Return false if you avoid that the user can delete your figure.\nSub class can override this method.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setDeleteable",
          "access": "",
          "virtual": false,
          "description": "<p>Set the flag if the shape is deleteable.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>enable or disable flag for the delete operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setParent",
          "access": "private",
          "virtual": false,
          "description": "<p>Set the parent of this figure.\nDon't call them manually.</p>",
          "parameters": [
            {
              "name": "parent",
              "type": "draw2d.Figure",
              "description": "<p>The new parent of this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getParent",
          "access": "",
          "virtual": false,
          "description": "<p>Get the parent of this figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": ""
          }
        },
        {
          "name": "contains",
          "access": "",
          "virtual": false,
          "description": "<p>Check to see if a figure is a descendant of another figure.\n<br>\nThe contains() method returns true if the figure provided by the argument is a descendant of this figure,\nwhether it is a direct child or nested more deeply. Otherwise, it returns false.</p>",
          "parameters": [
            {
              "name": "containedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure that may be contained by (a descendant of) this figure.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getRoot",
          "access": "",
          "virtual": false,
          "description": "<p>Get the top most parent of this figure. This can be an layout figure or parent container</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": ""
          }
        },
        {
          "name": "setComposite",
          "access": "",
          "virtual": false,
          "description": "<p>Set the assigned composite of this figure.</p>",
          "parameters": [
            {
              "name": "composite",
              "type": "draw2d.shape.composite.StrongComposite",
              "description": "<p>The assigned composite of this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getComposite",
          "access": "",
          "virtual": false,
          "description": "<p>Get the assigned composite of this figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.shape.composite.StrongComposite",
            "description": ""
          }
        },
        {
          "name": "fireEvent",
          "access": "",
          "virtual": false,
          "description": "<p>Execute all handlers and behaviors attached to the figure for the given event type.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "String",
              "description": "<p>the event to trigger</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "args",
              "type": "Object",
              "description": "<p>optional parameters for the triggered event callback</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "on",
          "access": "",
          "virtual": false,
          "description": "<p>Attach an event handler function for one or more events to the figure.\nTo remove events bound with .on(), see {@link #off}.</p>\n<p>possible events are:<br></p>\n<ul>\n  <li>click</li>\n  <li>dblclick</li>\n  <li>move</li>\n  <li>resize</li>\n  <li>timer</li>\n  <li>contextmenu</li>\n  <li>show</li>\n  <li>hide</li>\n  <li>added</li>\n  <li>removed</li>\n  <li>change:[attr]</li>\n</ul>",
          "parameters": [
            {
              "name": "event",
              "type": "String",
              "description": "<p>One or more space-separated event types</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback",
              "type": "function",
              "description": "<p>A function to execute when the event is triggered.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback.emitter",
              "type": "draw2d.Figure",
              "description": "<p>the emitter of the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback.obj",
              "type": "Object",
              "description": "<p>optional event related data</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "context",
              "type": "Object",
              "description": "<p>optional context of the function callback.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "off",
          "access": "",
          "virtual": false,
          "description": "<p>The .off() method removes event handlers that were attached with {@link #on}.<br>\nCalling .off() with no arguments removes all handlers attached to the elements.<br>\n<br>\nIf a simple event name such as &quot;move&quot; is provided, all events of that type are removed from the figure.</p>",
          "parameters": [
            {
              "name": "eventOrFunction",
              "type": [
                "String",
                "function"
              ],
              "description": "<p>the event name of the registerd function or the function itself</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getBestChild",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the best figure at the location [x,y]. It is a simple hit test. Keep in mind that only visible objects\nare returned.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>The x position.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The y position.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "figureToIgnore",
              "type": [
                "draw2d.Figure",
                "Array"
              ],
              "description": "<p>The figures which should be ignored.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        }
      ]
    },
    {
      "name": "LineResizeHandle",
      "namespace": "draw2d.shape.basic",
      "description": "<p>draw2d.shape.basic.LineResizeHandle\nBase class for selection handle for connections and normal lines.</p>",
      "extends": [
        "draw2d.shape.basic.Circle"
      ],
      "access": "",
      "virtual": false,
      "fires": "",
      "constructor": {
        "name": "LineResizeHandle",
        "description": "",
        "parameters": [],
        "examples": []
      },
      "functions": [
        {
          "name": "init",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getOwner",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the current used SVG as string</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "getIndex",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the index of the selection. In case of a PlyLine the count is dynamic.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "createShapeElement",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setBackgroundColor",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getRelatedPort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the port below the ResizeHandle.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.Port",
            "description": ""
          }
        },
        {
          "name": "getOppositePort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the port of the other side of the related connection.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.Port",
            "description": ""
          }
        },
        {
          "name": "repaint",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onDragStart",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the drag and drop action begins. You can return [false] if you\nwant avoid the that the figure can be move.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onDrag",
          "access": "private",
          "virtual": false,
          "description": "<p>Called from the framework during a drag&amp;drop operation</p>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>the x difference between the start of the drag drop operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>the y difference between the start of the drag drop operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dx2",
              "type": "Number",
              "description": "<p>The x diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy2",
              "type": "Number",
              "description": "<p>The y diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "onDragEnd",
          "access": "",
          "virtual": false,
          "description": "<p>Called after a drag and drop action.<br>\nSub classes can override this method to implement additional stuff. Don't forget to call the super implementation via <code>this._super();</code></p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "relocate",
          "access": "",
          "virtual": false,
          "description": "<p>Controls the position of the ResizeHandle\nCalled by the framework.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "supportsSnapToHelper",
          "access": "",
          "virtual": false,
          "description": "<p>The LineResizeHandle didn't support the SnapToHelper feature if the\ncorresponding object is an Connection. A Connection is always bounded to\nPort. In this case it makes no sense to use a Grid or Geometry for snapping.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": "<p>return false if the corresponding object didn't support snapTo</p>"
          }
        },
        {
          "name": "show",
          "access": "",
          "virtual": false,
          "description": "<p>Show the ResizeHandle and add it to the canvas.<br>\nAdditional bring it in to the front of other figures.</p>",
          "parameters": [
            {
              "name": "canvas",
              "type": "draw2d.Canvas",
              "description": "<p>the canvas to use</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-position</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-position</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "hide",
          "access": "",
          "virtual": false,
          "description": "<p>Hide the resize handle and remove it from the canvas.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onKeyDown",
          "access": "",
          "virtual": false,
          "description": "<p>Override this method and redirect them to the canvas. A ResizeHandle didn't support\nKeyboard interaction at the moment.</p>",
          "parameters": [
            {
              "name": "keyCode",
              "type": "Number",
              "description": "<p>the id of the pressed key</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrl",
              "type": "Boolean",
              "description": "<p>true if the user has pressed the CTRL/STRG key as well.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setAlpha",
          "access": "",
          "virtual": false,
          "description": "<p>the the opacity of the element.</p>",
          "parameters": [
            {
              "name": "percent",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setDiameter",
          "access": "",
          "virtual": false,
          "description": "<p>Set the diameter of the circle. The center of the circle will be retained.</p>",
          "parameters": [
            {
              "name": "d",
              "type": "Number",
              "description": "<p>The new diameter of the circle.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getDiameter",
          "access": "",
          "virtual": false,
          "description": "<p>Get the diameter of the circle.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setRadius",
          "access": "",
          "virtual": false,
          "description": "<p>Set the radius of the circle. The center of the circle will be retained.</p>",
          "parameters": [
            {
              "name": "d",
              "type": "Number",
              "description": "<p>The new radius of the circle.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPersistentAttributes",
          "access": "",
          "virtual": false,
          "description": "<p>Return an objects with all important attributes for XML or JSON serialization</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Object",
            "description": ""
          }
        },
        {
          "name": "createShapeElement",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getCenter",
          "access": "",
          "virtual": false,
          "description": "<p>Get the center of the figure</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setCenter",
          "access": "",
          "virtual": false,
          "description": "<p>Set the center of the figure.</p>",
          "parameters": [
            {
              "name": "x",
              "type": [
                "Number",
                "draw2d.geo.Point"
              ],
              "description": "<p>the new x coordinate of the center or a draw2d.geo.Point object with the center</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y coordinate of the new center of the first argument isn't a draw2d.geo.Point object</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "repaint",
          "access": "private",
          "virtual": false,
          "description": "<p>propagate all attributes like color, stroke,... to the shape element</p>",
          "parameters": [
            {
              "name": "attributes",
              "type": "Object",
              "description": "<p>the style attributes for the SVG shape</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "intersectionWithLine",
          "access": "",
          "virtual": false,
          "description": "<p>NOTE: Rotation will need to be added to this function</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getRadius",
          "access": "",
          "virtual": false,
          "description": "<p>Get the corner radius of the edges.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setDashArray",
          "access": "",
          "virtual": false,
          "description": "<p>Set the line style for this object.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   dash: dashPattern\n });</code></pre>",
          "parameters": [
            {
              "name": "dash",
              "type": "String",
              "description": "<p>can be one of this [&quot;&quot;, &quot;-&quot;, &quot;.&quot;, &quot;-.&quot;, &quot;-..&quot;, &quot;. &quot;, &quot;- &quot;, &quot;--&quot;, &quot;- .&quot;, &quot;--.&quot;, &quot;--..&quot;]</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getDashArray",
          "access": "",
          "virtual": false,
          "description": "<p>Get the line style for this object.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr(&quot;dash&quot;);</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setGlow",
          "access": "",
          "virtual": false,
          "description": "<p>Highlight the element or remove the highlighting</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>indicates glow/noGlow</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setBackgroundColor",
          "access": "",
          "virtual": false,
          "description": "<p>Set the new background color of the figure. It is possible to hands over\n<code>null</code> to set the background transparent.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;bgColor&quot;: &quot;#f0f0f0&quot;\n });</code></pre>",
          "parameters": [
            {
              "name": "color",
              "type": [
                "String",
                "draw2d.util.Color"
              ],
              "description": "<p>The new background color of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getBackgroundColor",
          "access": "",
          "virtual": false,
          "description": "<p>The current used background color.</p>\n<pre><code> // Alternatively you can use the attr method:\n var color =figure.attr(&quot;bgColor&quot;);</code></pre>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.Color",
            "description": ""
          }
        },
        {
          "name": "setStroke",
          "access": "",
          "virtual": false,
          "description": "<p>Set the stroke to use.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;stroke&quot;: 2\n });</code></pre>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "<p>The new line width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getStroke",
          "access": "",
          "virtual": false,
          "description": "<p>The used line width.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setColor",
          "access": "",
          "virtual": false,
          "description": "<p>Set the foreground color of the figure.\nThis method fires a <i>document dirty</i> event.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;color&quot;: &quot;#f3f3f3&quot;\n });</code></pre>",
          "parameters": [
            {
              "name": "color",
              "type": [
                "String",
                "draw2d.util.Color"
              ],
              "description": "<p>The new color of the line.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getColor",
          "access": "",
          "virtual": false,
          "description": "<p>Get the current used foreground color</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.Color",
            "description": ""
          }
        },
        {
          "name": "setPersistentAttributes",
          "access": "",
          "virtual": false,
          "description": "<p>Read all attributes from the serialized properties and transfer them into the shape.</p>",
          "parameters": [
            {
              "name": "memento",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setPersistPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Indicates if the node should read/write the ports via the draw2d.Figure.getPersistenAttributes\nto the JSON object</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPersistPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Indicates if the figure writes the ports to the JSON structore too.\nDefault is &quot;false&quot;</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "toFront",
          "access": "",
          "virtual": false,
          "description": "<p>Moves the element so it is the closest to the viewerâ€™s eyes, on top of other elements. Additional\nthe internal model changed as well.</p>\n<p>Optional: Inserts current object in front of the given one.</p>",
          "parameters": [
            {
              "name": "figure",
              "type": "draw2d.Figure",
              "description": "<p>move current object in front of the given one.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "toBack",
          "access": "",
          "virtual": false,
          "description": "<p>Moves the element to the background. Additional\nthe internal model changed as well.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setVisible",
          "access": "",
          "virtual": false,
          "description": "<p>Show/hide the element. The element didn't receive any mouse events (click, dblclick) if you hide the\nfigure.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   visible: flag\n });</code></pre>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "duration",
              "type": "Number",
              "description": "<p>the optional number for the fadeIn /fadeOut of the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Return all ports of the node. The results contains\nall ports of the children too per default. Set <b>recursive</b>\nto false to retrieve direct assigned ports only.</p>",
          "parameters": [
            {
              "name": "recursive",
              "type": "Boolean",
              "description": "<p>indicates if the method should return children ports too. Default is <b>true</b></p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "getInputPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Return all input ports of the node.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "getOutputPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Return all output ports of the node.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "clone",
          "access": "",
          "virtual": false,
          "description": "<p>Clone the figure. <br>\nYou must override and implement the methods <b>getPersistentAttributes</b> and <b>setPersistentAttributes</b> for your custom\nfigures if the have special attributes.</p>\n<p>The clone() method performs a deep copy of the object, meaning that it copies the children, ports and decorations\nper default. You can control the clone procedure with the 'cloneMetaData'.</p>",
          "parameters": [
            {
              "name": "cloneMetaData",
              "type": "Object",
              "description": "<p>controls the clone procedure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "cloneMetaData.excludeChildren",
              "type": "Boolean",
              "description": "<p>set it to true if you want exclude the children.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "cloneMetaData.excludePorts",
              "type": "Boolean",
              "description": "<p>set it to true if you want exclude the ports of the node.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portName",
              "type": "String",
              "description": "<p>The name of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.Port",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getInputPort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the input port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.InputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getOutputPort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the output port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or the numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.OutputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getHybridPort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the input port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.InputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "addPort",
          "access": "",
          "virtual": false,
          "description": "<p>Add a port to this node at the given position.<br></p>",
          "parameters": [
            {
              "name": "port",
              "type": "draw2d.Port",
              "description": "<p>The new port to add.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>The layout for the port.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "resetPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Remove all ports of this node</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "removePort",
          "access": "",
          "virtual": false,
          "description": "<p>Removes a port and all related connections from this node.<br></p>",
          "parameters": [
            {
              "name": "port",
              "type": "draw2d.Port",
              "description": "<p>The port to remove.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "createPort",
          "access": "",
          "virtual": false,
          "description": "<p>Create a standard Port for this element. Inherited class can override this\nmethod to create its own type of ports.</p>",
          "parameters": [
            {
              "name": "type",
              "type": "String",
              "description": "<p>the type of the requested port. possible [&quot;input&quot;, &quot;output&quot;]</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>the layouter to use for this port</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getConnections",
          "access": "",
          "virtual": false,
          "description": "<p>Return all connections related to this node.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "setCanvas",
          "access": "",
          "virtual": false,
          "description": "<p>Set the canvas element of this figures. This can be used to determine whenever an element\nis added or removed to the canvas.</p>",
          "parameters": [
            {
              "name": "canvas",
              "type": "draw2d.Canvas",
              "description": "<p>the new parent of the figure or null</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setRotationAngle",
          "access": "",
          "virtual": false,
          "description": "<p>Set the rotation angle in degree [0..356]<br>\n<b>Only steps of 90 degree is working well</b>\n<br>\n// Alternatively you can use the attr method:\nfigure.attr({\nangle: angle\n});</p>",
          "parameters": [
            {
              "name": "angle",
              "type": "Number",
              "description": "<p>the rotation angle in degree</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setDimension",
          "access": "",
          "virtual": false,
          "description": "<p>Set the new width and height of the figure.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n    width:  w,\n    height: h\n });</code></pre>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "<p>The new width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "h",
              "type": "Number",
              "description": "<p>The new height of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onPortValueChanged",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the value of any port has been changed</p>",
          "parameters": [
            {
              "name": "relatedPort",
              "type": "draw2d.Port",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "layoutPorts",
          "access": "private",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "createCommand",
          "access": "private",
          "virtual": false,
          "description": "<p>Returns the Command to perform the specified Request or null.</p>",
          "parameters": [
            {
              "name": "request",
              "type": "draw2d.command.CommandType",
              "description": "<p>describes the Command being requested</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.command.Command",
            "description": "<p>null or a Command</p>"
          }
        },
        {
          "name": "attr",
          "access": "",
          "virtual": false,
          "description": "<p>Read or set shape attributes.<br>\nWhen no value is given, reads specified attribute from the element.<br>\nWhen value is given, sets the attribute to that value.\nMultiple attributes can be set by passing an object with name-value pairs.</p>\n<pre><code>let figure = new draw2d.shape.basic.Rectangle();\nfigure.attr('x');      //=&gt; read value\nfigure.attr('x', 30);  //=&gt; set value\n\n// multiple attributes:\nfigure.attr({\n  x: 30,\n  y: 40,\n  width : 200,\n  height: 50,\n  cssClass: &quot;red_border_figure&quot;\n});\n\n// it is possible to override any method of the figure as well\n// Instead of inheritance you can just override the callback methods\n// like\n//\nfigure.attr({\n   onClick : function(){\n       alert(&quot;click&quot;);\n   }\n});\n\n// or you can pass the attr values in the constructor\n//\nlet clickFigure = new draw2d.shape.basic.Rectangle({\n   onClick : function(){\n       alert(&quot;click&quot;);\n   }\n});\n</code></pre>\n<p>Additional you can set the user defined values (userData) with this method\nusing the dot-notation. User defined values are always part of the exported\nJSON data.</p>\n<pre><code>// setting multiple attributes:\nfigure.attr({\n  &quot;userData.my.property.x&quot;: 30,\n  &quot;userData.my.property.y&quot;: 40\n});\n</code></pre>\n<p>Also set using array notation is possible for the userData:</p>\n<pre><code>// dot notation and array brackets:\nfigure.attr({\n  &quot;userData.my.names[0]&quot;: &quot;John&quot;,\n  &quot;userData.my.names[1]&quot;: &quot;Doe&quot;\n});\n</code></pre>\n<p>The Object returned should be the equivalent structured object:</p>\n<pre><code>let obj = figure.getUserData();\n</code></pre>\n<p>That is, where obj is equivalent to:</p>\n<pre><code>let obj = {\n    my:{\n        property:{\n            x: 30,\n            y: 40\n       },\n       names:  [&quot;John&quot;, &quot;Doe&quot;]\n   }\n</code></pre>\n<p>};</p>",
          "parameters": [
            {
              "name": "name",
              "type": "String/Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "value",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "pick",
          "access": "",
          "virtual": false,
          "description": "<p>Return a copy of the object, filtered to only have values for the whitelisted keys.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "select",
          "access": "private",
          "virtual": false,
          "description": "<p>Add the figure to the current selection and propagate this to all edit policies.</p>",
          "parameters": [
            {
              "name": "asPrimarySelection",
              "type": "Boolean",
              "description": "<p>true if the element should be the primary selection</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "unselect",
          "access": "private",
          "virtual": false,
          "description": "<p>Unselect the figure and propagete this event to all edit policies.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setSelectionAdapter",
          "access": "",
          "virtual": false,
          "description": "<p>Returns a function which returns the the figure which must handle the selection handling.</p>",
          "parameters": [
            {
              "name": "adapter",
              "type": "function",
              "description": "<p>function which returns the figure which handles the selection handling</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getSelectionAdapter",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "function",
            "description": ""
          }
        },
        {
          "name": "isSelected",
          "access": "",
          "virtual": false,
          "description": "<p>Returns true if the figure part of the current canvas selection.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setUserData",
          "access": "",
          "virtual": false,
          "description": "<p>Allows a user to attach (or remove) data to an element, without needing to create a custom figure or shape.\nThe data must be a valid JSON object.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   userData: object\n });</code></pre>",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getUserData",
          "access": "",
          "virtual": false,
          "description": "<p>Returns any user data set previously on the given figure by setUserData.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Object",
            "description": ""
          }
        },
        {
          "name": "getId",
          "access": "",
          "virtual": false,
          "description": "<p>Return the UUID of this element.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "setId",
          "access": "",
          "virtual": false,
          "description": "<p>Set the id of this element.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  id: newId\n});</code></pre>",
          "parameters": [
            {
              "name": "newId",
              "type": "String",
              "description": "<p>the new id for this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Return the css styling class name of the element.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "setCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Set the css class of the node.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;cssClass&quot;: &quot;red_border_figure&quot;\n });</code></pre>",
          "parameters": [
            {
              "name": "cssClass",
              "type": "String",
              "description": "<p>the new css class name of the node</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "hasCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>The method will return true if the class is assigned to the element, even if other classes also are.</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the class name to check</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "addCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Add a CSS class to the figure.<br>\nIt's important to note that this method does not replace a class. It simply adds the class,\nappending it to any which may already be assigned to the elements.</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "removeCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Remove the given css class name from the figure</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the css class name to add</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "toggleCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Add or remove the given css class name from the figure</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the class name to toggle</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getCanvas",
          "access": "",
          "virtual": false,
          "description": "<p>Return the current assigned canvas container.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.Canvas",
            "description": ""
          }
        },
        {
          "name": "startTimer",
          "access": "",
          "virtual": false,
          "description": "<p>Start a timer which calls the onTimer method in the given interval.</p>",
          "parameters": [
            {
              "name": "milliSeconds",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "stopTimer",
          "access": "",
          "virtual": false,
          "description": "<p>Stop the internal timer.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onTimer",
          "access": "",
          "virtual": false,
          "description": "<p>Callback method for the internal timer handling<br>\nInherit classes must override this method if they want use the timer feature.</p>\n<pre><code> // Alternatively you can register for this event with\n figure.on(&quot;timer&quot;, function(emitter){\n     alert(&quot;timer fired&quot;);\n });</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "installEditPolicy",
          "access": "",
          "virtual": false,
          "description": "<p>Install a new edit policy to the figure. Each editpolicy is able to focus on a single editing\ntask or group of related tasks. This also allows editing behavior to be selectively reused across\ndifferent figure implementations. Also, behavior can change dynamically, such as when the layouts\nor routing methods change.</p>\n<p>Example for limited DragDrop behavior can be a draw2d.layout.constraint.RegionConstriantPolicy.</p>",
          "parameters": [
            {
              "name": "policy",
              "type": "draw2d.policy.EditPolicy",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "uninstallEditPolicy",
          "access": "",
          "virtual": false,
          "description": "<p>UnInstall the edit policy from the figure. Either the instance itself if found\nor all kind of the given edit policies.</p>",
          "parameters": [
            {
              "name": "policy",
              "type": "draw2d.policy.EditPolicy",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "add",
          "access": "",
          "virtual": false,
          "description": "<p>Add a child figure to the figure. The hands over figure doesn't support drag&amp;drop\noperations. It's only a decorator for the connection.<br>\nMainly for labels or other decorations</p>\n<pre><code>let start = new draw2d.shape.node.Start({x:80, y:150});\nstart.add(new draw2d.shape.basic.Label({text:&quot;Test Label&quot;}), new draw2d.layout.locator.TopLocator());\n\ncanvas.add( start);</code></pre>",
          "parameters": [
            {
              "name": "child",
              "type": "draw2d.Figure",
              "description": "<p>the figure to add as decoration to the connection.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>the locator for the child.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "index",
              "type": "Number",
              "description": "<p>optional index where to insert the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "remove",
          "access": "",
          "virtual": false,
          "description": "<p>Remove the child figure from this figure and the canvas</p>",
          "parameters": [
            {
              "name": "child",
              "type": "draw2d.Figure",
              "description": "<p>the figure to remove.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Object",
            "description": "<p>the removed tupple of figure/locator or null if the child isn't found</p>"
          }
        },
        {
          "name": "getChildren",
          "access": "",
          "virtual": false,
          "description": "<p>Return all children/decorations of this shape which has been added with\ndraw2d.Figure.add</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "resetChildren",
          "access": "",
          "virtual": false,
          "description": "<p>Remove all children/decorations of this shape</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getShapeElement",
          "access": "protected",
          "virtual": false,
          "description": "<p>return the current SVG shape element or create it on demand.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getTopLevelShapeElement",
          "access": "private",
          "virtual": false,
          "description": "<p>Get the top level shape element. May the figure has a set of SVG elements. In this case this\nmethod must return the top level node.<br>\nThis method is used for the toFront/toBack method to order the nodes in the correct way.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "applyTransformation",
          "access": "private",
          "virtual": false,
          "description": "<p>apply a transformation to the shape like rotation, translate,..</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getHandleBBox",
          "access": "",
          "virtual": false,
          "description": "<p>Allow dragging only when the cursor is over a specific part of the figure.\n<br>\nOverride this method to specify the bounding box of an element or a draw2d.util.ArrayList\nof draw2d.geo.Rectangle of bounding boxes used to drag the figure. The returned coordinates\nare absolute coordinates to the canvas.\n<br>\n<br>\nDefault implementation returns <b>null</b> to indicate to use the complete figures as\ndrag handle.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": [
              "draw2d.geo.Rectangle",
              "draw2d.util.ArrayList"
            ],
            "description": ""
          }
        },
        {
          "name": "onPanning",
          "access": "",
          "virtual": false,
          "description": "<p>Called by the framework if the figure returns false for the drag operation. In this\ncase we send a &quot;panning&quot; event - mouseDown + mouseMove. This is very useful for\nUI-Widget like slider, spinner,...</p>\n<pre><code> // You can alternatively register an event handler with:\n figure.on(&quot;panning&quot;, function(emitter, eventData){\n     alert(&quot;panning of the figure called&quot;);\n });</code></pre>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>the x difference between the mouse down operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>the y difference between the mouse down operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dx2",
              "type": "Number",
              "description": "<p>The x diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy2",
              "type": "Number",
              "description": "<p>The y diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onPanningEnd",
          "access": "",
          "virtual": false,
          "description": "<p>Called by the framework if the panning event of the figures ends. This happens\nafter the mous up event if the panning is active.</p>\n<pre><code> // You can alternatively register an event handler with:\n figure.on(&quot;panningEnd&quot;, function(emitter){\n     alert(&quot;panning of the figure called&quot;);\n });</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "delegateTarget",
          "access": "private",
          "virtual": false,
          "description": "<p>Called by the framework during drag&amp;drop operations if the user drag a figure over this figure</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": "<p>the figure which should receive the drop event or null if the element didn't want a drop event</p>"
          }
        },
        {
          "name": "onDragEnter",
          "access": "",
          "virtual": false,
          "description": "<p>Called by the framework during drag&amp;drop operations if the user drag a figure over this figure</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onDragLeave",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the DragDrop object leaving the current hover figure.</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onDrop",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the user drop this element onto the dropTarget. This event is ONLY fired if the\nshape return &quot;this&quot; in the {@link draw2d.Figure#onDragEnter} method.</p>",
          "parameters": [
            {
              "name": "dropTarget",
              "type": "draw2d.Figure",
              "description": "<p>The drop target.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onCatch",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the user dropped an figure onto this element. This event is ONLY fired if the\nin the canvas installed {@link draw2d.policy.canvas.DropInterceptorPolicy} allow this.</p>",
          "parameters": [
            {
              "name": "droppedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The dropped figure.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onMouseEnter",
          "access": "",
          "virtual": false,
          "description": "<p>Callback method for the mouse enter event. Usefull for mouse hover-effects.\nOverride this method for your own effects. Don't call them manually.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onMouseLeave",
          "access": "",
          "virtual": false,
          "description": "<p>Callback method for the mouse leave event. Useful for mouse hover-effects.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onDoubleClick",
          "access": "",
          "virtual": false,
          "description": "<p>Called when a user dbl clicks on the element</p>\n<pre><code> // Alternatively you can register an event with:\n //\n figure.on(&quot;dblclick&quot;, function(emitter, event){\n     alert(&quot;user dbl click on the figure&quot;);\n });</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onClick",
          "access": "",
          "virtual": false,
          "description": "<p>Called when a user clicks on the element.</p>\n<pre><code> // You can alternatively register an event handler with:\n figure.on(&quot;click&quot;, function(emitter, event){\n     alert(&quot;user click on the figure&quot;);\n });</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onContextMenu",
          "access": "",
          "virtual": false,
          "description": "<p>called by the framework if the figure should show the context menu.<br>\nThe strategy to show the context menu depends on the platform. Either looong press or\nright click with the mouse.</p>\n<pre><code> // Alternatively you register for this event with:\n figure.on(&quot;contextmenu&quot;, function(emitter, event){\n     alert(&quot;user press the right mouse button for a context menu&quot;);\n });</code></pre>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate to show the menu</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate to show the menu</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getAlpha",
          "access": "",
          "virtual": false,
          "description": "<p>Return the alpha blending of the figure</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the current alpha blending</p>"
          }
        },
        {
          "name": "getRotationAngle",
          "access": "",
          "virtual": false,
          "description": "<p>return the rotation angle of the figure in degree of [0..356].</p>\n<br>\n<b>NOTE: this method is pre alpha and not for production. Only steps of 90 degree is working well</b>\n<br>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "isVisible",
          "access": "",
          "virtual": false,
          "description": "<p>Return true if the figure visible.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setKeepAspectRatio",
          "access": "",
          "virtual": false,
          "description": "<p>Guarantee, that the figure width/height will not be distorted. Applicable before calling setDimension().\nIt is false by default.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>boolean flag if the figure should respect the aspect ratio</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getKeepAspectRatio",
          "access": "",
          "virtual": false,
          "description": "<p>Return the flag if the shape keep the aspect ratio.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getZOrder",
          "access": "",
          "virtual": false,
          "description": "<p>Return the current z-index of the element. Currently this is an expensive method. The index will be calculated\nall the time. Caching is not implemented at the moment.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setCanSnapToHelper",
          "access": "",
          "virtual": false,
          "description": "<p>Set the flag if this object can snap to grid or geometry.\nA window of dialog should set this flag to false.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The snap to grid/geometry enable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getCanSnapToHelper",
          "access": "",
          "virtual": false,
          "description": "<p>Returns true if the figure can snap to any helper like a grid, guide, geometrie\nor something else.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "getSnapToGridAnchor",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "setSnapToGridAnchor",
          "access": "",
          "virtual": false,
          "description": "<p>Set the hot spot for all snapTo### operations.</p>",
          "parameters": [
            {
              "name": "point",
              "type": "draw2d.geo.Point",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setWidth",
          "access": "",
          "virtual": false,
          "description": "<p>Set the width of the figure and consider the minWidth attribute</p>",
          "parameters": [
            {
              "name": "width",
              "type": "Number",
              "description": "<p>the new width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getWidth",
          "access": "",
          "virtual": false,
          "description": "<p>The current width of the figure.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setHeight",
          "access": "",
          "virtual": false,
          "description": "<p>Set the heigth of the figure and consider the minWidth attribute</p>",
          "parameters": [
            {
              "name": "height",
              "type": "Number",
              "description": "<p>the new height of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getHeight",
          "access": "",
          "virtual": false,
          "description": "<p>The current height of the figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "getMinWidth",
          "access": "",
          "virtual": false,
          "description": "<p>This value is relevant for the interactive resize of the figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>Returns the min. width of this object.</p>"
          }
        },
        {
          "name": "setMinWidth",
          "access": "",
          "virtual": false,
          "description": "<p>Set the minimum width of this figure</p>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getMinHeight",
          "access": "",
          "virtual": false,
          "description": "<p>This value is relevant for the interactive resize of the figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>Returns the min. height of this object.</p>"
          }
        },
        {
          "name": "setMinHeight",
          "access": "",
          "virtual": false,
          "description": "<p>Set the minimum height of the figure.</p>",
          "parameters": [
            {
              "name": "h",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setX",
          "access": "",
          "virtual": false,
          "description": "<p>the the x-offset related to the parent figure or canvas</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the new x offset of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getX",
          "access": "",
          "virtual": false,
          "description": "<p>The x-offset related to the parent figure or canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the x-offset to the parent figure</p>"
          }
        },
        {
          "name": "setY",
          "access": "",
          "virtual": false,
          "description": "<p>the the y-offset related to the parent figure or canvas</p>",
          "parameters": [
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the new x offset of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getY",
          "access": "",
          "virtual": false,
          "description": "<p>The y-offset related to the parent figure or canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>The y-offset to the parent figure.</p>"
          }
        },
        {
          "name": "getAbsoluteX",
          "access": "",
          "virtual": false,
          "description": "<p>The x-offset related to the canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the x-offset to the canvas</p>"
          }
        },
        {
          "name": "getAbsoluteY",
          "access": "",
          "virtual": false,
          "description": "<p>The y-offset related to the canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>The y-offset to the canvas.</p>"
          }
        },
        {
          "name": "getAbsolutePosition",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the absolute y-position of the port.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getAbsoluteBounds",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the absolute y-position of the port.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "setPosition",
          "access": "",
          "virtual": false,
          "description": "<p>Set the position of the object.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   x: x,\n   y: y\n });</code></pre>",
          "parameters": [
            {
              "name": "x",
              "type": [
                "Number",
                "draw2d.geo.Point"
              ],
              "description": "<p>The new x coordinate of the figure or the x/y coordinate if it is an draw2d.geo.Point</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The new y coordinate of the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPosition",
          "access": "",
          "virtual": false,
          "description": "<p>Get the current position of the figure</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "translate",
          "access": "",
          "virtual": false,
          "description": "<p>Translate the figure with the given x/y offset.</p>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>The x offset to translate</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>The y offset to translate</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setBoundingBox",
          "access": "",
          "virtual": false,
          "description": "<p>Set the bounding box of the figure</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   width: w,\n   height: h,\n   x: x,\n   y: y\n });\n\n // or\n figure.attr({\n   boundingBox: {x:1, y:100, width:30, height:30}\n });</code></pre>",
          "parameters": [
            {
              "name": "rect",
              "type": "draw2d.geo.Rectangle",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getBoundingBox",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the bounding box of the figure in absolute position to the canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "hitTest",
          "access": "",
          "virtual": false,
          "description": "<p>Detect whenever the hands over coordinate is inside the figure.\nThe default implementation is a simple bounding box test.</p>",
          "parameters": [
            {
              "name": "iX",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "iY",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "corona",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setDraggable",
          "access": "",
          "virtual": false,
          "description": "<p>Switch on/off the drag drop behaviour of this object</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The new drag drop indicator</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "isDraggable",
          "access": "",
          "virtual": false,
          "description": "<p>Get the Drag drop enable flag</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": "<p>The new drag drop indicator</p>"
          }
        },
        {
          "name": "isResizeable",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the true if the figure can be resized.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setResizeable",
          "access": "",
          "virtual": false,
          "description": "<p>You can change the resizeable behaviour of this object. Hands over [false] and\nthe figure has no resizehandles if you select them with the mouse.<br></p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   resizeable: flag\n });</code></pre>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The resizeable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "isSelectable",
          "access": "",
          "virtual": false,
          "description": "<p>Indicates whenever the element is selectable by user interaction or API.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setSelectable",
          "access": "",
          "virtual": false,
          "description": "<p>You can change the selectable behavior of this object. Hands over [false] and\nthe figure has no selection handles if you try to select them with the mouse.<br></p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The selectable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "isStrechable",
          "access": "",
          "virtual": false,
          "description": "<p>Return true if the object doesn't care about the aspect ratio.\nYou can change the height and width independent.<br></p>\n<p>Replaced with &quot;getKeepAspectRatio&quot;</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "isDeleteable",
          "access": "",
          "virtual": false,
          "description": "<p>Return false if you avoid that the user can delete your figure.\nSub class can override this method.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setDeleteable",
          "access": "",
          "virtual": false,
          "description": "<p>Set the flag if the shape is deleteable.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>enable or disable flag for the delete operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setParent",
          "access": "private",
          "virtual": false,
          "description": "<p>Set the parent of this figure.\nDon't call them manually.</p>",
          "parameters": [
            {
              "name": "parent",
              "type": "draw2d.Figure",
              "description": "<p>The new parent of this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getParent",
          "access": "",
          "virtual": false,
          "description": "<p>Get the parent of this figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": ""
          }
        },
        {
          "name": "contains",
          "access": "",
          "virtual": false,
          "description": "<p>Check to see if a figure is a descendant of another figure.\n<br>\nThe contains() method returns true if the figure provided by the argument is a descendant of this figure,\nwhether it is a direct child or nested more deeply. Otherwise, it returns false.</p>",
          "parameters": [
            {
              "name": "containedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure that may be contained by (a descendant of) this figure.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getRoot",
          "access": "",
          "virtual": false,
          "description": "<p>Get the top most parent of this figure. This can be an layout figure or parent container</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": ""
          }
        },
        {
          "name": "setComposite",
          "access": "",
          "virtual": false,
          "description": "<p>Set the assigned composite of this figure.</p>",
          "parameters": [
            {
              "name": "composite",
              "type": "draw2d.shape.composite.StrongComposite",
              "description": "<p>The assigned composite of this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getComposite",
          "access": "",
          "virtual": false,
          "description": "<p>Get the assigned composite of this figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.shape.composite.StrongComposite",
            "description": ""
          }
        },
        {
          "name": "fireEvent",
          "access": "",
          "virtual": false,
          "description": "<p>Execute all handlers and behaviors attached to the figure for the given event type.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "String",
              "description": "<p>the event to trigger</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "args",
              "type": "Object",
              "description": "<p>optional parameters for the triggered event callback</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "on",
          "access": "",
          "virtual": false,
          "description": "<p>Attach an event handler function for one or more events to the figure.\nTo remove events bound with .on(), see {@link #off}.</p>\n<p>possible events are:<br></p>\n<ul>\n  <li>click</li>\n  <li>dblclick</li>\n  <li>move</li>\n  <li>resize</li>\n  <li>timer</li>\n  <li>contextmenu</li>\n  <li>show</li>\n  <li>hide</li>\n  <li>added</li>\n  <li>removed</li>\n  <li>change:[attr]</li>\n</ul>",
          "parameters": [
            {
              "name": "event",
              "type": "String",
              "description": "<p>One or more space-separated event types</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback",
              "type": "function",
              "description": "<p>A function to execute when the event is triggered.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback.emitter",
              "type": "draw2d.Figure",
              "description": "<p>the emitter of the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback.obj",
              "type": "Object",
              "description": "<p>optional event related data</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "context",
              "type": "Object",
              "description": "<p>optional context of the function callback.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "off",
          "access": "",
          "virtual": false,
          "description": "<p>The .off() method removes event handlers that were attached with {@link #on}.<br>\nCalling .off() with no arguments removes all handlers attached to the elements.<br>\n<br>\nIf a simple event name such as &quot;move&quot; is provided, all events of that type are removed from the figure.</p>",
          "parameters": [
            {
              "name": "eventOrFunction",
              "type": [
                "String",
                "function"
              ],
              "description": "<p>the event name of the registerd function or the function itself</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getBestChild",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the best figure at the location [x,y]. It is a simple hit test. Keep in mind that only visible objects\nare returned.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>The x position.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The y position.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "figureToIgnore",
              "type": [
                "draw2d.Figure",
                "Array"
              ],
              "description": "<p>The figures which should be ignored.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        }
      ]
    },
    {
      "name": "LineStartResizeHandle",
      "namespace": "draw2d.shape.basic",
      "description": "<p>draw2d.shape.basic.LineStartResizeHandle\nSelection handle for connections and normal lines.</p>\n<p>TODO: Split the LineEndResizeHandle to ConnectionEndResizeHandle and LineEndResizeHandle!!!!</p>",
      "extends": [
        "draw2d.shape.basic.LineResizeHandle"
      ],
      "access": "",
      "virtual": false,
      "fires": "",
      "constructor": {
        "name": "LineStartResizeHandle",
        "description": "",
        "parameters": [],
        "examples": []
      },
      "functions": [
        {
          "name": "init",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getRelatedPort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the Port below the ResizeHandle</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.Port",
            "description": ""
          }
        },
        {
          "name": "getOppositePort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the Port on the opposite side of the ResizeHandle</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onDrag",
          "access": "",
          "virtual": false,
          "description": "<p>Called from the framework during a drag&amp;drop operation</p>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>the x difference between the start of the drag drop operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>the y difference between the start of the drag drop operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dx2",
              "type": "Number",
              "description": "<p>The x diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy2",
              "type": "Number",
              "description": "<p>The y diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "onDrop",
          "access": "",
          "virtual": false,
          "description": "<p>Resize handle has been drop on a InputPort/OutputPort.</p>",
          "parameters": [
            {
              "name": "dropTarget",
              "type": "draw2d.Port",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "relocate",
          "access": "",
          "virtual": false,
          "description": "<p>Controls the location of the resize handle</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getOwner",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the current used SVG as string</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "getIndex",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the index of the selection. In case of a PlyLine the count is dynamic.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "createShapeElement",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setBackgroundColor",
          "access": "",
          "virtual": false,
          "description": "<p>Set the new background color of the figure. It is possible to hands over\n<code>null</code> to set the background transparent.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;bgColor&quot;: &quot;#f0f0f0&quot;\n });</code></pre>",
          "parameters": [
            {
              "name": "color",
              "type": [
                "String",
                "draw2d.util.Color"
              ],
              "description": "<p>The new background color of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "repaint",
          "access": "private",
          "virtual": false,
          "description": "<p>propagate all attributes like color, stroke,... to the shape element</p>",
          "parameters": [
            {
              "name": "attributes",
              "type": "Object",
              "description": "<p>the style attributes for the SVG shape</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onDragStart",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the drag and drop action begins. You can return [false] if you\nwant avoid the that the figure can be move.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onDragEnd",
          "access": "",
          "virtual": false,
          "description": "<p>Called after a drag and drop action.<br>\nSub classes can override this method to implement additional stuff. Don't forget to call the super implementation via <code>this._super();</code></p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "supportsSnapToHelper",
          "access": "",
          "virtual": false,
          "description": "<p>The LineResizeHandle didn't support the SnapToHelper feature if the\ncorresponding object is an Connection. A Connection is always bounded to\nPort. In this case it makes no sense to use a Grid or Geometry for snapping.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": "<p>return false if the corresponding object didn't support snapTo</p>"
          }
        },
        {
          "name": "show",
          "access": "",
          "virtual": false,
          "description": "<p>Show the ResizeHandle and add it to the canvas.<br>\nAdditional bring it in to the front of other figures.</p>",
          "parameters": [
            {
              "name": "canvas",
              "type": "draw2d.Canvas",
              "description": "<p>the canvas to use</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-position</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-position</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "hide",
          "access": "",
          "virtual": false,
          "description": "<p>Hide the resize handle and remove it from the canvas.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onKeyDown",
          "access": "",
          "virtual": false,
          "description": "<p>Override this method and redirect them to the canvas. A ResizeHandle didn't support\nKeyboard interaction at the moment.</p>",
          "parameters": [
            {
              "name": "keyCode",
              "type": "Number",
              "description": "<p>the id of the pressed key</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrl",
              "type": "Boolean",
              "description": "<p>true if the user has pressed the CTRL/STRG key as well.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setAlpha",
          "access": "",
          "virtual": false,
          "description": "<p>the the opacity of the element.</p>",
          "parameters": [
            {
              "name": "percent",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setDiameter",
          "access": "",
          "virtual": false,
          "description": "<p>Set the diameter of the circle. The center of the circle will be retained.</p>",
          "parameters": [
            {
              "name": "d",
              "type": "Number",
              "description": "<p>The new diameter of the circle.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getDiameter",
          "access": "",
          "virtual": false,
          "description": "<p>Get the diameter of the circle.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setRadius",
          "access": "",
          "virtual": false,
          "description": "<p>Set the radius of the circle. The center of the circle will be retained.</p>",
          "parameters": [
            {
              "name": "d",
              "type": "Number",
              "description": "<p>The new radius of the circle.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPersistentAttributes",
          "access": "",
          "virtual": false,
          "description": "<p>Return an objects with all important attributes for XML or JSON serialization</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Object",
            "description": ""
          }
        },
        {
          "name": "getCenter",
          "access": "",
          "virtual": false,
          "description": "<p>Get the center of the figure</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setCenter",
          "access": "",
          "virtual": false,
          "description": "<p>Set the center of the figure.</p>",
          "parameters": [
            {
              "name": "x",
              "type": [
                "Number",
                "draw2d.geo.Point"
              ],
              "description": "<p>the new x coordinate of the center or a draw2d.geo.Point object with the center</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y coordinate of the new center of the first argument isn't a draw2d.geo.Point object</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "intersectionWithLine",
          "access": "",
          "virtual": false,
          "description": "<p>NOTE: Rotation will need to be added to this function</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getRadius",
          "access": "",
          "virtual": false,
          "description": "<p>Get the corner radius of the edges.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setDashArray",
          "access": "",
          "virtual": false,
          "description": "<p>Set the line style for this object.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   dash: dashPattern\n });</code></pre>",
          "parameters": [
            {
              "name": "dash",
              "type": "String",
              "description": "<p>can be one of this [&quot;&quot;, &quot;-&quot;, &quot;.&quot;, &quot;-.&quot;, &quot;-..&quot;, &quot;. &quot;, &quot;- &quot;, &quot;--&quot;, &quot;- .&quot;, &quot;--.&quot;, &quot;--..&quot;]</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getDashArray",
          "access": "",
          "virtual": false,
          "description": "<p>Get the line style for this object.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr(&quot;dash&quot;);</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setGlow",
          "access": "",
          "virtual": false,
          "description": "<p>Highlight the element or remove the highlighting</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>indicates glow/noGlow</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getBackgroundColor",
          "access": "",
          "virtual": false,
          "description": "<p>The current used background color.</p>\n<pre><code> // Alternatively you can use the attr method:\n var color =figure.attr(&quot;bgColor&quot;);</code></pre>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.Color",
            "description": ""
          }
        },
        {
          "name": "setStroke",
          "access": "",
          "virtual": false,
          "description": "<p>Set the stroke to use.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;stroke&quot;: 2\n });</code></pre>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "<p>The new line width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getStroke",
          "access": "",
          "virtual": false,
          "description": "<p>The used line width.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setColor",
          "access": "",
          "virtual": false,
          "description": "<p>Set the foreground color of the figure.\nThis method fires a <i>document dirty</i> event.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;color&quot;: &quot;#f3f3f3&quot;\n });</code></pre>",
          "parameters": [
            {
              "name": "color",
              "type": [
                "String",
                "draw2d.util.Color"
              ],
              "description": "<p>The new color of the line.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getColor",
          "access": "",
          "virtual": false,
          "description": "<p>Get the current used foreground color</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.Color",
            "description": ""
          }
        },
        {
          "name": "setPersistentAttributes",
          "access": "",
          "virtual": false,
          "description": "<p>Read all attributes from the serialized properties and transfer them into the shape.</p>",
          "parameters": [
            {
              "name": "memento",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setPersistPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Indicates if the node should read/write the ports via the draw2d.Figure.getPersistenAttributes\nto the JSON object</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPersistPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Indicates if the figure writes the ports to the JSON structore too.\nDefault is &quot;false&quot;</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "toFront",
          "access": "",
          "virtual": false,
          "description": "<p>Moves the element so it is the closest to the viewerâ€™s eyes, on top of other elements. Additional\nthe internal model changed as well.</p>\n<p>Optional: Inserts current object in front of the given one.</p>",
          "parameters": [
            {
              "name": "figure",
              "type": "draw2d.Figure",
              "description": "<p>move current object in front of the given one.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "toBack",
          "access": "",
          "virtual": false,
          "description": "<p>Moves the element to the background. Additional\nthe internal model changed as well.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setVisible",
          "access": "",
          "virtual": false,
          "description": "<p>Show/hide the element. The element didn't receive any mouse events (click, dblclick) if you hide the\nfigure.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   visible: flag\n });</code></pre>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "duration",
              "type": "Number",
              "description": "<p>the optional number for the fadeIn /fadeOut of the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Return all ports of the node. The results contains\nall ports of the children too per default. Set <b>recursive</b>\nto false to retrieve direct assigned ports only.</p>",
          "parameters": [
            {
              "name": "recursive",
              "type": "Boolean",
              "description": "<p>indicates if the method should return children ports too. Default is <b>true</b></p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "getInputPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Return all input ports of the node.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "getOutputPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Return all output ports of the node.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "clone",
          "access": "",
          "virtual": false,
          "description": "<p>Clone the figure. <br>\nYou must override and implement the methods <b>getPersistentAttributes</b> and <b>setPersistentAttributes</b> for your custom\nfigures if the have special attributes.</p>\n<p>The clone() method performs a deep copy of the object, meaning that it copies the children, ports and decorations\nper default. You can control the clone procedure with the 'cloneMetaData'.</p>",
          "parameters": [
            {
              "name": "cloneMetaData",
              "type": "Object",
              "description": "<p>controls the clone procedure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "cloneMetaData.excludeChildren",
              "type": "Boolean",
              "description": "<p>set it to true if you want exclude the children.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "cloneMetaData.excludePorts",
              "type": "Boolean",
              "description": "<p>set it to true if you want exclude the ports of the node.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portName",
              "type": "String",
              "description": "<p>The name of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.Port",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getInputPort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the input port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.InputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getOutputPort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the output port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or the numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.OutputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getHybridPort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the input port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.InputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "addPort",
          "access": "",
          "virtual": false,
          "description": "<p>Add a port to this node at the given position.<br></p>",
          "parameters": [
            {
              "name": "port",
              "type": "draw2d.Port",
              "description": "<p>The new port to add.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>The layout for the port.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "resetPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Remove all ports of this node</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "removePort",
          "access": "",
          "virtual": false,
          "description": "<p>Removes a port and all related connections from this node.<br></p>",
          "parameters": [
            {
              "name": "port",
              "type": "draw2d.Port",
              "description": "<p>The port to remove.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "createPort",
          "access": "",
          "virtual": false,
          "description": "<p>Create a standard Port for this element. Inherited class can override this\nmethod to create its own type of ports.</p>",
          "parameters": [
            {
              "name": "type",
              "type": "String",
              "description": "<p>the type of the requested port. possible [&quot;input&quot;, &quot;output&quot;]</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>the layouter to use for this port</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getConnections",
          "access": "",
          "virtual": false,
          "description": "<p>Return all connections related to this node.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "setCanvas",
          "access": "",
          "virtual": false,
          "description": "<p>Set the canvas element of this figures. This can be used to determine whenever an element\nis added or removed to the canvas.</p>",
          "parameters": [
            {
              "name": "canvas",
              "type": "draw2d.Canvas",
              "description": "<p>the new parent of the figure or null</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setRotationAngle",
          "access": "",
          "virtual": false,
          "description": "<p>Set the rotation angle in degree [0..356]<br>\n<b>Only steps of 90 degree is working well</b>\n<br>\n// Alternatively you can use the attr method:\nfigure.attr({\nangle: angle\n});</p>",
          "parameters": [
            {
              "name": "angle",
              "type": "Number",
              "description": "<p>the rotation angle in degree</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setDimension",
          "access": "",
          "virtual": false,
          "description": "<p>Set the new width and height of the figure.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n    width:  w,\n    height: h\n });</code></pre>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "<p>The new width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "h",
              "type": "Number",
              "description": "<p>The new height of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onPortValueChanged",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the value of any port has been changed</p>",
          "parameters": [
            {
              "name": "relatedPort",
              "type": "draw2d.Port",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "layoutPorts",
          "access": "private",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "createCommand",
          "access": "private",
          "virtual": false,
          "description": "<p>Returns the Command to perform the specified Request or null.</p>",
          "parameters": [
            {
              "name": "request",
              "type": "draw2d.command.CommandType",
              "description": "<p>describes the Command being requested</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.command.Command",
            "description": "<p>null or a Command</p>"
          }
        },
        {
          "name": "attr",
          "access": "",
          "virtual": false,
          "description": "<p>Read or set shape attributes.<br>\nWhen no value is given, reads specified attribute from the element.<br>\nWhen value is given, sets the attribute to that value.\nMultiple attributes can be set by passing an object with name-value pairs.</p>\n<pre><code>let figure = new draw2d.shape.basic.Rectangle();\nfigure.attr('x');      //=&gt; read value\nfigure.attr('x', 30);  //=&gt; set value\n\n// multiple attributes:\nfigure.attr({\n  x: 30,\n  y: 40,\n  width : 200,\n  height: 50,\n  cssClass: &quot;red_border_figure&quot;\n});\n\n// it is possible to override any method of the figure as well\n// Instead of inheritance you can just override the callback methods\n// like\n//\nfigure.attr({\n   onClick : function(){\n       alert(&quot;click&quot;);\n   }\n});\n\n// or you can pass the attr values in the constructor\n//\nlet clickFigure = new draw2d.shape.basic.Rectangle({\n   onClick : function(){\n       alert(&quot;click&quot;);\n   }\n});\n</code></pre>\n<p>Additional you can set the user defined values (userData) with this method\nusing the dot-notation. User defined values are always part of the exported\nJSON data.</p>\n<pre><code>// setting multiple attributes:\nfigure.attr({\n  &quot;userData.my.property.x&quot;: 30,\n  &quot;userData.my.property.y&quot;: 40\n});\n</code></pre>\n<p>Also set using array notation is possible for the userData:</p>\n<pre><code>// dot notation and array brackets:\nfigure.attr({\n  &quot;userData.my.names[0]&quot;: &quot;John&quot;,\n  &quot;userData.my.names[1]&quot;: &quot;Doe&quot;\n});\n</code></pre>\n<p>The Object returned should be the equivalent structured object:</p>\n<pre><code>let obj = figure.getUserData();\n</code></pre>\n<p>That is, where obj is equivalent to:</p>\n<pre><code>let obj = {\n    my:{\n        property:{\n            x: 30,\n            y: 40\n       },\n       names:  [&quot;John&quot;, &quot;Doe&quot;]\n   }\n</code></pre>\n<p>};</p>",
          "parameters": [
            {
              "name": "name",
              "type": "String/Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "value",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "pick",
          "access": "",
          "virtual": false,
          "description": "<p>Return a copy of the object, filtered to only have values for the whitelisted keys.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "select",
          "access": "private",
          "virtual": false,
          "description": "<p>Add the figure to the current selection and propagate this to all edit policies.</p>",
          "parameters": [
            {
              "name": "asPrimarySelection",
              "type": "Boolean",
              "description": "<p>true if the element should be the primary selection</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "unselect",
          "access": "private",
          "virtual": false,
          "description": "<p>Unselect the figure and propagete this event to all edit policies.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setSelectionAdapter",
          "access": "",
          "virtual": false,
          "description": "<p>Returns a function which returns the the figure which must handle the selection handling.</p>",
          "parameters": [
            {
              "name": "adapter",
              "type": "function",
              "description": "<p>function which returns the figure which handles the selection handling</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getSelectionAdapter",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "function",
            "description": ""
          }
        },
        {
          "name": "isSelected",
          "access": "",
          "virtual": false,
          "description": "<p>Returns true if the figure part of the current canvas selection.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setUserData",
          "access": "",
          "virtual": false,
          "description": "<p>Allows a user to attach (or remove) data to an element, without needing to create a custom figure or shape.\nThe data must be a valid JSON object.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   userData: object\n });</code></pre>",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getUserData",
          "access": "",
          "virtual": false,
          "description": "<p>Returns any user data set previously on the given figure by setUserData.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Object",
            "description": ""
          }
        },
        {
          "name": "getId",
          "access": "",
          "virtual": false,
          "description": "<p>Return the UUID of this element.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "setId",
          "access": "",
          "virtual": false,
          "description": "<p>Set the id of this element.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  id: newId\n});</code></pre>",
          "parameters": [
            {
              "name": "newId",
              "type": "String",
              "description": "<p>the new id for this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Return the css styling class name of the element.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "setCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Set the css class of the node.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;cssClass&quot;: &quot;red_border_figure&quot;\n });</code></pre>",
          "parameters": [
            {
              "name": "cssClass",
              "type": "String",
              "description": "<p>the new css class name of the node</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "hasCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>The method will return true if the class is assigned to the element, even if other classes also are.</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the class name to check</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "addCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Add a CSS class to the figure.<br>\nIt's important to note that this method does not replace a class. It simply adds the class,\nappending it to any which may already be assigned to the elements.</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "removeCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Remove the given css class name from the figure</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the css class name to add</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "toggleCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Add or remove the given css class name from the figure</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the class name to toggle</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getCanvas",
          "access": "",
          "virtual": false,
          "description": "<p>Return the current assigned canvas container.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.Canvas",
            "description": ""
          }
        },
        {
          "name": "startTimer",
          "access": "",
          "virtual": false,
          "description": "<p>Start a timer which calls the onTimer method in the given interval.</p>",
          "parameters": [
            {
              "name": "milliSeconds",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "stopTimer",
          "access": "",
          "virtual": false,
          "description": "<p>Stop the internal timer.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onTimer",
          "access": "",
          "virtual": false,
          "description": "<p>Callback method for the internal timer handling<br>\nInherit classes must override this method if they want use the timer feature.</p>\n<pre><code> // Alternatively you can register for this event with\n figure.on(&quot;timer&quot;, function(emitter){\n     alert(&quot;timer fired&quot;);\n });</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "installEditPolicy",
          "access": "",
          "virtual": false,
          "description": "<p>Install a new edit policy to the figure. Each editpolicy is able to focus on a single editing\ntask or group of related tasks. This also allows editing behavior to be selectively reused across\ndifferent figure implementations. Also, behavior can change dynamically, such as when the layouts\nor routing methods change.</p>\n<p>Example for limited DragDrop behavior can be a draw2d.layout.constraint.RegionConstriantPolicy.</p>",
          "parameters": [
            {
              "name": "policy",
              "type": "draw2d.policy.EditPolicy",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "uninstallEditPolicy",
          "access": "",
          "virtual": false,
          "description": "<p>UnInstall the edit policy from the figure. Either the instance itself if found\nor all kind of the given edit policies.</p>",
          "parameters": [
            {
              "name": "policy",
              "type": "draw2d.policy.EditPolicy",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "add",
          "access": "",
          "virtual": false,
          "description": "<p>Add a child figure to the figure. The hands over figure doesn't support drag&amp;drop\noperations. It's only a decorator for the connection.<br>\nMainly for labels or other decorations</p>\n<pre><code>let start = new draw2d.shape.node.Start({x:80, y:150});\nstart.add(new draw2d.shape.basic.Label({text:&quot;Test Label&quot;}), new draw2d.layout.locator.TopLocator());\n\ncanvas.add( start);</code></pre>",
          "parameters": [
            {
              "name": "child",
              "type": "draw2d.Figure",
              "description": "<p>the figure to add as decoration to the connection.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>the locator for the child.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "index",
              "type": "Number",
              "description": "<p>optional index where to insert the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "remove",
          "access": "",
          "virtual": false,
          "description": "<p>Remove the child figure from this figure and the canvas</p>",
          "parameters": [
            {
              "name": "child",
              "type": "draw2d.Figure",
              "description": "<p>the figure to remove.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Object",
            "description": "<p>the removed tupple of figure/locator or null if the child isn't found</p>"
          }
        },
        {
          "name": "getChildren",
          "access": "",
          "virtual": false,
          "description": "<p>Return all children/decorations of this shape which has been added with\ndraw2d.Figure.add</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "resetChildren",
          "access": "",
          "virtual": false,
          "description": "<p>Remove all children/decorations of this shape</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getShapeElement",
          "access": "protected",
          "virtual": false,
          "description": "<p>return the current SVG shape element or create it on demand.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getTopLevelShapeElement",
          "access": "private",
          "virtual": false,
          "description": "<p>Get the top level shape element. May the figure has a set of SVG elements. In this case this\nmethod must return the top level node.<br>\nThis method is used for the toFront/toBack method to order the nodes in the correct way.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "applyTransformation",
          "access": "private",
          "virtual": false,
          "description": "<p>apply a transformation to the shape like rotation, translate,..</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getHandleBBox",
          "access": "",
          "virtual": false,
          "description": "<p>Allow dragging only when the cursor is over a specific part of the figure.\n<br>\nOverride this method to specify the bounding box of an element or a draw2d.util.ArrayList\nof draw2d.geo.Rectangle of bounding boxes used to drag the figure. The returned coordinates\nare absolute coordinates to the canvas.\n<br>\n<br>\nDefault implementation returns <b>null</b> to indicate to use the complete figures as\ndrag handle.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": [
              "draw2d.geo.Rectangle",
              "draw2d.util.ArrayList"
            ],
            "description": ""
          }
        },
        {
          "name": "onPanning",
          "access": "",
          "virtual": false,
          "description": "<p>Called by the framework if the figure returns false for the drag operation. In this\ncase we send a &quot;panning&quot; event - mouseDown + mouseMove. This is very useful for\nUI-Widget like slider, spinner,...</p>\n<pre><code> // You can alternatively register an event handler with:\n figure.on(&quot;panning&quot;, function(emitter, eventData){\n     alert(&quot;panning of the figure called&quot;);\n });</code></pre>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>the x difference between the mouse down operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>the y difference between the mouse down operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dx2",
              "type": "Number",
              "description": "<p>The x diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy2",
              "type": "Number",
              "description": "<p>The y diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onPanningEnd",
          "access": "",
          "virtual": false,
          "description": "<p>Called by the framework if the panning event of the figures ends. This happens\nafter the mous up event if the panning is active.</p>\n<pre><code> // You can alternatively register an event handler with:\n figure.on(&quot;panningEnd&quot;, function(emitter){\n     alert(&quot;panning of the figure called&quot;);\n });</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "delegateTarget",
          "access": "private",
          "virtual": false,
          "description": "<p>Called by the framework during drag&amp;drop operations if the user drag a figure over this figure</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": "<p>the figure which should receive the drop event or null if the element didn't want a drop event</p>"
          }
        },
        {
          "name": "onDragEnter",
          "access": "",
          "virtual": false,
          "description": "<p>Called by the framework during drag&amp;drop operations if the user drag a figure over this figure</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onDragLeave",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the DragDrop object leaving the current hover figure.</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onCatch",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the user dropped an figure onto this element. This event is ONLY fired if the\nin the canvas installed {@link draw2d.policy.canvas.DropInterceptorPolicy} allow this.</p>",
          "parameters": [
            {
              "name": "droppedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The dropped figure.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onMouseEnter",
          "access": "",
          "virtual": false,
          "description": "<p>Callback method for the mouse enter event. Usefull for mouse hover-effects.\nOverride this method for your own effects. Don't call them manually.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onMouseLeave",
          "access": "",
          "virtual": false,
          "description": "<p>Callback method for the mouse leave event. Useful for mouse hover-effects.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onDoubleClick",
          "access": "",
          "virtual": false,
          "description": "<p>Called when a user dbl clicks on the element</p>\n<pre><code> // Alternatively you can register an event with:\n //\n figure.on(&quot;dblclick&quot;, function(emitter, event){\n     alert(&quot;user dbl click on the figure&quot;);\n });</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onClick",
          "access": "",
          "virtual": false,
          "description": "<p>Called when a user clicks on the element.</p>\n<pre><code> // You can alternatively register an event handler with:\n figure.on(&quot;click&quot;, function(emitter, event){\n     alert(&quot;user click on the figure&quot;);\n });</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onContextMenu",
          "access": "",
          "virtual": false,
          "description": "<p>called by the framework if the figure should show the context menu.<br>\nThe strategy to show the context menu depends on the platform. Either looong press or\nright click with the mouse.</p>\n<pre><code> // Alternatively you register for this event with:\n figure.on(&quot;contextmenu&quot;, function(emitter, event){\n     alert(&quot;user press the right mouse button for a context menu&quot;);\n });</code></pre>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate to show the menu</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate to show the menu</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getAlpha",
          "access": "",
          "virtual": false,
          "description": "<p>Return the alpha blending of the figure</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the current alpha blending</p>"
          }
        },
        {
          "name": "getRotationAngle",
          "access": "",
          "virtual": false,
          "description": "<p>return the rotation angle of the figure in degree of [0..356].</p>\n<br>\n<b>NOTE: this method is pre alpha and not for production. Only steps of 90 degree is working well</b>\n<br>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "isVisible",
          "access": "",
          "virtual": false,
          "description": "<p>Return true if the figure visible.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setKeepAspectRatio",
          "access": "",
          "virtual": false,
          "description": "<p>Guarantee, that the figure width/height will not be distorted. Applicable before calling setDimension().\nIt is false by default.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>boolean flag if the figure should respect the aspect ratio</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getKeepAspectRatio",
          "access": "",
          "virtual": false,
          "description": "<p>Return the flag if the shape keep the aspect ratio.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getZOrder",
          "access": "",
          "virtual": false,
          "description": "<p>Return the current z-index of the element. Currently this is an expensive method. The index will be calculated\nall the time. Caching is not implemented at the moment.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setCanSnapToHelper",
          "access": "",
          "virtual": false,
          "description": "<p>Set the flag if this object can snap to grid or geometry.\nA window of dialog should set this flag to false.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The snap to grid/geometry enable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getCanSnapToHelper",
          "access": "",
          "virtual": false,
          "description": "<p>Returns true if the figure can snap to any helper like a grid, guide, geometrie\nor something else.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "getSnapToGridAnchor",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "setSnapToGridAnchor",
          "access": "",
          "virtual": false,
          "description": "<p>Set the hot spot for all snapTo### operations.</p>",
          "parameters": [
            {
              "name": "point",
              "type": "draw2d.geo.Point",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setWidth",
          "access": "",
          "virtual": false,
          "description": "<p>Set the width of the figure and consider the minWidth attribute</p>",
          "parameters": [
            {
              "name": "width",
              "type": "Number",
              "description": "<p>the new width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getWidth",
          "access": "",
          "virtual": false,
          "description": "<p>The current width of the figure.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setHeight",
          "access": "",
          "virtual": false,
          "description": "<p>Set the heigth of the figure and consider the minWidth attribute</p>",
          "parameters": [
            {
              "name": "height",
              "type": "Number",
              "description": "<p>the new height of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getHeight",
          "access": "",
          "virtual": false,
          "description": "<p>The current height of the figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "getMinWidth",
          "access": "",
          "virtual": false,
          "description": "<p>This value is relevant for the interactive resize of the figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>Returns the min. width of this object.</p>"
          }
        },
        {
          "name": "setMinWidth",
          "access": "",
          "virtual": false,
          "description": "<p>Set the minimum width of this figure</p>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getMinHeight",
          "access": "",
          "virtual": false,
          "description": "<p>This value is relevant for the interactive resize of the figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>Returns the min. height of this object.</p>"
          }
        },
        {
          "name": "setMinHeight",
          "access": "",
          "virtual": false,
          "description": "<p>Set the minimum height of the figure.</p>",
          "parameters": [
            {
              "name": "h",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setX",
          "access": "",
          "virtual": false,
          "description": "<p>the the x-offset related to the parent figure or canvas</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the new x offset of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getX",
          "access": "",
          "virtual": false,
          "description": "<p>The x-offset related to the parent figure or canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the x-offset to the parent figure</p>"
          }
        },
        {
          "name": "setY",
          "access": "",
          "virtual": false,
          "description": "<p>the the y-offset related to the parent figure or canvas</p>",
          "parameters": [
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the new x offset of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getY",
          "access": "",
          "virtual": false,
          "description": "<p>The y-offset related to the parent figure or canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>The y-offset to the parent figure.</p>"
          }
        },
        {
          "name": "getAbsoluteX",
          "access": "",
          "virtual": false,
          "description": "<p>The x-offset related to the canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the x-offset to the canvas</p>"
          }
        },
        {
          "name": "getAbsoluteY",
          "access": "",
          "virtual": false,
          "description": "<p>The y-offset related to the canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>The y-offset to the canvas.</p>"
          }
        },
        {
          "name": "getAbsolutePosition",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the absolute y-position of the port.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getAbsoluteBounds",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the absolute y-position of the port.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "setPosition",
          "access": "",
          "virtual": false,
          "description": "<p>Set the position of the object.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   x: x,\n   y: y\n });</code></pre>",
          "parameters": [
            {
              "name": "x",
              "type": [
                "Number",
                "draw2d.geo.Point"
              ],
              "description": "<p>The new x coordinate of the figure or the x/y coordinate if it is an draw2d.geo.Point</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The new y coordinate of the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPosition",
          "access": "",
          "virtual": false,
          "description": "<p>Get the current position of the figure</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "translate",
          "access": "",
          "virtual": false,
          "description": "<p>Translate the figure with the given x/y offset.</p>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>The x offset to translate</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>The y offset to translate</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setBoundingBox",
          "access": "",
          "virtual": false,
          "description": "<p>Set the bounding box of the figure</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   width: w,\n   height: h,\n   x: x,\n   y: y\n });\n\n // or\n figure.attr({\n   boundingBox: {x:1, y:100, width:30, height:30}\n });</code></pre>",
          "parameters": [
            {
              "name": "rect",
              "type": "draw2d.geo.Rectangle",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getBoundingBox",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the bounding box of the figure in absolute position to the canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "hitTest",
          "access": "",
          "virtual": false,
          "description": "<p>Detect whenever the hands over coordinate is inside the figure.\nThe default implementation is a simple bounding box test.</p>",
          "parameters": [
            {
              "name": "iX",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "iY",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "corona",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setDraggable",
          "access": "",
          "virtual": false,
          "description": "<p>Switch on/off the drag drop behaviour of this object</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The new drag drop indicator</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "isDraggable",
          "access": "",
          "virtual": false,
          "description": "<p>Get the Drag drop enable flag</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": "<p>The new drag drop indicator</p>"
          }
        },
        {
          "name": "isResizeable",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the true if the figure can be resized.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setResizeable",
          "access": "",
          "virtual": false,
          "description": "<p>You can change the resizeable behaviour of this object. Hands over [false] and\nthe figure has no resizehandles if you select them with the mouse.<br></p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   resizeable: flag\n });</code></pre>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The resizeable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "isSelectable",
          "access": "",
          "virtual": false,
          "description": "<p>Indicates whenever the element is selectable by user interaction or API.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setSelectable",
          "access": "",
          "virtual": false,
          "description": "<p>You can change the selectable behavior of this object. Hands over [false] and\nthe figure has no selection handles if you try to select them with the mouse.<br></p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The selectable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "isStrechable",
          "access": "",
          "virtual": false,
          "description": "<p>Return true if the object doesn't care about the aspect ratio.\nYou can change the height and width independent.<br></p>\n<p>Replaced with &quot;getKeepAspectRatio&quot;</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "isDeleteable",
          "access": "",
          "virtual": false,
          "description": "<p>Return false if you avoid that the user can delete your figure.\nSub class can override this method.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setDeleteable",
          "access": "",
          "virtual": false,
          "description": "<p>Set the flag if the shape is deleteable.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>enable or disable flag for the delete operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setParent",
          "access": "private",
          "virtual": false,
          "description": "<p>Set the parent of this figure.\nDon't call them manually.</p>",
          "parameters": [
            {
              "name": "parent",
              "type": "draw2d.Figure",
              "description": "<p>The new parent of this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getParent",
          "access": "",
          "virtual": false,
          "description": "<p>Get the parent of this figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": ""
          }
        },
        {
          "name": "contains",
          "access": "",
          "virtual": false,
          "description": "<p>Check to see if a figure is a descendant of another figure.\n<br>\nThe contains() method returns true if the figure provided by the argument is a descendant of this figure,\nwhether it is a direct child or nested more deeply. Otherwise, it returns false.</p>",
          "parameters": [
            {
              "name": "containedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure that may be contained by (a descendant of) this figure.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getRoot",
          "access": "",
          "virtual": false,
          "description": "<p>Get the top most parent of this figure. This can be an layout figure or parent container</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": ""
          }
        },
        {
          "name": "setComposite",
          "access": "",
          "virtual": false,
          "description": "<p>Set the assigned composite of this figure.</p>",
          "parameters": [
            {
              "name": "composite",
              "type": "draw2d.shape.composite.StrongComposite",
              "description": "<p>The assigned composite of this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getComposite",
          "access": "",
          "virtual": false,
          "description": "<p>Get the assigned composite of this figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.shape.composite.StrongComposite",
            "description": ""
          }
        },
        {
          "name": "fireEvent",
          "access": "",
          "virtual": false,
          "description": "<p>Execute all handlers and behaviors attached to the figure for the given event type.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "String",
              "description": "<p>the event to trigger</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "args",
              "type": "Object",
              "description": "<p>optional parameters for the triggered event callback</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "on",
          "access": "",
          "virtual": false,
          "description": "<p>Attach an event handler function for one or more events to the figure.\nTo remove events bound with .on(), see {@link #off}.</p>\n<p>possible events are:<br></p>\n<ul>\n  <li>click</li>\n  <li>dblclick</li>\n  <li>move</li>\n  <li>resize</li>\n  <li>timer</li>\n  <li>contextmenu</li>\n  <li>show</li>\n  <li>hide</li>\n  <li>added</li>\n  <li>removed</li>\n  <li>change:[attr]</li>\n</ul>",
          "parameters": [
            {
              "name": "event",
              "type": "String",
              "description": "<p>One or more space-separated event types</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback",
              "type": "function",
              "description": "<p>A function to execute when the event is triggered.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback.emitter",
              "type": "draw2d.Figure",
              "description": "<p>the emitter of the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback.obj",
              "type": "Object",
              "description": "<p>optional event related data</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "context",
              "type": "Object",
              "description": "<p>optional context of the function callback.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "off",
          "access": "",
          "virtual": false,
          "description": "<p>The .off() method removes event handlers that were attached with {@link #on}.<br>\nCalling .off() with no arguments removes all handlers attached to the elements.<br>\n<br>\nIf a simple event name such as &quot;move&quot; is provided, all events of that type are removed from the figure.</p>",
          "parameters": [
            {
              "name": "eventOrFunction",
              "type": [
                "String",
                "function"
              ],
              "description": "<p>the event name of the registerd function or the function itself</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getBestChild",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the best figure at the location [x,y]. It is a simple hit test. Keep in mind that only visible objects\nare returned.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>The x position.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The y position.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "figureToIgnore",
              "type": [
                "draw2d.Figure",
                "Array"
              ],
              "description": "<p>The figures which should be ignored.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        }
      ]
    },
    {
      "name": "Oval",
      "namespace": "draw2d.shape.basic",
      "description": "<p>draw2d.shape.basic.Oval\nOval figure.</p>",
      "extends": [
        "draw2d.VectorFigure"
      ],
      "access": "",
      "virtual": false,
      "fires": "",
      "constructor": {
        "name": "Oval",
        "description": "",
        "parameters": [],
        "examples": [
          "let oval =  new draw2d.shape.basic.Oval({width:150, height:100, x:50, y:10});\n\n    canvas.add(oval);"
        ]
      },
      "functions": [
        {
          "name": "init",
          "access": "",
          "virtual": false,
          "description": "<p>Creates a new figure element which are not assigned to any canvas.</p>",
          "parameters": [
            {
              "name": "attr",
              "type": "Object",
              "description": "<p>the configuration of the shape</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "createShapeElement",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getCenter",
          "access": "",
          "virtual": false,
          "description": "<p>Get the center of the figure</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setCenter",
          "access": "",
          "virtual": false,
          "description": "<p>Set the center of the figure.</p>",
          "parameters": [
            {
              "name": "x",
              "type": [
                "Number",
                "draw2d.geo.Point"
              ],
              "description": "<p>the new x coordinate of the center or a draw2d.geo.Point object with the center</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y coordinate of the new center of the first argument isn't a draw2d.geo.Point object</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "repaint",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "intersectionWithLine",
          "access": "",
          "virtual": false,
          "description": "<p>NOTE: Rotation will need to be added to this function</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setRadius",
          "access": "",
          "virtual": false,
          "description": "<p>Sets the corner radius or the edges.</p>",
          "parameters": [
            {
              "name": "radius",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getRadius",
          "access": "",
          "virtual": false,
          "description": "<p>Get the corner radius of the edges.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setDashArray",
          "access": "",
          "virtual": false,
          "description": "<p>Set the line style for this object.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   dash: dashPattern\n });</code></pre>",
          "parameters": [
            {
              "name": "dash",
              "type": "String",
              "description": "<p>can be one of this [&quot;&quot;, &quot;-&quot;, &quot;.&quot;, &quot;-.&quot;, &quot;-..&quot;, &quot;. &quot;, &quot;- &quot;, &quot;--&quot;, &quot;- .&quot;, &quot;--.&quot;, &quot;--..&quot;]</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getDashArray",
          "access": "",
          "virtual": false,
          "description": "<p>Get the line style for this object.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr(&quot;dash&quot;);</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setGlow",
          "access": "",
          "virtual": false,
          "description": "<p>Highlight the element or remove the highlighting</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>indicates glow/noGlow</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "repaint",
          "access": "private",
          "virtual": false,
          "description": "<p>propagate all attributes like color, stroke,... to the shape element</p>",
          "parameters": [
            {
              "name": "attributes",
              "type": "Object",
              "description": "<p>the style attributes for the SVG shape</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setBackgroundColor",
          "access": "",
          "virtual": false,
          "description": "<p>Set the new background color of the figure. It is possible to hands over\n<code>null</code> to set the background transparent.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;bgColor&quot;: &quot;#f0f0f0&quot;\n });</code></pre>",
          "parameters": [
            {
              "name": "color",
              "type": [
                "String",
                "draw2d.util.Color"
              ],
              "description": "<p>The new background color of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getBackgroundColor",
          "access": "",
          "virtual": false,
          "description": "<p>The current used background color.</p>\n<pre><code> // Alternatively you can use the attr method:\n var color =figure.attr(&quot;bgColor&quot;);</code></pre>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.Color",
            "description": ""
          }
        },
        {
          "name": "setStroke",
          "access": "",
          "virtual": false,
          "description": "<p>Set the stroke to use.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;stroke&quot;: 2\n });</code></pre>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "<p>The new line width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getStroke",
          "access": "",
          "virtual": false,
          "description": "<p>The used line width.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setColor",
          "access": "",
          "virtual": false,
          "description": "<p>Set the foreground color of the figure.\nThis method fires a <i>document dirty</i> event.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;color&quot;: &quot;#f3f3f3&quot;\n });</code></pre>",
          "parameters": [
            {
              "name": "color",
              "type": [
                "String",
                "draw2d.util.Color"
              ],
              "description": "<p>The new color of the line.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getColor",
          "access": "",
          "virtual": false,
          "description": "<p>Get the current used foreground color</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.Color",
            "description": ""
          }
        },
        {
          "name": "getPersistentAttributes",
          "access": "",
          "virtual": false,
          "description": "<p>Return an objects with all important attributes for XML or JSON serialization</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Object",
            "description": ""
          }
        },
        {
          "name": "setPersistentAttributes",
          "access": "",
          "virtual": false,
          "description": "<p>Read all attributes from the serialized properties and transfer them into the shape.</p>",
          "parameters": [
            {
              "name": "memento",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setPersistPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Indicates if the node should read/write the ports via the draw2d.Figure.getPersistenAttributes\nto the JSON object</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPersistPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Indicates if the figure writes the ports to the JSON structore too.\nDefault is &quot;false&quot;</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "toFront",
          "access": "",
          "virtual": false,
          "description": "<p>Moves the element so it is the closest to the viewerâ€™s eyes, on top of other elements. Additional\nthe internal model changed as well.</p>\n<p>Optional: Inserts current object in front of the given one.</p>",
          "parameters": [
            {
              "name": "figure",
              "type": "draw2d.Figure",
              "description": "<p>move current object in front of the given one.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "toBack",
          "access": "",
          "virtual": false,
          "description": "<p>Moves the element to the background. Additional\nthe internal model changed as well.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setVisible",
          "access": "",
          "virtual": false,
          "description": "<p>Show/hide the element. The element didn't receive any mouse events (click, dblclick) if you hide the\nfigure.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   visible: flag\n });</code></pre>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "duration",
              "type": "Number",
              "description": "<p>the optional number for the fadeIn /fadeOut of the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Return all ports of the node. The results contains\nall ports of the children too per default. Set <b>recursive</b>\nto false to retrieve direct assigned ports only.</p>",
          "parameters": [
            {
              "name": "recursive",
              "type": "Boolean",
              "description": "<p>indicates if the method should return children ports too. Default is <b>true</b></p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "getInputPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Return all input ports of the node.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "getOutputPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Return all output ports of the node.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "clone",
          "access": "",
          "virtual": false,
          "description": "<p>Clone the figure. <br>\nYou must override and implement the methods <b>getPersistentAttributes</b> and <b>setPersistentAttributes</b> for your custom\nfigures if the have special attributes.</p>\n<p>The clone() method performs a deep copy of the object, meaning that it copies the children, ports and decorations\nper default. You can control the clone procedure with the 'cloneMetaData'.</p>",
          "parameters": [
            {
              "name": "cloneMetaData",
              "type": "Object",
              "description": "<p>controls the clone procedure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "cloneMetaData.excludeChildren",
              "type": "Boolean",
              "description": "<p>set it to true if you want exclude the children.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "cloneMetaData.excludePorts",
              "type": "Boolean",
              "description": "<p>set it to true if you want exclude the ports of the node.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portName",
              "type": "String",
              "description": "<p>The name of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.Port",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getInputPort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the input port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.InputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getOutputPort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the output port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or the numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.OutputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getHybridPort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the input port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.InputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "addPort",
          "access": "",
          "virtual": false,
          "description": "<p>Add a port to this node at the given position.<br></p>",
          "parameters": [
            {
              "name": "port",
              "type": "draw2d.Port",
              "description": "<p>The new port to add.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>The layout for the port.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "resetPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Remove all ports of this node</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "removePort",
          "access": "",
          "virtual": false,
          "description": "<p>Removes a port and all related connections from this node.<br></p>",
          "parameters": [
            {
              "name": "port",
              "type": "draw2d.Port",
              "description": "<p>The port to remove.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "createPort",
          "access": "",
          "virtual": false,
          "description": "<p>Create a standard Port for this element. Inherited class can override this\nmethod to create its own type of ports.</p>",
          "parameters": [
            {
              "name": "type",
              "type": "String",
              "description": "<p>the type of the requested port. possible [&quot;input&quot;, &quot;output&quot;]</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>the layouter to use for this port</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getConnections",
          "access": "",
          "virtual": false,
          "description": "<p>Return all connections related to this node.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "setCanvas",
          "access": "",
          "virtual": false,
          "description": "<p>Set the canvas element of this figures. This can be used to determine whenever an element\nis added or removed to the canvas.</p>",
          "parameters": [
            {
              "name": "canvas",
              "type": "draw2d.Canvas",
              "description": "<p>the new parent of the figure or null</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setRotationAngle",
          "access": "",
          "virtual": false,
          "description": "<p>Set the rotation angle in degree [0..356]<br>\n<b>Only steps of 90 degree is working well</b>\n<br>\n// Alternatively you can use the attr method:\nfigure.attr({\nangle: angle\n});</p>",
          "parameters": [
            {
              "name": "angle",
              "type": "Number",
              "description": "<p>the rotation angle in degree</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setDimension",
          "access": "",
          "virtual": false,
          "description": "<p>Set the new width and height of the figure.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n    width:  w,\n    height: h\n });</code></pre>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "<p>The new width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "h",
              "type": "Number",
              "description": "<p>The new height of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onPortValueChanged",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the value of any port has been changed</p>",
          "parameters": [
            {
              "name": "relatedPort",
              "type": "draw2d.Port",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "layoutPorts",
          "access": "private",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "createCommand",
          "access": "private",
          "virtual": false,
          "description": "<p>Returns the Command to perform the specified Request or null.</p>",
          "parameters": [
            {
              "name": "request",
              "type": "draw2d.command.CommandType",
              "description": "<p>describes the Command being requested</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.command.Command",
            "description": "<p>null or a Command</p>"
          }
        },
        {
          "name": "attr",
          "access": "",
          "virtual": false,
          "description": "<p>Read or set shape attributes.<br>\nWhen no value is given, reads specified attribute from the element.<br>\nWhen value is given, sets the attribute to that value.\nMultiple attributes can be set by passing an object with name-value pairs.</p>\n<pre><code>let figure = new draw2d.shape.basic.Rectangle();\nfigure.attr('x');      //=&gt; read value\nfigure.attr('x', 30);  //=&gt; set value\n\n// multiple attributes:\nfigure.attr({\n  x: 30,\n  y: 40,\n  width : 200,\n  height: 50,\n  cssClass: &quot;red_border_figure&quot;\n});\n\n// it is possible to override any method of the figure as well\n// Instead of inheritance you can just override the callback methods\n// like\n//\nfigure.attr({\n   onClick : function(){\n       alert(&quot;click&quot;);\n   }\n});\n\n// or you can pass the attr values in the constructor\n//\nlet clickFigure = new draw2d.shape.basic.Rectangle({\n   onClick : function(){\n       alert(&quot;click&quot;);\n   }\n});\n</code></pre>\n<p>Additional you can set the user defined values (userData) with this method\nusing the dot-notation. User defined values are always part of the exported\nJSON data.</p>\n<pre><code>// setting multiple attributes:\nfigure.attr({\n  &quot;userData.my.property.x&quot;: 30,\n  &quot;userData.my.property.y&quot;: 40\n});\n</code></pre>\n<p>Also set using array notation is possible for the userData:</p>\n<pre><code>// dot notation and array brackets:\nfigure.attr({\n  &quot;userData.my.names[0]&quot;: &quot;John&quot;,\n  &quot;userData.my.names[1]&quot;: &quot;Doe&quot;\n});\n</code></pre>\n<p>The Object returned should be the equivalent structured object:</p>\n<pre><code>let obj = figure.getUserData();\n</code></pre>\n<p>That is, where obj is equivalent to:</p>\n<pre><code>let obj = {\n    my:{\n        property:{\n            x: 30,\n            y: 40\n       },\n       names:  [&quot;John&quot;, &quot;Doe&quot;]\n   }\n</code></pre>\n<p>};</p>",
          "parameters": [
            {
              "name": "name",
              "type": "String/Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "value",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "pick",
          "access": "",
          "virtual": false,
          "description": "<p>Return a copy of the object, filtered to only have values for the whitelisted keys.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "select",
          "access": "private",
          "virtual": false,
          "description": "<p>Add the figure to the current selection and propagate this to all edit policies.</p>",
          "parameters": [
            {
              "name": "asPrimarySelection",
              "type": "Boolean",
              "description": "<p>true if the element should be the primary selection</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "unselect",
          "access": "private",
          "virtual": false,
          "description": "<p>Unselect the figure and propagete this event to all edit policies.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setSelectionAdapter",
          "access": "",
          "virtual": false,
          "description": "<p>Returns a function which returns the the figure which must handle the selection handling.</p>",
          "parameters": [
            {
              "name": "adapter",
              "type": "function",
              "description": "<p>function which returns the figure which handles the selection handling</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getSelectionAdapter",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "function",
            "description": ""
          }
        },
        {
          "name": "isSelected",
          "access": "",
          "virtual": false,
          "description": "<p>Returns true if the figure part of the current canvas selection.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setUserData",
          "access": "",
          "virtual": false,
          "description": "<p>Allows a user to attach (or remove) data to an element, without needing to create a custom figure or shape.\nThe data must be a valid JSON object.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   userData: object\n });</code></pre>",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getUserData",
          "access": "",
          "virtual": false,
          "description": "<p>Returns any user data set previously on the given figure by setUserData.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Object",
            "description": ""
          }
        },
        {
          "name": "getId",
          "access": "",
          "virtual": false,
          "description": "<p>Return the UUID of this element.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "setId",
          "access": "",
          "virtual": false,
          "description": "<p>Set the id of this element.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  id: newId\n});</code></pre>",
          "parameters": [
            {
              "name": "newId",
              "type": "String",
              "description": "<p>the new id for this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Return the css styling class name of the element.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "setCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Set the css class of the node.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;cssClass&quot;: &quot;red_border_figure&quot;\n });</code></pre>",
          "parameters": [
            {
              "name": "cssClass",
              "type": "String",
              "description": "<p>the new css class name of the node</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "hasCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>The method will return true if the class is assigned to the element, even if other classes also are.</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the class name to check</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "addCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Add a CSS class to the figure.<br>\nIt's important to note that this method does not replace a class. It simply adds the class,\nappending it to any which may already be assigned to the elements.</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "removeCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Remove the given css class name from the figure</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the css class name to add</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "toggleCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Add or remove the given css class name from the figure</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the class name to toggle</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getCanvas",
          "access": "",
          "virtual": false,
          "description": "<p>Return the current assigned canvas container.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.Canvas",
            "description": ""
          }
        },
        {
          "name": "startTimer",
          "access": "",
          "virtual": false,
          "description": "<p>Start a timer which calls the onTimer method in the given interval.</p>",
          "parameters": [
            {
              "name": "milliSeconds",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "stopTimer",
          "access": "",
          "virtual": false,
          "description": "<p>Stop the internal timer.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onTimer",
          "access": "",
          "virtual": false,
          "description": "<p>Callback method for the internal timer handling<br>\nInherit classes must override this method if they want use the timer feature.</p>\n<pre><code> // Alternatively you can register for this event with\n figure.on(&quot;timer&quot;, function(emitter){\n     alert(&quot;timer fired&quot;);\n });</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "installEditPolicy",
          "access": "",
          "virtual": false,
          "description": "<p>Install a new edit policy to the figure. Each editpolicy is able to focus on a single editing\ntask or group of related tasks. This also allows editing behavior to be selectively reused across\ndifferent figure implementations. Also, behavior can change dynamically, such as when the layouts\nor routing methods change.</p>\n<p>Example for limited DragDrop behavior can be a draw2d.layout.constraint.RegionConstriantPolicy.</p>",
          "parameters": [
            {
              "name": "policy",
              "type": "draw2d.policy.EditPolicy",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "uninstallEditPolicy",
          "access": "",
          "virtual": false,
          "description": "<p>UnInstall the edit policy from the figure. Either the instance itself if found\nor all kind of the given edit policies.</p>",
          "parameters": [
            {
              "name": "policy",
              "type": "draw2d.policy.EditPolicy",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "add",
          "access": "",
          "virtual": false,
          "description": "<p>Add a child figure to the figure. The hands over figure doesn't support drag&amp;drop\noperations. It's only a decorator for the connection.<br>\nMainly for labels or other decorations</p>\n<pre><code>let start = new draw2d.shape.node.Start({x:80, y:150});\nstart.add(new draw2d.shape.basic.Label({text:&quot;Test Label&quot;}), new draw2d.layout.locator.TopLocator());\n\ncanvas.add( start);</code></pre>",
          "parameters": [
            {
              "name": "child",
              "type": "draw2d.Figure",
              "description": "<p>the figure to add as decoration to the connection.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>the locator for the child.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "index",
              "type": "Number",
              "description": "<p>optional index where to insert the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "remove",
          "access": "",
          "virtual": false,
          "description": "<p>Remove the child figure from this figure and the canvas</p>",
          "parameters": [
            {
              "name": "child",
              "type": "draw2d.Figure",
              "description": "<p>the figure to remove.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Object",
            "description": "<p>the removed tupple of figure/locator or null if the child isn't found</p>"
          }
        },
        {
          "name": "getChildren",
          "access": "",
          "virtual": false,
          "description": "<p>Return all children/decorations of this shape which has been added with\ndraw2d.Figure.add</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "resetChildren",
          "access": "",
          "virtual": false,
          "description": "<p>Remove all children/decorations of this shape</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getShapeElement",
          "access": "protected",
          "virtual": false,
          "description": "<p>return the current SVG shape element or create it on demand.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getTopLevelShapeElement",
          "access": "private",
          "virtual": false,
          "description": "<p>Get the top level shape element. May the figure has a set of SVG elements. In this case this\nmethod must return the top level node.<br>\nThis method is used for the toFront/toBack method to order the nodes in the correct way.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "applyTransformation",
          "access": "private",
          "virtual": false,
          "description": "<p>apply a transformation to the shape like rotation, translate,..</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getHandleBBox",
          "access": "",
          "virtual": false,
          "description": "<p>Allow dragging only when the cursor is over a specific part of the figure.\n<br>\nOverride this method to specify the bounding box of an element or a draw2d.util.ArrayList\nof draw2d.geo.Rectangle of bounding boxes used to drag the figure. The returned coordinates\nare absolute coordinates to the canvas.\n<br>\n<br>\nDefault implementation returns <b>null</b> to indicate to use the complete figures as\ndrag handle.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": [
              "draw2d.geo.Rectangle",
              "draw2d.util.ArrayList"
            ],
            "description": ""
          }
        },
        {
          "name": "onDragStart",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the drag and drop action begins. You can return [false] if you\nwant avoid that the figure can be move.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": "<p>true if the figure accepts dragging</p>"
          }
        },
        {
          "name": "onDrag",
          "access": "private",
          "virtual": false,
          "description": "<p>Don't call them manually. This will be done by the framework.<br>\nWill be called if the object are moved via drag and drop.\nSub classes can override this method to implement additional stuff. Don't forget to call\nthe super implementation via <code>this._super(dx, dy, dx2, dy2);</code></p>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>the x difference between the start of the drag drop operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>the y difference between the start of the drag drop operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dx2",
              "type": "Number",
              "description": "<p>The x diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy2",
              "type": "Number",
              "description": "<p>The y diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onPanning",
          "access": "",
          "virtual": false,
          "description": "<p>Called by the framework if the figure returns false for the drag operation. In this\ncase we send a &quot;panning&quot; event - mouseDown + mouseMove. This is very useful for\nUI-Widget like slider, spinner,...</p>\n<pre><code> // You can alternatively register an event handler with:\n figure.on(&quot;panning&quot;, function(emitter, eventData){\n     alert(&quot;panning of the figure called&quot;);\n });</code></pre>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>the x difference between the mouse down operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>the y difference between the mouse down operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dx2",
              "type": "Number",
              "description": "<p>The x diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy2",
              "type": "Number",
              "description": "<p>The y diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onPanningEnd",
          "access": "",
          "virtual": false,
          "description": "<p>Called by the framework if the panning event of the figures ends. This happens\nafter the mous up event if the panning is active.</p>\n<pre><code> // You can alternatively register an event handler with:\n figure.on(&quot;panningEnd&quot;, function(emitter){\n     alert(&quot;panning of the figure called&quot;);\n });</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onDragEnd",
          "access": "",
          "virtual": false,
          "description": "<p>Will be called after a drag and drop action.<br>\nSub classes can override this method to implement additional stuff. Don't forget to call\nthe super implementation via <code>this._super();</code></p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "delegateTarget",
          "access": "private",
          "virtual": false,
          "description": "<p>Called by the framework during drag&amp;drop operations if the user drag a figure over this figure</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": "<p>the figure which should receive the drop event or null if the element didn't want a drop event</p>"
          }
        },
        {
          "name": "onDragEnter",
          "access": "",
          "virtual": false,
          "description": "<p>Called by the framework during drag&amp;drop operations if the user drag a figure over this figure</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onDragLeave",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the DragDrop object leaving the current hover figure.</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onDrop",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the user drop this element onto the dropTarget. This event is ONLY fired if the\nshape return &quot;this&quot; in the {@link draw2d.Figure#onDragEnter} method.</p>",
          "parameters": [
            {
              "name": "dropTarget",
              "type": "draw2d.Figure",
              "description": "<p>The drop target.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onCatch",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the user dropped an figure onto this element. This event is ONLY fired if the\nin the canvas installed {@link draw2d.policy.canvas.DropInterceptorPolicy} allow this.</p>",
          "parameters": [
            {
              "name": "droppedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The dropped figure.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onMouseEnter",
          "access": "",
          "virtual": false,
          "description": "<p>Callback method for the mouse enter event. Usefull for mouse hover-effects.\nOverride this method for your own effects. Don't call them manually.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onMouseLeave",
          "access": "",
          "virtual": false,
          "description": "<p>Callback method for the mouse leave event. Useful for mouse hover-effects.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onDoubleClick",
          "access": "",
          "virtual": false,
          "description": "<p>Called when a user dbl clicks on the element</p>\n<pre><code> // Alternatively you can register an event with:\n //\n figure.on(&quot;dblclick&quot;, function(emitter, event){\n     alert(&quot;user dbl click on the figure&quot;);\n });</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onClick",
          "access": "",
          "virtual": false,
          "description": "<p>Called when a user clicks on the element.</p>\n<pre><code> // You can alternatively register an event handler with:\n figure.on(&quot;click&quot;, function(emitter, event){\n     alert(&quot;user click on the figure&quot;);\n });</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onContextMenu",
          "access": "",
          "virtual": false,
          "description": "<p>called by the framework if the figure should show the context menu.<br>\nThe strategy to show the context menu depends on the platform. Either looong press or\nright click with the mouse.</p>\n<pre><code> // Alternatively you register for this event with:\n figure.on(&quot;contextmenu&quot;, function(emitter, event){\n     alert(&quot;user press the right mouse button for a context menu&quot;);\n });</code></pre>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate to show the menu</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate to show the menu</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setAlpha",
          "access": "",
          "virtual": false,
          "description": "<p>Set the alpha blending of this figure.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;alpha&quot;: percent\n });\n\n // ...or:\n figure.attr({\n   &quot;opacity&quot;: percent\n });</code></pre>",
          "parameters": [
            {
              "name": "percent",
              "type": "Number",
              "description": "<p>value between [0..1].</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getAlpha",
          "access": "",
          "virtual": false,
          "description": "<p>Return the alpha blending of the figure</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the current alpha blending</p>"
          }
        },
        {
          "name": "getRotationAngle",
          "access": "",
          "virtual": false,
          "description": "<p>return the rotation angle of the figure in degree of [0..356].</p>\n<br>\n<b>NOTE: this method is pre alpha and not for production. Only steps of 90 degree is working well</b>\n<br>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "isVisible",
          "access": "",
          "virtual": false,
          "description": "<p>Return true if the figure visible.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setKeepAspectRatio",
          "access": "",
          "virtual": false,
          "description": "<p>Guarantee, that the figure width/height will not be distorted. Applicable before calling setDimension().\nIt is false by default.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>boolean flag if the figure should respect the aspect ratio</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getKeepAspectRatio",
          "access": "",
          "virtual": false,
          "description": "<p>Return the flag if the shape keep the aspect ratio.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getZOrder",
          "access": "",
          "virtual": false,
          "description": "<p>Return the current z-index of the element. Currently this is an expensive method. The index will be calculated\nall the time. Caching is not implemented at the moment.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setCanSnapToHelper",
          "access": "",
          "virtual": false,
          "description": "<p>Set the flag if this object can snap to grid or geometry.\nA window of dialog should set this flag to false.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The snap to grid/geometry enable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getCanSnapToHelper",
          "access": "",
          "virtual": false,
          "description": "<p>Returns true if the figure can snap to any helper like a grid, guide, geometrie\nor something else.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "getSnapToGridAnchor",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "setSnapToGridAnchor",
          "access": "",
          "virtual": false,
          "description": "<p>Set the hot spot for all snapTo### operations.</p>",
          "parameters": [
            {
              "name": "point",
              "type": "draw2d.geo.Point",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setWidth",
          "access": "",
          "virtual": false,
          "description": "<p>Set the width of the figure and consider the minWidth attribute</p>",
          "parameters": [
            {
              "name": "width",
              "type": "Number",
              "description": "<p>the new width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getWidth",
          "access": "",
          "virtual": false,
          "description": "<p>The current width of the figure.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setHeight",
          "access": "",
          "virtual": false,
          "description": "<p>Set the heigth of the figure and consider the minWidth attribute</p>",
          "parameters": [
            {
              "name": "height",
              "type": "Number",
              "description": "<p>the new height of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getHeight",
          "access": "",
          "virtual": false,
          "description": "<p>The current height of the figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "getMinWidth",
          "access": "",
          "virtual": false,
          "description": "<p>This value is relevant for the interactive resize of the figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>Returns the min. width of this object.</p>"
          }
        },
        {
          "name": "setMinWidth",
          "access": "",
          "virtual": false,
          "description": "<p>Set the minimum width of this figure</p>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getMinHeight",
          "access": "",
          "virtual": false,
          "description": "<p>This value is relevant for the interactive resize of the figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>Returns the min. height of this object.</p>"
          }
        },
        {
          "name": "setMinHeight",
          "access": "",
          "virtual": false,
          "description": "<p>Set the minimum height of the figure.</p>",
          "parameters": [
            {
              "name": "h",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setX",
          "access": "",
          "virtual": false,
          "description": "<p>the the x-offset related to the parent figure or canvas</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the new x offset of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getX",
          "access": "",
          "virtual": false,
          "description": "<p>The x-offset related to the parent figure or canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the x-offset to the parent figure</p>"
          }
        },
        {
          "name": "setY",
          "access": "",
          "virtual": false,
          "description": "<p>the the y-offset related to the parent figure or canvas</p>",
          "parameters": [
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the new x offset of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getY",
          "access": "",
          "virtual": false,
          "description": "<p>The y-offset related to the parent figure or canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>The y-offset to the parent figure.</p>"
          }
        },
        {
          "name": "getAbsoluteX",
          "access": "",
          "virtual": false,
          "description": "<p>The x-offset related to the canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the x-offset to the canvas</p>"
          }
        },
        {
          "name": "getAbsoluteY",
          "access": "",
          "virtual": false,
          "description": "<p>The y-offset related to the canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>The y-offset to the canvas.</p>"
          }
        },
        {
          "name": "getAbsolutePosition",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the absolute y-position of the port.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getAbsoluteBounds",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the absolute y-position of the port.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "setPosition",
          "access": "",
          "virtual": false,
          "description": "<p>Set the position of the object.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   x: x,\n   y: y\n });</code></pre>",
          "parameters": [
            {
              "name": "x",
              "type": [
                "Number",
                "draw2d.geo.Point"
              ],
              "description": "<p>The new x coordinate of the figure or the x/y coordinate if it is an draw2d.geo.Point</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The new y coordinate of the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPosition",
          "access": "",
          "virtual": false,
          "description": "<p>Get the current position of the figure</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "translate",
          "access": "",
          "virtual": false,
          "description": "<p>Translate the figure with the given x/y offset.</p>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>The x offset to translate</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>The y offset to translate</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setBoundingBox",
          "access": "",
          "virtual": false,
          "description": "<p>Set the bounding box of the figure</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   width: w,\n   height: h,\n   x: x,\n   y: y\n });\n\n // or\n figure.attr({\n   boundingBox: {x:1, y:100, width:30, height:30}\n });</code></pre>",
          "parameters": [
            {
              "name": "rect",
              "type": "draw2d.geo.Rectangle",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getBoundingBox",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the bounding box of the figure in absolute position to the canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "hitTest",
          "access": "",
          "virtual": false,
          "description": "<p>Detect whenever the hands over coordinate is inside the figure.\nThe default implementation is a simple bounding box test.</p>",
          "parameters": [
            {
              "name": "iX",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "iY",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "corona",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setDraggable",
          "access": "",
          "virtual": false,
          "description": "<p>Switch on/off the drag drop behaviour of this object</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The new drag drop indicator</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "isDraggable",
          "access": "",
          "virtual": false,
          "description": "<p>Get the Drag drop enable flag</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": "<p>The new drag drop indicator</p>"
          }
        },
        {
          "name": "isResizeable",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the true if the figure can be resized.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setResizeable",
          "access": "",
          "virtual": false,
          "description": "<p>You can change the resizeable behaviour of this object. Hands over [false] and\nthe figure has no resizehandles if you select them with the mouse.<br></p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   resizeable: flag\n });</code></pre>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The resizeable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "isSelectable",
          "access": "",
          "virtual": false,
          "description": "<p>Indicates whenever the element is selectable by user interaction or API.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setSelectable",
          "access": "",
          "virtual": false,
          "description": "<p>You can change the selectable behavior of this object. Hands over [false] and\nthe figure has no selection handles if you try to select them with the mouse.<br></p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The selectable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "isStrechable",
          "access": "",
          "virtual": false,
          "description": "<p>Return true if the object doesn't care about the aspect ratio.\nYou can change the height and width independent.<br></p>\n<p>Replaced with &quot;getKeepAspectRatio&quot;</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "isDeleteable",
          "access": "",
          "virtual": false,
          "description": "<p>Return false if you avoid that the user can delete your figure.\nSub class can override this method.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setDeleteable",
          "access": "",
          "virtual": false,
          "description": "<p>Set the flag if the shape is deleteable.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>enable or disable flag for the delete operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setParent",
          "access": "private",
          "virtual": false,
          "description": "<p>Set the parent of this figure.\nDon't call them manually.</p>",
          "parameters": [
            {
              "name": "parent",
              "type": "draw2d.Figure",
              "description": "<p>The new parent of this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getParent",
          "access": "",
          "virtual": false,
          "description": "<p>Get the parent of this figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": ""
          }
        },
        {
          "name": "contains",
          "access": "",
          "virtual": false,
          "description": "<p>Check to see if a figure is a descendant of another figure.\n<br>\nThe contains() method returns true if the figure provided by the argument is a descendant of this figure,\nwhether it is a direct child or nested more deeply. Otherwise, it returns false.</p>",
          "parameters": [
            {
              "name": "containedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure that may be contained by (a descendant of) this figure.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getRoot",
          "access": "",
          "virtual": false,
          "description": "<p>Get the top most parent of this figure. This can be an layout figure or parent container</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": ""
          }
        },
        {
          "name": "setComposite",
          "access": "",
          "virtual": false,
          "description": "<p>Set the assigned composite of this figure.</p>",
          "parameters": [
            {
              "name": "composite",
              "type": "draw2d.shape.composite.StrongComposite",
              "description": "<p>The assigned composite of this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getComposite",
          "access": "",
          "virtual": false,
          "description": "<p>Get the assigned composite of this figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.shape.composite.StrongComposite",
            "description": ""
          }
        },
        {
          "name": "fireEvent",
          "access": "",
          "virtual": false,
          "description": "<p>Execute all handlers and behaviors attached to the figure for the given event type.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "String",
              "description": "<p>the event to trigger</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "args",
              "type": "Object",
              "description": "<p>optional parameters for the triggered event callback</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "on",
          "access": "",
          "virtual": false,
          "description": "<p>Attach an event handler function for one or more events to the figure.\nTo remove events bound with .on(), see {@link #off}.</p>\n<p>possible events are:<br></p>\n<ul>\n  <li>click</li>\n  <li>dblclick</li>\n  <li>move</li>\n  <li>resize</li>\n  <li>timer</li>\n  <li>contextmenu</li>\n  <li>show</li>\n  <li>hide</li>\n  <li>added</li>\n  <li>removed</li>\n  <li>change:[attr]</li>\n</ul>",
          "parameters": [
            {
              "name": "event",
              "type": "String",
              "description": "<p>One or more space-separated event types</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback",
              "type": "function",
              "description": "<p>A function to execute when the event is triggered.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback.emitter",
              "type": "draw2d.Figure",
              "description": "<p>the emitter of the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback.obj",
              "type": "Object",
              "description": "<p>optional event related data</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "context",
              "type": "Object",
              "description": "<p>optional context of the function callback.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "off",
          "access": "",
          "virtual": false,
          "description": "<p>The .off() method removes event handlers that were attached with {@link #on}.<br>\nCalling .off() with no arguments removes all handlers attached to the elements.<br>\n<br>\nIf a simple event name such as &quot;move&quot; is provided, all events of that type are removed from the figure.</p>",
          "parameters": [
            {
              "name": "eventOrFunction",
              "type": [
                "String",
                "function"
              ],
              "description": "<p>the event name of the registerd function or the function itself</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getBestChild",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the best figure at the location [x,y]. It is a simple hit test. Keep in mind that only visible objects\nare returned.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>The x position.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The y position.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "figureToIgnore",
              "type": [
                "draw2d.Figure",
                "Array"
              ],
              "description": "<p>The figures which should be ignored.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        }
      ]
    },
    {
      "name": "PolyLine",
      "namespace": "draw2d.shape.basic",
      "description": "<p>draw2d.shape.basic.PolyLine</p>\n<p>A PolyLine is a line with more than 2 points.</p>",
      "extends": [
        "draw2d.shape.basic.Line"
      ],
      "access": "",
      "virtual": false,
      "fires": "",
      "constructor": {
        "name": "PolyLine",
        "description": "",
        "parameters": [],
        "examples": [
          "let line = new draw2d.shape.basic.PolyLine();\n    line.setVertices([{x:10,y:10},{x:80,y:70},{x:100,y:110}]);\n    canvas.add(line);\n\n\n    canvas.setCurrentSelection(line);"
        ]
      },
      "functions": [
        {
          "name": "init",
          "access": "",
          "virtual": false,
          "description": "<p>Creates a new figure element which are not assigned to any canvas.</p>",
          "parameters": [
            {
              "name": "attr",
              "type": "Object",
              "description": "<p>the configuration of the shape</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setRadius",
          "access": "",
          "virtual": false,
          "description": "<p>Sets the corner radius of the edges.</p>",
          "parameters": [
            {
              "name": "radius",
              "type": "Number",
              "description": "<p>the corner radius</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getRadius",
          "access": "",
          "virtual": false,
          "description": "<p>Get the corner radius of the edges.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setStartPoint",
          "access": "",
          "virtual": false,
          "description": "<p>Set the start point of the line.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x coordinate of the start point</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y coordinate of the start point</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setEndPoint",
          "access": "",
          "virtual": false,
          "description": "<p>Set the end point of the line.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x coordinate of the end point</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y coordinate of the end point</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "addVertex",
          "access": "",
          "virtual": false,
          "description": "<p>Inserts the draw2d.geo.Point object into the vertex list of the polyline just after the object with the given index.</p>",
          "parameters": [
            {
              "name": "x",
              "type": [
                "Number",
                "draw2d.geo.Point"
              ],
              "description": "<p>the x coordinate or the draw2d.geo.Point object</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y coordinate or undefined of the second argument is a point</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "insertVertexAt",
          "access": "",
          "virtual": false,
          "description": "<p>Inserts the draw2d.geo.Point object into the vertex list of the polyline just after the object with the given index.</p>",
          "parameters": [
            {
              "name": "index",
              "type": "Number",
              "description": "<p>the insert index</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": [
                "Number",
                "draw2d.geo.Point"
              ],
              "description": "<p>the x coordinate or the draw2d.geo.Point object</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y coordinate or undefined of the second argument is a point</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "removeVertexAt",
          "access": "",
          "virtual": false,
          "description": "<p>Remove a vertex from the polyline and return the removed point. The current installed connection router\ncan send an veto for this operation.</p>",
          "parameters": [
            {
              "name": "index",
              "type": "",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": "<p>the removed point or null of the current router decline this operation</p>"
          }
        },
        {
          "name": "setRouter",
          "access": "",
          "virtual": false,
          "description": "<p>Set the router for this connection.</p>",
          "parameters": [
            {
              "name": "router",
              "type": "draw2d.layout.connection.ConnectionRouter",
              "description": "<p>the new router for this connection or null if the connection should use the default routing</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getRouter",
          "access": "",
          "virtual": false,
          "description": "<p>Return the current active router of this connection.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "",
            "description": "<p>draw2d.layout.connection.ConnectionRouter</p>"
          }
        },
        {
          "name": "calculatePath",
          "access": "private",
          "virtual": false,
          "description": "<p>Calculate the path of the polyline</p>",
          "parameters": [
            {
              "name": "routingHints",
              "type": "Object",
              "description": "<p>some helper attributes for the router</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "routingHints.startMoved",
              "type": "Boolean",
              "description": "<p>is true if just the start location has moved</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "routingHints.endMoved",
              "type": "Boolean",
              "description": "<p>is true if the destination location has changed</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "routingHints.oldVertices",
              "type": "Boolean",
              "description": "<p>store old vertices for after processing</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "repaint",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getSegments",
          "access": "",
          "virtual": false,
          "description": "<p>Return all line segments of the polyline.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "addPoint",
          "access": "",
          "virtual": false,
          "description": "<p>used for the router to add the calculated points</p>",
          "parameters": [
            {
              "name": "p",
              "type": "",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onDragStart",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the drag and drop action begins. You can return [false] if you\nwant avoid that the figure can be move.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": "<p>true if the figure accepts dragging</p>"
          }
        },
        {
          "name": "getLength",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the length of the polyline.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "pointProjection",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the projection of the point on the line.</p>",
          "parameters": [
            {
              "name": "px",
              "type": "Number",
              "description": "<p>the x coordinate of the test point</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "py",
              "type": "Number",
              "description": "<p>the y coordinate of the test point</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "lerp",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the point onto the line which has the relative 'percentage' position onto the line.</p>",
          "parameters": [
            {
              "name": "percentage",
              "type": "Number",
              "description": "<p>the relative position between [0..1]</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "hitSegment",
          "access": "",
          "virtual": false,
          "description": "<p>get the best segment of the line which is below the given coordinate or null if\nall segment are not below the coordinate. <br>\nThe 'corona' property of the polyline is considered for this test. This means\nthe point isn't direct on the line. Is it only close to the line!</p>",
          "parameters": [
            {
              "name": "px",
              "type": "Number",
              "description": "<p>the x coordinate of the test point</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "py",
              "type": "Number",
              "description": "<p>the y coordinate of the test point</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Object",
            "description": ""
          }
        },
        {
          "name": "hitTest",
          "access": "",
          "virtual": false,
          "description": "<p>Checks if the hands over coordinate close to the line. The 'corona' property of the polyline\nis considered for this test. This means the point isn't direct on the line. Is it only close to the\nline!</p>",
          "parameters": [
            {
              "name": "px",
              "type": "Number",
              "description": "<p>the x coordinate of the test point</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "py",
              "type": "Number",
              "description": "<p>the y coordinate of the test point</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "createCommand",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getPersistentAttributes",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setPersistentAttributes",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setOutlineColor",
          "access": "",
          "virtual": false,
          "description": "<p>Set the outline color of the line.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   outlineColor: color\n });</code></pre>",
          "parameters": [
            {
              "name": "color",
              "type": "draw2d.util.Color/String",
              "description": "<p>The new color of the line.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getOutlineColor",
          "access": "",
          "virtual": false,
          "description": "<p>The outline color of the text</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.Color",
            "description": ""
          }
        },
        {
          "name": "setOutlineStroke",
          "access": "",
          "virtual": false,
          "description": "<p>Set the outline stroke of the line to use.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   outlineStroke: w\n });</code></pre>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "<p>The new outline width of the line</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getOutlineStroke",
          "access": "",
          "virtual": false,
          "description": "<p>The used outline line width.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "onDrag",
          "access": "private",
          "virtual": false,
          "description": "<p>Don't call them manually. This will be done by the framework.<br>\nWill be called if the object are moved via drag and drop.\nSub classes can override this method to implement additional stuff. Don't forget to call\nthe super implementation via <code>this._super(dx, dy, dx2, dy2);</code></p>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>the x difference between the start of the drag drop operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>the y difference between the start of the drag drop operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dx2",
              "type": "Number",
              "description": "<p>The x diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy2",
              "type": "Number",
              "description": "<p>The y diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onDragEnd",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onClick",
          "access": "",
          "virtual": false,
          "description": "<p>Called when a user clicks on the element.</p>\n<pre><code> // Alternatively you can register for this event with\n figure.on(&quot;click&quot;, function(emitterFigure){\n     alert(&quot;clicked&quot;);\n });</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setDashArray",
          "access": "",
          "virtual": false,
          "description": "<p>Set the line style for this object.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   dasharray: dashPattern\n });</code></pre>",
          "parameters": [
            {
              "name": "dashPattern",
              "type": "String",
              "description": "<p>Can be one of this [&quot;&quot;, &quot;-&quot;, &quot;.&quot;, &quot;-.&quot;, &quot;-..&quot;, &quot;. &quot;, &quot;- &quot;, &quot;--&quot;, &quot;- .&quot;, &quot;--.&quot;, &quot;--..&quot;]</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getDashArray",
          "access": "",
          "virtual": false,
          "description": "<p>Get the line style for this object.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr(&quot;dasharray&quot;);</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setCoronaWidth",
          "access": "",
          "virtual": false,
          "description": "<p>Set the width for the click hit test of this line.</p>",
          "parameters": [
            {
              "name": "width",
              "type": "Number",
              "description": "<p>the width of the line hit test.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "createShapeElement",
          "access": "private",
          "virtual": false,
          "description": "<p>Called by the framework. Don't call them manually.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "repaint",
          "access": "private",
          "virtual": false,
          "description": "<p>propagate all attributes like color, stroke,... to the shape element</p>",
          "parameters": [
            {
              "name": "attributes",
              "type": "Object",
              "description": "<p>the style attributes for the SVG shape</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "toBack",
          "access": "",
          "virtual": false,
          "description": "<p>Moves the element to the background. Additional\nthe internal model changed as well.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setGlow",
          "access": "",
          "virtual": false,
          "description": "<p>Highlight the element or remove the highlighting</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   glow: flag\n });</code></pre>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>indicates glow/noGlow</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "isResizeable",
          "access": "",
          "virtual": false,
          "description": "<p>You can't drag&amp;drop the resize handles if the line not resizeable.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "",
            "description": "<p>boolean</p>"
          }
        },
        {
          "name": "setStroke",
          "access": "",
          "virtual": false,
          "description": "<p>Set the line width. This enforce a repaint of the line.\nThis method fires a <i>document dirty</i> event.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   stroke: w\n });</code></pre>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "<p>The new line width of the figure.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getStroke",
          "access": "",
          "virtual": false,
          "description": "<p>The used line width.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setColor",
          "access": "",
          "virtual": false,
          "description": "<p>Set the color of the line.\nThis method fires a <i>document dirty</i> event.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   color: color\n });</code></pre>",
          "parameters": [
            {
              "name": "color",
              "type": [
                "draw2d.util.Color",
                "String"
              ],
              "description": "<p>The new color of the line.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getColor",
          "access": "",
          "virtual": false,
          "description": "<p>Return the current paint color.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.Color",
            "description": "<p>The paint color of the line.</p>"
          }
        },
        {
          "name": "translate",
          "access": "",
          "virtual": false,
          "description": "<p>Translate the line with the given x/y offset.</p>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>The new x translate offset</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>The new y translate offset</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getBoundingBox",
          "access": "",
          "virtual": false,
          "description": "<p>return the bounding box of the line or polygon</p>\n<p>TODO: precalculate or cache this values</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "setStartPosition",
          "access": "",
          "virtual": false,
          "description": "<p>Set the start point of the line.\nThis method fires a <i>document dirty</i> event.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   startX: x,\n   startY: y\n });</code></pre>",
          "parameters": [
            {
              "name": "x",
              "type": [
                "Number",
                "draw2d.geo.Point"
              ],
              "description": "<p>the x coordinate of the start point</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y coordinate of the start point</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setEndPosition",
          "access": "",
          "virtual": false,
          "description": "<p>Set the end point of the line.\nThis method fires a <i>document dirty</i> event.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   endX: 3,\n   endY: 10\n });\n\n // or\n figure.attr({\n   end: {x:3, y:10}\n });</code></pre>",
          "parameters": [
            {
              "name": "x",
              "type": [
                "Number",
                "draw2d.geo.Point"
              ],
              "description": "<p>the x coordinate or a draw2d.geo.Point of the end point</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y coordinate of the end point</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getStartX",
          "access": "",
          "virtual": false,
          "description": "<p>Return the x coordinate of the start.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "getStartY",
          "access": "",
          "virtual": false,
          "description": "<p>Return the y coordinate of the start.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "getStartPosition",
          "access": "",
          "virtual": false,
          "description": "<p>Return the start point.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "getStartPoint",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getEndX",
          "access": "",
          "virtual": false,
          "description": "<p>Return the x coordinate of the end point</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "getEndY",
          "access": "",
          "virtual": false,
          "description": "<p>Return the y coordinate of the end point.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "getEndPosition",
          "access": "",
          "virtual": false,
          "description": "<p>Return the end point.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "getEndPoint",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getX",
          "access": "",
          "virtual": false,
          "description": "<p>The x-offset related to the parent figure or canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the x-offset to the parent figure</p>"
          }
        },
        {
          "name": "getY",
          "access": "",
          "virtual": false,
          "description": "<p>The x-offset related to the parent figure or canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the x-offset to the parent figure</p>"
          }
        },
        {
          "name": "getVertex",
          "access": "",
          "virtual": false,
          "description": "<p>Return the Vertex with the given index.</p>",
          "parameters": [
            {
              "name": "index",
              "type": "Number",
              "description": "<p>the index of the vertex to return</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setVertex",
          "access": "",
          "virtual": false,
          "description": "<p>Update the vertex at the give position with the new coordinate</p>",
          "parameters": [
            {
              "name": "index",
              "type": "Number",
              "description": "<p>the index of the vertex to update</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": [
                "Number",
                "draw2d.geo.Point"
              ],
              "description": "<p>the x coordinate or the draw2d.geo.Point object</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y coordinate or undefined of the second argument is a point</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getVertices",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the vertices of the connection</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": "<p>an draw2d.util.ArrayList of type draw2d.Point</p>"
          }
        },
        {
          "name": "setVertices",
          "access": "",
          "virtual": false,
          "description": "<p>Update the vertices of the object. The given array is copied and assigned.</p>",
          "parameters": [
            {
              "name": "vertices",
              "type": [
                "draw2d.util.ArrayList",
                "Array"
              ],
              "description": "<p>the new vertices of the polyline.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getAngle",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the angle of the line in degree.</p>\n<pre>\n                                270Â°\n                              |\n                              |\n                              |\n                              |\n180Â° -------------------------+------------------------> +X\n                              |                        0Â°\n                              |\n                              |\n                              |\n                              V +Y\n                             90Â°\n</pre>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "createCommand",
          "access": "private",
          "virtual": false,
          "description": "<p>Returns the Command to perform the specified Request or null if the shape want cancel the\noperation or it can't operate the command.</p>",
          "parameters": [
            {
              "name": "request",
              "type": "draw2d.command.CommandType",
              "description": "<p>describes the Command being requested</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.command.Command",
            "description": "<p>null or a Command</p>"
          }
        },
        {
          "name": "intersection",
          "access": "",
          "virtual": false,
          "description": "<p>Return all intersection points between the given Line.</p>",
          "parameters": [
            {
              "name": "other",
              "type": "draw2d.shape.basic.Line",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "getPersistentAttributes",
          "access": "",
          "virtual": false,
          "description": "<p>Return an objects with all important attributes for XML or JSON serialization</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Object",
            "description": ""
          }
        },
        {
          "name": "setPersistentAttributes",
          "access": "",
          "virtual": false,
          "description": "<p>Read all attributes from the serialized properties and transfer them into the shape.</p>",
          "parameters": [
            {
              "name": "memento",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "attr",
          "access": "",
          "virtual": false,
          "description": "<p>Read or set shape attributes.<br>\nWhen no value is given, reads specified attribute from the element.<br>\nWhen value is given, sets the attribute to that value.\nMultiple attributes can be set by passing an object with name-value pairs.</p>\n<pre><code>let figure = new draw2d.shape.basic.Rectangle();\nfigure.attr('x');      //=&gt; read value\nfigure.attr('x', 30);  //=&gt; set value\n\n// multiple attributes:\nfigure.attr({\n  x: 30,\n  y: 40,\n  width : 200,\n  height: 50,\n  cssClass: &quot;red_border_figure&quot;\n});\n\n// it is possible to override any method of the figure as well\n// Instead of inheritance you can just override the callback methods\n// like\n//\nfigure.attr({\n   onClick : function(){\n       alert(&quot;click&quot;);\n   }\n});\n\n// or you can pass the attr values in the constructor\n//\nlet clickFigure = new draw2d.shape.basic.Rectangle({\n   onClick : function(){\n       alert(&quot;click&quot;);\n   }\n});\n</code></pre>\n<p>Additional you can set the user defined values (userData) with this method\nusing the dot-notation. User defined values are always part of the exported\nJSON data.</p>\n<pre><code>// setting multiple attributes:\nfigure.attr({\n  &quot;userData.my.property.x&quot;: 30,\n  &quot;userData.my.property.y&quot;: 40\n});\n</code></pre>\n<p>Also set using array notation is possible for the userData:</p>\n<pre><code>// dot notation and array brackets:\nfigure.attr({\n  &quot;userData.my.names[0]&quot;: &quot;John&quot;,\n  &quot;userData.my.names[1]&quot;: &quot;Doe&quot;\n});\n</code></pre>\n<p>The Object returned should be the equivalent structured object:</p>\n<pre><code>let obj = figure.getUserData();\n</code></pre>\n<p>That is, where obj is equivalent to:</p>\n<pre><code>let obj = {\n    my:{\n        property:{\n            x: 30,\n            y: 40\n       },\n       names:  [&quot;John&quot;, &quot;Doe&quot;]\n   }\n</code></pre>\n<p>};</p>",
          "parameters": [
            {
              "name": "name",
              "type": "String/Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "value",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "pick",
          "access": "",
          "virtual": false,
          "description": "<p>Return a copy of the object, filtered to only have values for the whitelisted keys.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "select",
          "access": "private",
          "virtual": false,
          "description": "<p>Add the figure to the current selection and propagate this to all edit policies.</p>",
          "parameters": [
            {
              "name": "asPrimarySelection",
              "type": "Boolean",
              "description": "<p>true if the element should be the primary selection</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "unselect",
          "access": "private",
          "virtual": false,
          "description": "<p>Unselect the figure and propagete this event to all edit policies.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setSelectionAdapter",
          "access": "",
          "virtual": false,
          "description": "<p>Returns a function which returns the the figure which must handle the selection handling.</p>",
          "parameters": [
            {
              "name": "adapter",
              "type": "function",
              "description": "<p>function which returns the figure which handles the selection handling</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getSelectionAdapter",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "function",
            "description": ""
          }
        },
        {
          "name": "isSelected",
          "access": "",
          "virtual": false,
          "description": "<p>Returns true if the figure part of the current canvas selection.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setUserData",
          "access": "",
          "virtual": false,
          "description": "<p>Allows a user to attach (or remove) data to an element, without needing to create a custom figure or shape.\nThe data must be a valid JSON object.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   userData: object\n });</code></pre>",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getUserData",
          "access": "",
          "virtual": false,
          "description": "<p>Returns any user data set previously on the given figure by setUserData.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Object",
            "description": ""
          }
        },
        {
          "name": "getId",
          "access": "",
          "virtual": false,
          "description": "<p>Return the UUID of this element.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "setId",
          "access": "",
          "virtual": false,
          "description": "<p>Set the id of this element.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  id: newId\n});</code></pre>",
          "parameters": [
            {
              "name": "newId",
              "type": "String",
              "description": "<p>the new id for this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Return the css styling class name of the element.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "setCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Set the css class of the node.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;cssClass&quot;: &quot;red_border_figure&quot;\n });</code></pre>",
          "parameters": [
            {
              "name": "cssClass",
              "type": "String",
              "description": "<p>the new css class name of the node</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "hasCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>The method will return true if the class is assigned to the element, even if other classes also are.</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the class name to check</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "addCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Add a CSS class to the figure.<br>\nIt's important to note that this method does not replace a class. It simply adds the class,\nappending it to any which may already be assigned to the elements.</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "removeCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Remove the given css class name from the figure</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the css class name to add</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "toggleCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Add or remove the given css class name from the figure</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the class name to toggle</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setCanvas",
          "access": "",
          "virtual": false,
          "description": "<p>Set the canvas element of this figures. This can be used to determine whenever an element\nis added or removed to the canvas.</p>",
          "parameters": [
            {
              "name": "canvas",
              "type": "draw2d.Canvas",
              "description": "<p>the new parent of the figure or null</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getCanvas",
          "access": "",
          "virtual": false,
          "description": "<p>Return the current assigned canvas container.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.Canvas",
            "description": ""
          }
        },
        {
          "name": "startTimer",
          "access": "",
          "virtual": false,
          "description": "<p>Start a timer which calls the onTimer method in the given interval.</p>",
          "parameters": [
            {
              "name": "milliSeconds",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "stopTimer",
          "access": "",
          "virtual": false,
          "description": "<p>Stop the internal timer.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onTimer",
          "access": "",
          "virtual": false,
          "description": "<p>Callback method for the internal timer handling<br>\nInherit classes must override this method if they want use the timer feature.</p>\n<pre><code> // Alternatively you can register for this event with\n figure.on(&quot;timer&quot;, function(emitter){\n     alert(&quot;timer fired&quot;);\n });</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "toFront",
          "access": "",
          "virtual": false,
          "description": "<p>Moves the element so it is the closest to the viewerâ€™s eyes, on top of other elements. Additional\nthe internal model changed as well.</p>\n<p>Optional: Inserts current object in front of the given one.</p>",
          "parameters": [
            {
              "name": "figure",
              "type": "draw2d.Figure",
              "description": "<p>move current object in front of the given one.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "installEditPolicy",
          "access": "",
          "virtual": false,
          "description": "<p>Install a new edit policy to the figure. Each editpolicy is able to focus on a single editing\ntask or group of related tasks. This also allows editing behavior to be selectively reused across\ndifferent figure implementations. Also, behavior can change dynamically, such as when the layouts\nor routing methods change.</p>\n<p>Example for limited DragDrop behavior can be a draw2d.layout.constraint.RegionConstriantPolicy.</p>",
          "parameters": [
            {
              "name": "policy",
              "type": "draw2d.policy.EditPolicy",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "uninstallEditPolicy",
          "access": "",
          "virtual": false,
          "description": "<p>UnInstall the edit policy from the figure. Either the instance itself if found\nor all kind of the given edit policies.</p>",
          "parameters": [
            {
              "name": "policy",
              "type": "draw2d.policy.EditPolicy",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "add",
          "access": "",
          "virtual": false,
          "description": "<p>Add a child figure to the figure. The hands over figure doesn't support drag&amp;drop\noperations. It's only a decorator for the connection.<br>\nMainly for labels or other decorations</p>\n<pre><code>let start = new draw2d.shape.node.Start({x:80, y:150});\nstart.add(new draw2d.shape.basic.Label({text:&quot;Test Label&quot;}), new draw2d.layout.locator.TopLocator());\n\ncanvas.add( start);</code></pre>",
          "parameters": [
            {
              "name": "child",
              "type": "draw2d.Figure",
              "description": "<p>the figure to add as decoration to the connection.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>the locator for the child.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "index",
              "type": "Number",
              "description": "<p>optional index where to insert the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "remove",
          "access": "",
          "virtual": false,
          "description": "<p>Remove the child figure from this figure and the canvas</p>",
          "parameters": [
            {
              "name": "child",
              "type": "draw2d.Figure",
              "description": "<p>the figure to remove.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Object",
            "description": "<p>the removed tupple of figure/locator or null if the child isn't found</p>"
          }
        },
        {
          "name": "getChildren",
          "access": "",
          "virtual": false,
          "description": "<p>Return all children/decorations of this shape which has been added with\ndraw2d.Figure.add</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "resetChildren",
          "access": "",
          "virtual": false,
          "description": "<p>Remove all children/decorations of this shape</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getShapeElement",
          "access": "protected",
          "virtual": false,
          "description": "<p>return the current SVG shape element or create it on demand.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getTopLevelShapeElement",
          "access": "private",
          "virtual": false,
          "description": "<p>Get the top level shape element. May the figure has a set of SVG elements. In this case this\nmethod must return the top level node.<br>\nThis method is used for the toFront/toBack method to order the nodes in the correct way.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "applyTransformation",
          "access": "private",
          "virtual": false,
          "description": "<p>apply a transformation to the shape like rotation, translate,..</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getHandleBBox",
          "access": "",
          "virtual": false,
          "description": "<p>Allow dragging only when the cursor is over a specific part of the figure.\n<br>\nOverride this method to specify the bounding box of an element or a draw2d.util.ArrayList\nof draw2d.geo.Rectangle of bounding boxes used to drag the figure. The returned coordinates\nare absolute coordinates to the canvas.\n<br>\n<br>\nDefault implementation returns <b>null</b> to indicate to use the complete figures as\ndrag handle.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": [
              "draw2d.geo.Rectangle",
              "draw2d.util.ArrayList"
            ],
            "description": ""
          }
        },
        {
          "name": "onPanning",
          "access": "",
          "virtual": false,
          "description": "<p>Called by the framework if the figure returns false for the drag operation. In this\ncase we send a &quot;panning&quot; event - mouseDown + mouseMove. This is very useful for\nUI-Widget like slider, spinner,...</p>\n<pre><code> // You can alternatively register an event handler with:\n figure.on(&quot;panning&quot;, function(emitter, eventData){\n     alert(&quot;panning of the figure called&quot;);\n });</code></pre>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>the x difference between the mouse down operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>the y difference between the mouse down operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dx2",
              "type": "Number",
              "description": "<p>The x diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy2",
              "type": "Number",
              "description": "<p>The y diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onPanningEnd",
          "access": "",
          "virtual": false,
          "description": "<p>Called by the framework if the panning event of the figures ends. This happens\nafter the mous up event if the panning is active.</p>\n<pre><code> // You can alternatively register an event handler with:\n figure.on(&quot;panningEnd&quot;, function(emitter){\n     alert(&quot;panning of the figure called&quot;);\n });</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "delegateTarget",
          "access": "private",
          "virtual": false,
          "description": "<p>Called by the framework during drag&amp;drop operations if the user drag a figure over this figure</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": "<p>the figure which should receive the drop event or null if the element didn't want a drop event</p>"
          }
        },
        {
          "name": "onDragEnter",
          "access": "",
          "virtual": false,
          "description": "<p>Called by the framework during drag&amp;drop operations if the user drag a figure over this figure</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onDragLeave",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the DragDrop object leaving the current hover figure.</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onDrop",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the user drop this element onto the dropTarget. This event is ONLY fired if the\nshape return &quot;this&quot; in the {@link draw2d.Figure#onDragEnter} method.</p>",
          "parameters": [
            {
              "name": "dropTarget",
              "type": "draw2d.Figure",
              "description": "<p>The drop target.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onCatch",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the user dropped an figure onto this element. This event is ONLY fired if the\nin the canvas installed {@link draw2d.policy.canvas.DropInterceptorPolicy} allow this.</p>",
          "parameters": [
            {
              "name": "droppedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The dropped figure.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onMouseEnter",
          "access": "",
          "virtual": false,
          "description": "<p>Callback method for the mouse enter event. Usefull for mouse hover-effects.\nOverride this method for your own effects. Don't call them manually.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onMouseLeave",
          "access": "",
          "virtual": false,
          "description": "<p>Callback method for the mouse leave event. Useful for mouse hover-effects.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onDoubleClick",
          "access": "",
          "virtual": false,
          "description": "<p>Called when a user dbl clicks on the element</p>\n<pre><code> // Alternatively you can register an event with:\n //\n figure.on(&quot;dblclick&quot;, function(emitter, event){\n     alert(&quot;user dbl click on the figure&quot;);\n });</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onContextMenu",
          "access": "",
          "virtual": false,
          "description": "<p>called by the framework if the figure should show the context menu.<br>\nThe strategy to show the context menu depends on the platform. Either looong press or\nright click with the mouse.</p>\n<pre><code> // Alternatively you register for this event with:\n figure.on(&quot;contextmenu&quot;, function(emitter, event){\n     alert(&quot;user press the right mouse button for a context menu&quot;);\n });</code></pre>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate to show the menu</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate to show the menu</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setAlpha",
          "access": "",
          "virtual": false,
          "description": "<p>Set the alpha blending of this figure.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;alpha&quot;: percent\n });\n\n // ...or:\n figure.attr({\n   &quot;opacity&quot;: percent\n });</code></pre>",
          "parameters": [
            {
              "name": "percent",
              "type": "Number",
              "description": "<p>value between [0..1].</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getAlpha",
          "access": "",
          "virtual": false,
          "description": "<p>Return the alpha blending of the figure</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the current alpha blending</p>"
          }
        },
        {
          "name": "setRotationAngle",
          "access": "",
          "virtual": false,
          "description": "<p>Set the rotation angle in degree [0..356]<br>\n<b>Only steps of 90 degree is working well</b>\n<br>\n// Alternatively you can use the attr method:\nfigure.attr({\nangle: angle\n});</p>",
          "parameters": [
            {
              "name": "angle",
              "type": "Number",
              "description": "<p>the rotation angle in degree</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getRotationAngle",
          "access": "",
          "virtual": false,
          "description": "<p>return the rotation angle of the figure in degree of [0..356].</p>\n<br>\n<b>NOTE: this method is pre alpha and not for production. Only steps of 90 degree is working well</b>\n<br>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setVisible",
          "access": "",
          "virtual": false,
          "description": "<p>Show/hide the element. The element didn't receive any mouse events (click, dblclick) if you hide the\nfigure.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   visible: flag\n });</code></pre>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "duration",
              "type": "Number",
              "description": "<p>the optional number for the fadeIn /fadeOut of the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "isVisible",
          "access": "",
          "virtual": false,
          "description": "<p>Return true if the figure visible.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setKeepAspectRatio",
          "access": "",
          "virtual": false,
          "description": "<p>Guarantee, that the figure width/height will not be distorted. Applicable before calling setDimension().\nIt is false by default.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>boolean flag if the figure should respect the aspect ratio</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getKeepAspectRatio",
          "access": "",
          "virtual": false,
          "description": "<p>Return the flag if the shape keep the aspect ratio.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getZOrder",
          "access": "",
          "virtual": false,
          "description": "<p>Return the current z-index of the element. Currently this is an expensive method. The index will be calculated\nall the time. Caching is not implemented at the moment.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setCanSnapToHelper",
          "access": "",
          "virtual": false,
          "description": "<p>Set the flag if this object can snap to grid or geometry.\nA window of dialog should set this flag to false.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The snap to grid/geometry enable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getCanSnapToHelper",
          "access": "",
          "virtual": false,
          "description": "<p>Returns true if the figure can snap to any helper like a grid, guide, geometrie\nor something else.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "getSnapToGridAnchor",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "setSnapToGridAnchor",
          "access": "",
          "virtual": false,
          "description": "<p>Set the hot spot for all snapTo### operations.</p>",
          "parameters": [
            {
              "name": "point",
              "type": "draw2d.geo.Point",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setWidth",
          "access": "",
          "virtual": false,
          "description": "<p>Set the width of the figure and consider the minWidth attribute</p>",
          "parameters": [
            {
              "name": "width",
              "type": "Number",
              "description": "<p>the new width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getWidth",
          "access": "",
          "virtual": false,
          "description": "<p>The current width of the figure.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setHeight",
          "access": "",
          "virtual": false,
          "description": "<p>Set the heigth of the figure and consider the minWidth attribute</p>",
          "parameters": [
            {
              "name": "height",
              "type": "Number",
              "description": "<p>the new height of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getHeight",
          "access": "",
          "virtual": false,
          "description": "<p>The current height of the figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "getMinWidth",
          "access": "",
          "virtual": false,
          "description": "<p>This value is relevant for the interactive resize of the figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>Returns the min. width of this object.</p>"
          }
        },
        {
          "name": "setMinWidth",
          "access": "",
          "virtual": false,
          "description": "<p>Set the minimum width of this figure</p>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getMinHeight",
          "access": "",
          "virtual": false,
          "description": "<p>This value is relevant for the interactive resize of the figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>Returns the min. height of this object.</p>"
          }
        },
        {
          "name": "setMinHeight",
          "access": "",
          "virtual": false,
          "description": "<p>Set the minimum height of the figure.</p>",
          "parameters": [
            {
              "name": "h",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setX",
          "access": "",
          "virtual": false,
          "description": "<p>the the x-offset related to the parent figure or canvas</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the new x offset of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setY",
          "access": "",
          "virtual": false,
          "description": "<p>the the y-offset related to the parent figure or canvas</p>",
          "parameters": [
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the new x offset of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getAbsoluteX",
          "access": "",
          "virtual": false,
          "description": "<p>The x-offset related to the canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the x-offset to the canvas</p>"
          }
        },
        {
          "name": "getAbsoluteY",
          "access": "",
          "virtual": false,
          "description": "<p>The y-offset related to the canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>The y-offset to the canvas.</p>"
          }
        },
        {
          "name": "getAbsolutePosition",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the absolute y-position of the port.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getAbsoluteBounds",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the absolute y-position of the port.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "setPosition",
          "access": "",
          "virtual": false,
          "description": "<p>Set the position of the object.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   x: x,\n   y: y\n });</code></pre>",
          "parameters": [
            {
              "name": "x",
              "type": [
                "Number",
                "draw2d.geo.Point"
              ],
              "description": "<p>The new x coordinate of the figure or the x/y coordinate if it is an draw2d.geo.Point</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The new y coordinate of the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPosition",
          "access": "",
          "virtual": false,
          "description": "<p>Get the current position of the figure</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "setDimension",
          "access": "",
          "virtual": false,
          "description": "<p>Set the new width and height of the figure.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n    width:  w,\n    height: h\n });</code></pre>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "<p>The new width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "h",
              "type": "Number",
              "description": "<p>The new height of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setBoundingBox",
          "access": "",
          "virtual": false,
          "description": "<p>Set the bounding box of the figure</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   width: w,\n   height: h,\n   x: x,\n   y: y\n });\n\n // or\n figure.attr({\n   boundingBox: {x:1, y:100, width:30, height:30}\n });</code></pre>",
          "parameters": [
            {
              "name": "rect",
              "type": "draw2d.geo.Rectangle",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setDraggable",
          "access": "",
          "virtual": false,
          "description": "<p>Switch on/off the drag drop behaviour of this object</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The new drag drop indicator</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "isDraggable",
          "access": "",
          "virtual": false,
          "description": "<p>Get the Drag drop enable flag</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": "<p>The new drag drop indicator</p>"
          }
        },
        {
          "name": "setResizeable",
          "access": "",
          "virtual": false,
          "description": "<p>You can change the resizeable behaviour of this object. Hands over [false] and\nthe figure has no resizehandles if you select them with the mouse.<br></p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   resizeable: flag\n });</code></pre>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The resizeable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "isSelectable",
          "access": "",
          "virtual": false,
          "description": "<p>Indicates whenever the element is selectable by user interaction or API.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setSelectable",
          "access": "",
          "virtual": false,
          "description": "<p>You can change the selectable behavior of this object. Hands over [false] and\nthe figure has no selection handles if you try to select them with the mouse.<br></p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The selectable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "isStrechable",
          "access": "",
          "virtual": false,
          "description": "<p>Return true if the object doesn't care about the aspect ratio.\nYou can change the height and width independent.<br></p>\n<p>Replaced with &quot;getKeepAspectRatio&quot;</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "isDeleteable",
          "access": "",
          "virtual": false,
          "description": "<p>Return false if you avoid that the user can delete your figure.\nSub class can override this method.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setDeleteable",
          "access": "",
          "virtual": false,
          "description": "<p>Set the flag if the shape is deleteable.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>enable or disable flag for the delete operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setParent",
          "access": "private",
          "virtual": false,
          "description": "<p>Set the parent of this figure.\nDon't call them manually.</p>",
          "parameters": [
            {
              "name": "parent",
              "type": "draw2d.Figure",
              "description": "<p>The new parent of this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getParent",
          "access": "",
          "virtual": false,
          "description": "<p>Get the parent of this figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": ""
          }
        },
        {
          "name": "contains",
          "access": "",
          "virtual": false,
          "description": "<p>Check to see if a figure is a descendant of another figure.\n<br>\nThe contains() method returns true if the figure provided by the argument is a descendant of this figure,\nwhether it is a direct child or nested more deeply. Otherwise, it returns false.</p>",
          "parameters": [
            {
              "name": "containedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure that may be contained by (a descendant of) this figure.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getRoot",
          "access": "",
          "virtual": false,
          "description": "<p>Get the top most parent of this figure. This can be an layout figure or parent container</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": ""
          }
        },
        {
          "name": "setComposite",
          "access": "",
          "virtual": false,
          "description": "<p>Set the assigned composite of this figure.</p>",
          "parameters": [
            {
              "name": "composite",
              "type": "draw2d.shape.composite.StrongComposite",
              "description": "<p>The assigned composite of this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getComposite",
          "access": "",
          "virtual": false,
          "description": "<p>Get the assigned composite of this figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.shape.composite.StrongComposite",
            "description": ""
          }
        },
        {
          "name": "fireEvent",
          "access": "",
          "virtual": false,
          "description": "<p>Execute all handlers and behaviors attached to the figure for the given event type.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "String",
              "description": "<p>the event to trigger</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "args",
              "type": "Object",
              "description": "<p>optional parameters for the triggered event callback</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "on",
          "access": "",
          "virtual": false,
          "description": "<p>Attach an event handler function for one or more events to the figure.\nTo remove events bound with .on(), see {@link #off}.</p>\n<p>possible events are:<br></p>\n<ul>\n  <li>click</li>\n  <li>dblclick</li>\n  <li>move</li>\n  <li>resize</li>\n  <li>timer</li>\n  <li>contextmenu</li>\n  <li>show</li>\n  <li>hide</li>\n  <li>added</li>\n  <li>removed</li>\n  <li>change:[attr]</li>\n</ul>",
          "parameters": [
            {
              "name": "event",
              "type": "String",
              "description": "<p>One or more space-separated event types</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback",
              "type": "function",
              "description": "<p>A function to execute when the event is triggered.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback.emitter",
              "type": "draw2d.Figure",
              "description": "<p>the emitter of the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback.obj",
              "type": "Object",
              "description": "<p>optional event related data</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "context",
              "type": "Object",
              "description": "<p>optional context of the function callback.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "off",
          "access": "",
          "virtual": false,
          "description": "<p>The .off() method removes event handlers that were attached with {@link #on}.<br>\nCalling .off() with no arguments removes all handlers attached to the elements.<br>\n<br>\nIf a simple event name such as &quot;move&quot; is provided, all events of that type are removed from the figure.</p>",
          "parameters": [
            {
              "name": "eventOrFunction",
              "type": [
                "String",
                "function"
              ],
              "description": "<p>the event name of the registerd function or the function itself</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getBestChild",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the best figure at the location [x,y]. It is a simple hit test. Keep in mind that only visible objects\nare returned.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>The x position.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The y position.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "figureToIgnore",
              "type": [
                "draw2d.Figure",
                "Array"
              ],
              "description": "<p>The figures which should be ignored.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "clone",
          "access": "",
          "virtual": false,
          "description": "<p>Clone the figure. <br>\nYou must override and implement the methods <b>getPersistentAttributes</b> and <b>setPersistentAttributes</b> for your custom\nfigures if the have special attributes.</p>\n<p>The clone() method performs a deep copy of the object, meaning that it copies the children, ports and decorations\nper default. You can control the clone procedure with the 'cloneMetaData'.</p>",
          "parameters": [
            {
              "name": "cloneMetaData",
              "type": "Object",
              "description": "<p>controls the clone procedure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "cloneMetaData.excludeChildren",
              "type": "Boolean",
              "description": "<p>set it to true if you want exclude the children.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        }
      ]
    },
    {
      "name": "Rectangle",
      "namespace": "draw2d.shape.basic",
      "description": "<p>A Rectangle Figure.</p>",
      "extends": [
        "draw2d.VectorFigure"
      ],
      "access": "",
      "virtual": false,
      "fires": "",
      "constructor": {
        "name": "Rectangle",
        "description": "",
        "parameters": [
          {
            "name": "attr",
            "type": "Object",
            "description": "<p>the configuration of the shape</p>",
            "default": "",
            "optional": true,
            "nullable": ""
          },
          {
            "name": "setter",
            "type": "Object",
            "description": "<p>add or replace setter methods</p>",
            "default": "",
            "optional": true,
            "nullable": ""
          },
          {
            "name": "getter",
            "type": "Object",
            "description": "<p>add or replace getter methods</p>",
            "default": "",
            "optional": true,
            "nullable": ""
          }
        ],
        "examples": [
          "let rect1 =  new draw2d.shape.basic.Rectangle({\n    \tx:10,\n     y:10\n    });\n\n    let rect2 =  new draw2d.shape.basic.Rectangle({\n      x: 100,\n      y: 10,\n      bgColor: \"#f0f000\",\n      alpha  : 0.7,\n      width: 100,\n      height: 60,\n      radius: 10\n    });\n\n    canvas.add(rect1);\n    canvas.add(rect2);\n\n    canvas.setCurrentSelection(rect2);"
        ]
      },
      "functions": [
        {
          "name": "repaint",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "applyTransformation",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "createShapeElement",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setDashArray",
          "access": "",
          "virtual": false,
          "description": "<p>Set the line style for dot/dash styling. Possible values are\n[&quot;&quot;, &quot;-&quot;, &quot;.&quot;, &quot;-.&quot;, &quot;-..&quot;, &quot;. &quot;, &quot;- &quot;, &quot;--&quot;, &quot;- .&quot;, &quot;--.&quot;, &quot;--..&quot;]</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   dash: pattern\n });</code></pre>",
          "parameters": [
            {
              "name": "pattern",
              "type": "String",
              "description": "<p>the string with the dot/dash pattern. valid values: [&quot;&quot;, &quot;-&quot;, &quot;.&quot;, &quot;-.&quot;, &quot;-..&quot;, &quot;. &quot;, &quot;- &quot;, &quot;--&quot;, &quot;- .&quot;, &quot;--.&quot;, &quot;--..&quot;]</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getDashArray",
          "access": "",
          "virtual": false,
          "description": "<p>Get the line style for this object.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr(&quot;dash&quot;);</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getPersistentAttributes",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setPersistentAttributes",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "init",
          "access": "",
          "virtual": false,
          "description": "<p>Creates a new figure element which are not assigned to any canvas.</p>",
          "parameters": [
            {
              "name": "attr",
              "type": "Object",
              "description": "<p>the configuration of the shape</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setRadius",
          "access": "",
          "virtual": false,
          "description": "<p>Sets the corner radius or the edges.</p>",
          "parameters": [
            {
              "name": "radius",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getRadius",
          "access": "",
          "virtual": false,
          "description": "<p>Get the corner radius of the edges.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setGlow",
          "access": "",
          "virtual": false,
          "description": "<p>Highlight the element or remove the highlighting</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>indicates glow/noGlow</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "repaint",
          "access": "private",
          "virtual": false,
          "description": "<p>propagate all attributes like color, stroke,... to the shape element</p>",
          "parameters": [
            {
              "name": "attributes",
              "type": "Object",
              "description": "<p>the style attributes for the SVG shape</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setBackgroundColor",
          "access": "",
          "virtual": false,
          "description": "<p>Set the new background color of the figure. It is possible to hands over\n<code>null</code> to set the background transparent.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;bgColor&quot;: &quot;#f0f0f0&quot;\n });</code></pre>",
          "parameters": [
            {
              "name": "color",
              "type": [
                "String",
                "draw2d.util.Color"
              ],
              "description": "<p>The new background color of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getBackgroundColor",
          "access": "",
          "virtual": false,
          "description": "<p>The current used background color.</p>\n<pre><code> // Alternatively you can use the attr method:\n var color =figure.attr(&quot;bgColor&quot;);</code></pre>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.Color",
            "description": ""
          }
        },
        {
          "name": "setStroke",
          "access": "",
          "virtual": false,
          "description": "<p>Set the stroke to use.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;stroke&quot;: 2\n });</code></pre>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "<p>The new line width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getStroke",
          "access": "",
          "virtual": false,
          "description": "<p>The used line width.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setColor",
          "access": "",
          "virtual": false,
          "description": "<p>Set the foreground color of the figure.\nThis method fires a <i>document dirty</i> event.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;color&quot;: &quot;#f3f3f3&quot;\n });</code></pre>",
          "parameters": [
            {
              "name": "color",
              "type": [
                "String",
                "draw2d.util.Color"
              ],
              "description": "<p>The new color of the line.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getColor",
          "access": "",
          "virtual": false,
          "description": "<p>Get the current used foreground color</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.Color",
            "description": ""
          }
        },
        {
          "name": "getPersistentAttributes",
          "access": "",
          "virtual": false,
          "description": "<p>Return an objects with all important attributes for XML or JSON serialization</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Object",
            "description": ""
          }
        },
        {
          "name": "setPersistentAttributes",
          "access": "",
          "virtual": false,
          "description": "<p>Read all attributes from the serialized properties and transfer them into the shape.</p>",
          "parameters": [
            {
              "name": "memento",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setPersistPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Indicates if the node should read/write the ports via the draw2d.Figure.getPersistenAttributes\nto the JSON object</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPersistPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Indicates if the figure writes the ports to the JSON structore too.\nDefault is &quot;false&quot;</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "toFront",
          "access": "",
          "virtual": false,
          "description": "<p>Moves the element so it is the closest to the viewerâ€™s eyes, on top of other elements. Additional\nthe internal model changed as well.</p>\n<p>Optional: Inserts current object in front of the given one.</p>",
          "parameters": [
            {
              "name": "figure",
              "type": "draw2d.Figure",
              "description": "<p>move current object in front of the given one.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "toBack",
          "access": "",
          "virtual": false,
          "description": "<p>Moves the element to the background. Additional\nthe internal model changed as well.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setVisible",
          "access": "",
          "virtual": false,
          "description": "<p>Show/hide the element. The element didn't receive any mouse events (click, dblclick) if you hide the\nfigure.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   visible: flag\n });</code></pre>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "duration",
              "type": "Number",
              "description": "<p>the optional number for the fadeIn /fadeOut of the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Return all ports of the node. The results contains\nall ports of the children too per default. Set <b>recursive</b>\nto false to retrieve direct assigned ports only.</p>",
          "parameters": [
            {
              "name": "recursive",
              "type": "Boolean",
              "description": "<p>indicates if the method should return children ports too. Default is <b>true</b></p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "getInputPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Return all input ports of the node.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "getOutputPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Return all output ports of the node.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "clone",
          "access": "",
          "virtual": false,
          "description": "<p>Clone the figure. <br>\nYou must override and implement the methods <b>getPersistentAttributes</b> and <b>setPersistentAttributes</b> for your custom\nfigures if the have special attributes.</p>\n<p>The clone() method performs a deep copy of the object, meaning that it copies the children, ports and decorations\nper default. You can control the clone procedure with the 'cloneMetaData'.</p>",
          "parameters": [
            {
              "name": "cloneMetaData",
              "type": "Object",
              "description": "<p>controls the clone procedure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "cloneMetaData.excludeChildren",
              "type": "Boolean",
              "description": "<p>set it to true if you want exclude the children.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "cloneMetaData.excludePorts",
              "type": "Boolean",
              "description": "<p>set it to true if you want exclude the ports of the node.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portName",
              "type": "String",
              "description": "<p>The name of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.Port",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getInputPort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the input port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.InputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getOutputPort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the output port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or the numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.OutputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getHybridPort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the input port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.InputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "addPort",
          "access": "",
          "virtual": false,
          "description": "<p>Add a port to this node at the given position.<br></p>",
          "parameters": [
            {
              "name": "port",
              "type": "draw2d.Port",
              "description": "<p>The new port to add.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>The layout for the port.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "resetPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Remove all ports of this node</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "removePort",
          "access": "",
          "virtual": false,
          "description": "<p>Removes a port and all related connections from this node.<br></p>",
          "parameters": [
            {
              "name": "port",
              "type": "draw2d.Port",
              "description": "<p>The port to remove.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "createPort",
          "access": "",
          "virtual": false,
          "description": "<p>Create a standard Port for this element. Inherited class can override this\nmethod to create its own type of ports.</p>",
          "parameters": [
            {
              "name": "type",
              "type": "String",
              "description": "<p>the type of the requested port. possible [&quot;input&quot;, &quot;output&quot;]</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>the layouter to use for this port</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getConnections",
          "access": "",
          "virtual": false,
          "description": "<p>Return all connections related to this node.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "setCanvas",
          "access": "",
          "virtual": false,
          "description": "<p>Set the canvas element of this figures. This can be used to determine whenever an element\nis added or removed to the canvas.</p>",
          "parameters": [
            {
              "name": "canvas",
              "type": "draw2d.Canvas",
              "description": "<p>the new parent of the figure or null</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setRotationAngle",
          "access": "",
          "virtual": false,
          "description": "<p>Set the rotation angle in degree [0..356]<br>\n<b>Only steps of 90 degree is working well</b>\n<br>\n// Alternatively you can use the attr method:\nfigure.attr({\nangle: angle\n});</p>",
          "parameters": [
            {
              "name": "angle",
              "type": "Number",
              "description": "<p>the rotation angle in degree</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setDimension",
          "access": "",
          "virtual": false,
          "description": "<p>Set the new width and height of the figure.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n    width:  w,\n    height: h\n });</code></pre>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "<p>The new width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "h",
              "type": "Number",
              "description": "<p>The new height of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onPortValueChanged",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the value of any port has been changed</p>",
          "parameters": [
            {
              "name": "relatedPort",
              "type": "draw2d.Port",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "layoutPorts",
          "access": "private",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "createCommand",
          "access": "private",
          "virtual": false,
          "description": "<p>Returns the Command to perform the specified Request or null.</p>",
          "parameters": [
            {
              "name": "request",
              "type": "draw2d.command.CommandType",
              "description": "<p>describes the Command being requested</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.command.Command",
            "description": "<p>null or a Command</p>"
          }
        },
        {
          "name": "attr",
          "access": "",
          "virtual": false,
          "description": "<p>Read or set shape attributes.<br>\nWhen no value is given, reads specified attribute from the element.<br>\nWhen value is given, sets the attribute to that value.\nMultiple attributes can be set by passing an object with name-value pairs.</p>\n<pre><code>let figure = new draw2d.shape.basic.Rectangle();\nfigure.attr('x');      //=&gt; read value\nfigure.attr('x', 30);  //=&gt; set value\n\n// multiple attributes:\nfigure.attr({\n  x: 30,\n  y: 40,\n  width : 200,\n  height: 50,\n  cssClass: &quot;red_border_figure&quot;\n});\n\n// it is possible to override any method of the figure as well\n// Instead of inheritance you can just override the callback methods\n// like\n//\nfigure.attr({\n   onClick : function(){\n       alert(&quot;click&quot;);\n   }\n});\n\n// or you can pass the attr values in the constructor\n//\nlet clickFigure = new draw2d.shape.basic.Rectangle({\n   onClick : function(){\n       alert(&quot;click&quot;);\n   }\n});\n</code></pre>\n<p>Additional you can set the user defined values (userData) with this method\nusing the dot-notation. User defined values are always part of the exported\nJSON data.</p>\n<pre><code>// setting multiple attributes:\nfigure.attr({\n  &quot;userData.my.property.x&quot;: 30,\n  &quot;userData.my.property.y&quot;: 40\n});\n</code></pre>\n<p>Also set using array notation is possible for the userData:</p>\n<pre><code>// dot notation and array brackets:\nfigure.attr({\n  &quot;userData.my.names[0]&quot;: &quot;John&quot;,\n  &quot;userData.my.names[1]&quot;: &quot;Doe&quot;\n});\n</code></pre>\n<p>The Object returned should be the equivalent structured object:</p>\n<pre><code>let obj = figure.getUserData();\n</code></pre>\n<p>That is, where obj is equivalent to:</p>\n<pre><code>let obj = {\n    my:{\n        property:{\n            x: 30,\n            y: 40\n       },\n       names:  [&quot;John&quot;, &quot;Doe&quot;]\n   }\n</code></pre>\n<p>};</p>",
          "parameters": [
            {
              "name": "name",
              "type": "String/Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "value",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "pick",
          "access": "",
          "virtual": false,
          "description": "<p>Return a copy of the object, filtered to only have values for the whitelisted keys.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "select",
          "access": "private",
          "virtual": false,
          "description": "<p>Add the figure to the current selection and propagate this to all edit policies.</p>",
          "parameters": [
            {
              "name": "asPrimarySelection",
              "type": "Boolean",
              "description": "<p>true if the element should be the primary selection</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "unselect",
          "access": "private",
          "virtual": false,
          "description": "<p>Unselect the figure and propagete this event to all edit policies.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setSelectionAdapter",
          "access": "",
          "virtual": false,
          "description": "<p>Returns a function which returns the the figure which must handle the selection handling.</p>",
          "parameters": [
            {
              "name": "adapter",
              "type": "function",
              "description": "<p>function which returns the figure which handles the selection handling</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getSelectionAdapter",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "function",
            "description": ""
          }
        },
        {
          "name": "isSelected",
          "access": "",
          "virtual": false,
          "description": "<p>Returns true if the figure part of the current canvas selection.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setUserData",
          "access": "",
          "virtual": false,
          "description": "<p>Allows a user to attach (or remove) data to an element, without needing to create a custom figure or shape.\nThe data must be a valid JSON object.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   userData: object\n });</code></pre>",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getUserData",
          "access": "",
          "virtual": false,
          "description": "<p>Returns any user data set previously on the given figure by setUserData.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Object",
            "description": ""
          }
        },
        {
          "name": "getId",
          "access": "",
          "virtual": false,
          "description": "<p>Return the UUID of this element.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "setId",
          "access": "",
          "virtual": false,
          "description": "<p>Set the id of this element.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  id: newId\n});</code></pre>",
          "parameters": [
            {
              "name": "newId",
              "type": "String",
              "description": "<p>the new id for this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Return the css styling class name of the element.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "setCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Set the css class of the node.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;cssClass&quot;: &quot;red_border_figure&quot;\n });</code></pre>",
          "parameters": [
            {
              "name": "cssClass",
              "type": "String",
              "description": "<p>the new css class name of the node</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "hasCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>The method will return true if the class is assigned to the element, even if other classes also are.</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the class name to check</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "addCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Add a CSS class to the figure.<br>\nIt's important to note that this method does not replace a class. It simply adds the class,\nappending it to any which may already be assigned to the elements.</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "removeCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Remove the given css class name from the figure</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the css class name to add</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "toggleCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Add or remove the given css class name from the figure</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the class name to toggle</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getCanvas",
          "access": "",
          "virtual": false,
          "description": "<p>Return the current assigned canvas container.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.Canvas",
            "description": ""
          }
        },
        {
          "name": "startTimer",
          "access": "",
          "virtual": false,
          "description": "<p>Start a timer which calls the onTimer method in the given interval.</p>",
          "parameters": [
            {
              "name": "milliSeconds",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "stopTimer",
          "access": "",
          "virtual": false,
          "description": "<p>Stop the internal timer.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onTimer",
          "access": "",
          "virtual": false,
          "description": "<p>Callback method for the internal timer handling<br>\nInherit classes must override this method if they want use the timer feature.</p>\n<pre><code> // Alternatively you can register for this event with\n figure.on(&quot;timer&quot;, function(emitter){\n     alert(&quot;timer fired&quot;);\n });</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "installEditPolicy",
          "access": "",
          "virtual": false,
          "description": "<p>Install a new edit policy to the figure. Each editpolicy is able to focus on a single editing\ntask or group of related tasks. This also allows editing behavior to be selectively reused across\ndifferent figure implementations. Also, behavior can change dynamically, such as when the layouts\nor routing methods change.</p>\n<p>Example for limited DragDrop behavior can be a draw2d.layout.constraint.RegionConstriantPolicy.</p>",
          "parameters": [
            {
              "name": "policy",
              "type": "draw2d.policy.EditPolicy",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "uninstallEditPolicy",
          "access": "",
          "virtual": false,
          "description": "<p>UnInstall the edit policy from the figure. Either the instance itself if found\nor all kind of the given edit policies.</p>",
          "parameters": [
            {
              "name": "policy",
              "type": "draw2d.policy.EditPolicy",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "add",
          "access": "",
          "virtual": false,
          "description": "<p>Add a child figure to the figure. The hands over figure doesn't support drag&amp;drop\noperations. It's only a decorator for the connection.<br>\nMainly for labels or other decorations</p>\n<pre><code>let start = new draw2d.shape.node.Start({x:80, y:150});\nstart.add(new draw2d.shape.basic.Label({text:&quot;Test Label&quot;}), new draw2d.layout.locator.TopLocator());\n\ncanvas.add( start);</code></pre>",
          "parameters": [
            {
              "name": "child",
              "type": "draw2d.Figure",
              "description": "<p>the figure to add as decoration to the connection.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>the locator for the child.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "index",
              "type": "Number",
              "description": "<p>optional index where to insert the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "remove",
          "access": "",
          "virtual": false,
          "description": "<p>Remove the child figure from this figure and the canvas</p>",
          "parameters": [
            {
              "name": "child",
              "type": "draw2d.Figure",
              "description": "<p>the figure to remove.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Object",
            "description": "<p>the removed tupple of figure/locator or null if the child isn't found</p>"
          }
        },
        {
          "name": "getChildren",
          "access": "",
          "virtual": false,
          "description": "<p>Return all children/decorations of this shape which has been added with\ndraw2d.Figure.add</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "resetChildren",
          "access": "",
          "virtual": false,
          "description": "<p>Remove all children/decorations of this shape</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getShapeElement",
          "access": "protected",
          "virtual": false,
          "description": "<p>return the current SVG shape element or create it on demand.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getTopLevelShapeElement",
          "access": "private",
          "virtual": false,
          "description": "<p>Get the top level shape element. May the figure has a set of SVG elements. In this case this\nmethod must return the top level node.<br>\nThis method is used for the toFront/toBack method to order the nodes in the correct way.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "createShapeElement",
          "access": "",
          "virtual": false,
          "description": "<p>Inherited classes must override this method to implement it's own draw functionality.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "applyTransformation",
          "access": "private",
          "virtual": false,
          "description": "<p>apply a transformation to the shape like rotation, translate,..</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getHandleBBox",
          "access": "",
          "virtual": false,
          "description": "<p>Allow dragging only when the cursor is over a specific part of the figure.\n<br>\nOverride this method to specify the bounding box of an element or a draw2d.util.ArrayList\nof draw2d.geo.Rectangle of bounding boxes used to drag the figure. The returned coordinates\nare absolute coordinates to the canvas.\n<br>\n<br>\nDefault implementation returns <b>null</b> to indicate to use the complete figures as\ndrag handle.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": [
              "draw2d.geo.Rectangle",
              "draw2d.util.ArrayList"
            ],
            "description": ""
          }
        },
        {
          "name": "onDragStart",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the drag and drop action begins. You can return [false] if you\nwant avoid that the figure can be move.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": "<p>true if the figure accepts dragging</p>"
          }
        },
        {
          "name": "onDrag",
          "access": "private",
          "virtual": false,
          "description": "<p>Don't call them manually. This will be done by the framework.<br>\nWill be called if the object are moved via drag and drop.\nSub classes can override this method to implement additional stuff. Don't forget to call\nthe super implementation via <code>this._super(dx, dy, dx2, dy2);</code></p>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>the x difference between the start of the drag drop operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>the y difference between the start of the drag drop operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dx2",
              "type": "Number",
              "description": "<p>The x diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy2",
              "type": "Number",
              "description": "<p>The y diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onPanning",
          "access": "",
          "virtual": false,
          "description": "<p>Called by the framework if the figure returns false for the drag operation. In this\ncase we send a &quot;panning&quot; event - mouseDown + mouseMove. This is very useful for\nUI-Widget like slider, spinner,...</p>\n<pre><code> // You can alternatively register an event handler with:\n figure.on(&quot;panning&quot;, function(emitter, eventData){\n     alert(&quot;panning of the figure called&quot;);\n });</code></pre>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>the x difference between the mouse down operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>the y difference between the mouse down operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dx2",
              "type": "Number",
              "description": "<p>The x diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy2",
              "type": "Number",
              "description": "<p>The y diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onPanningEnd",
          "access": "",
          "virtual": false,
          "description": "<p>Called by the framework if the panning event of the figures ends. This happens\nafter the mous up event if the panning is active.</p>\n<pre><code> // You can alternatively register an event handler with:\n figure.on(&quot;panningEnd&quot;, function(emitter){\n     alert(&quot;panning of the figure called&quot;);\n });</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onDragEnd",
          "access": "",
          "virtual": false,
          "description": "<p>Will be called after a drag and drop action.<br>\nSub classes can override this method to implement additional stuff. Don't forget to call\nthe super implementation via <code>this._super();</code></p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "delegateTarget",
          "access": "private",
          "virtual": false,
          "description": "<p>Called by the framework during drag&amp;drop operations if the user drag a figure over this figure</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": "<p>the figure which should receive the drop event or null if the element didn't want a drop event</p>"
          }
        },
        {
          "name": "onDragEnter",
          "access": "",
          "virtual": false,
          "description": "<p>Called by the framework during drag&amp;drop operations if the user drag a figure over this figure</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onDragLeave",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the DragDrop object leaving the current hover figure.</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onDrop",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the user drop this element onto the dropTarget. This event is ONLY fired if the\nshape return &quot;this&quot; in the {@link draw2d.Figure#onDragEnter} method.</p>",
          "parameters": [
            {
              "name": "dropTarget",
              "type": "draw2d.Figure",
              "description": "<p>The drop target.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onCatch",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the user dropped an figure onto this element. This event is ONLY fired if the\nin the canvas installed {@link draw2d.policy.canvas.DropInterceptorPolicy} allow this.</p>",
          "parameters": [
            {
              "name": "droppedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The dropped figure.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onMouseEnter",
          "access": "",
          "virtual": false,
          "description": "<p>Callback method for the mouse enter event. Usefull for mouse hover-effects.\nOverride this method for your own effects. Don't call them manually.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onMouseLeave",
          "access": "",
          "virtual": false,
          "description": "<p>Callback method for the mouse leave event. Useful for mouse hover-effects.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onDoubleClick",
          "access": "",
          "virtual": false,
          "description": "<p>Called when a user dbl clicks on the element</p>\n<pre><code> // Alternatively you can register an event with:\n //\n figure.on(&quot;dblclick&quot;, function(emitter, event){\n     alert(&quot;user dbl click on the figure&quot;);\n });</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onClick",
          "access": "",
          "virtual": false,
          "description": "<p>Called when a user clicks on the element.</p>\n<pre><code> // You can alternatively register an event handler with:\n figure.on(&quot;click&quot;, function(emitter, event){\n     alert(&quot;user click on the figure&quot;);\n });</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onContextMenu",
          "access": "",
          "virtual": false,
          "description": "<p>called by the framework if the figure should show the context menu.<br>\nThe strategy to show the context menu depends on the platform. Either looong press or\nright click with the mouse.</p>\n<pre><code> // Alternatively you register for this event with:\n figure.on(&quot;contextmenu&quot;, function(emitter, event){\n     alert(&quot;user press the right mouse button for a context menu&quot;);\n });</code></pre>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate to show the menu</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate to show the menu</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setAlpha",
          "access": "",
          "virtual": false,
          "description": "<p>Set the alpha blending of this figure.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;alpha&quot;: percent\n });\n\n // ...or:\n figure.attr({\n   &quot;opacity&quot;: percent\n });</code></pre>",
          "parameters": [
            {
              "name": "percent",
              "type": "Number",
              "description": "<p>value between [0..1].</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getAlpha",
          "access": "",
          "virtual": false,
          "description": "<p>Return the alpha blending of the figure</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the current alpha blending</p>"
          }
        },
        {
          "name": "getRotationAngle",
          "access": "",
          "virtual": false,
          "description": "<p>return the rotation angle of the figure in degree of [0..356].</p>\n<br>\n<b>NOTE: this method is pre alpha and not for production. Only steps of 90 degree is working well</b>\n<br>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "isVisible",
          "access": "",
          "virtual": false,
          "description": "<p>Return true if the figure visible.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setKeepAspectRatio",
          "access": "",
          "virtual": false,
          "description": "<p>Guarantee, that the figure width/height will not be distorted. Applicable before calling setDimension().\nIt is false by default.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>boolean flag if the figure should respect the aspect ratio</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getKeepAspectRatio",
          "access": "",
          "virtual": false,
          "description": "<p>Return the flag if the shape keep the aspect ratio.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getZOrder",
          "access": "",
          "virtual": false,
          "description": "<p>Return the current z-index of the element. Currently this is an expensive method. The index will be calculated\nall the time. Caching is not implemented at the moment.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setCanSnapToHelper",
          "access": "",
          "virtual": false,
          "description": "<p>Set the flag if this object can snap to grid or geometry.\nA window of dialog should set this flag to false.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The snap to grid/geometry enable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getCanSnapToHelper",
          "access": "",
          "virtual": false,
          "description": "<p>Returns true if the figure can snap to any helper like a grid, guide, geometrie\nor something else.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "getSnapToGridAnchor",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "setSnapToGridAnchor",
          "access": "",
          "virtual": false,
          "description": "<p>Set the hot spot for all snapTo### operations.</p>",
          "parameters": [
            {
              "name": "point",
              "type": "draw2d.geo.Point",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setWidth",
          "access": "",
          "virtual": false,
          "description": "<p>Set the width of the figure and consider the minWidth attribute</p>",
          "parameters": [
            {
              "name": "width",
              "type": "Number",
              "description": "<p>the new width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getWidth",
          "access": "",
          "virtual": false,
          "description": "<p>The current width of the figure.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setHeight",
          "access": "",
          "virtual": false,
          "description": "<p>Set the heigth of the figure and consider the minWidth attribute</p>",
          "parameters": [
            {
              "name": "height",
              "type": "Number",
              "description": "<p>the new height of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getHeight",
          "access": "",
          "virtual": false,
          "description": "<p>The current height of the figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "getMinWidth",
          "access": "",
          "virtual": false,
          "description": "<p>This value is relevant for the interactive resize of the figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>Returns the min. width of this object.</p>"
          }
        },
        {
          "name": "setMinWidth",
          "access": "",
          "virtual": false,
          "description": "<p>Set the minimum width of this figure</p>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getMinHeight",
          "access": "",
          "virtual": false,
          "description": "<p>This value is relevant for the interactive resize of the figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>Returns the min. height of this object.</p>"
          }
        },
        {
          "name": "setMinHeight",
          "access": "",
          "virtual": false,
          "description": "<p>Set the minimum height of the figure.</p>",
          "parameters": [
            {
              "name": "h",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setX",
          "access": "",
          "virtual": false,
          "description": "<p>the the x-offset related to the parent figure or canvas</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the new x offset of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getX",
          "access": "",
          "virtual": false,
          "description": "<p>The x-offset related to the parent figure or canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the x-offset to the parent figure</p>"
          }
        },
        {
          "name": "setY",
          "access": "",
          "virtual": false,
          "description": "<p>the the y-offset related to the parent figure or canvas</p>",
          "parameters": [
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the new x offset of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getY",
          "access": "",
          "virtual": false,
          "description": "<p>The y-offset related to the parent figure or canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>The y-offset to the parent figure.</p>"
          }
        },
        {
          "name": "getAbsoluteX",
          "access": "",
          "virtual": false,
          "description": "<p>The x-offset related to the canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the x-offset to the canvas</p>"
          }
        },
        {
          "name": "getAbsoluteY",
          "access": "",
          "virtual": false,
          "description": "<p>The y-offset related to the canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>The y-offset to the canvas.</p>"
          }
        },
        {
          "name": "getAbsolutePosition",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the absolute y-position of the port.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getAbsoluteBounds",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the absolute y-position of the port.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "setPosition",
          "access": "",
          "virtual": false,
          "description": "<p>Set the position of the object.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   x: x,\n   y: y\n });</code></pre>",
          "parameters": [
            {
              "name": "x",
              "type": [
                "Number",
                "draw2d.geo.Point"
              ],
              "description": "<p>The new x coordinate of the figure or the x/y coordinate if it is an draw2d.geo.Point</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The new y coordinate of the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPosition",
          "access": "",
          "virtual": false,
          "description": "<p>Get the current position of the figure</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "translate",
          "access": "",
          "virtual": false,
          "description": "<p>Translate the figure with the given x/y offset.</p>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>The x offset to translate</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>The y offset to translate</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setBoundingBox",
          "access": "",
          "virtual": false,
          "description": "<p>Set the bounding box of the figure</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   width: w,\n   height: h,\n   x: x,\n   y: y\n });\n\n // or\n figure.attr({\n   boundingBox: {x:1, y:100, width:30, height:30}\n });</code></pre>",
          "parameters": [
            {
              "name": "rect",
              "type": "draw2d.geo.Rectangle",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getBoundingBox",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the bounding box of the figure in absolute position to the canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "hitTest",
          "access": "",
          "virtual": false,
          "description": "<p>Detect whenever the hands over coordinate is inside the figure.\nThe default implementation is a simple bounding box test.</p>",
          "parameters": [
            {
              "name": "iX",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "iY",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "corona",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setDraggable",
          "access": "",
          "virtual": false,
          "description": "<p>Switch on/off the drag drop behaviour of this object</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The new drag drop indicator</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "isDraggable",
          "access": "",
          "virtual": false,
          "description": "<p>Get the Drag drop enable flag</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": "<p>The new drag drop indicator</p>"
          }
        },
        {
          "name": "isResizeable",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the true if the figure can be resized.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setResizeable",
          "access": "",
          "virtual": false,
          "description": "<p>You can change the resizeable behaviour of this object. Hands over [false] and\nthe figure has no resizehandles if you select them with the mouse.<br></p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   resizeable: flag\n });</code></pre>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The resizeable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "isSelectable",
          "access": "",
          "virtual": false,
          "description": "<p>Indicates whenever the element is selectable by user interaction or API.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setSelectable",
          "access": "",
          "virtual": false,
          "description": "<p>You can change the selectable behavior of this object. Hands over [false] and\nthe figure has no selection handles if you try to select them with the mouse.<br></p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The selectable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "isStrechable",
          "access": "",
          "virtual": false,
          "description": "<p>Return true if the object doesn't care about the aspect ratio.\nYou can change the height and width independent.<br></p>\n<p>Replaced with &quot;getKeepAspectRatio&quot;</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "isDeleteable",
          "access": "",
          "virtual": false,
          "description": "<p>Return false if you avoid that the user can delete your figure.\nSub class can override this method.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setDeleteable",
          "access": "",
          "virtual": false,
          "description": "<p>Set the flag if the shape is deleteable.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>enable or disable flag for the delete operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setParent",
          "access": "private",
          "virtual": false,
          "description": "<p>Set the parent of this figure.\nDon't call them manually.</p>",
          "parameters": [
            {
              "name": "parent",
              "type": "draw2d.Figure",
              "description": "<p>The new parent of this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getParent",
          "access": "",
          "virtual": false,
          "description": "<p>Get the parent of this figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": ""
          }
        },
        {
          "name": "contains",
          "access": "",
          "virtual": false,
          "description": "<p>Check to see if a figure is a descendant of another figure.\n<br>\nThe contains() method returns true if the figure provided by the argument is a descendant of this figure,\nwhether it is a direct child or nested more deeply. Otherwise, it returns false.</p>",
          "parameters": [
            {
              "name": "containedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure that may be contained by (a descendant of) this figure.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getRoot",
          "access": "",
          "virtual": false,
          "description": "<p>Get the top most parent of this figure. This can be an layout figure or parent container</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": ""
          }
        },
        {
          "name": "setComposite",
          "access": "",
          "virtual": false,
          "description": "<p>Set the assigned composite of this figure.</p>",
          "parameters": [
            {
              "name": "composite",
              "type": "draw2d.shape.composite.StrongComposite",
              "description": "<p>The assigned composite of this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getComposite",
          "access": "",
          "virtual": false,
          "description": "<p>Get the assigned composite of this figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.shape.composite.StrongComposite",
            "description": ""
          }
        },
        {
          "name": "fireEvent",
          "access": "",
          "virtual": false,
          "description": "<p>Execute all handlers and behaviors attached to the figure for the given event type.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "String",
              "description": "<p>the event to trigger</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "args",
              "type": "Object",
              "description": "<p>optional parameters for the triggered event callback</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "on",
          "access": "",
          "virtual": false,
          "description": "<p>Attach an event handler function for one or more events to the figure.\nTo remove events bound with .on(), see {@link #off}.</p>\n<p>possible events are:<br></p>\n<ul>\n  <li>click</li>\n  <li>dblclick</li>\n  <li>move</li>\n  <li>resize</li>\n  <li>timer</li>\n  <li>contextmenu</li>\n  <li>show</li>\n  <li>hide</li>\n  <li>added</li>\n  <li>removed</li>\n  <li>change:[attr]</li>\n</ul>",
          "parameters": [
            {
              "name": "event",
              "type": "String",
              "description": "<p>One or more space-separated event types</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback",
              "type": "function",
              "description": "<p>A function to execute when the event is triggered.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback.emitter",
              "type": "draw2d.Figure",
              "description": "<p>the emitter of the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback.obj",
              "type": "Object",
              "description": "<p>optional event related data</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "context",
              "type": "Object",
              "description": "<p>optional context of the function callback.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "off",
          "access": "",
          "virtual": false,
          "description": "<p>The .off() method removes event handlers that were attached with {@link #on}.<br>\nCalling .off() with no arguments removes all handlers attached to the elements.<br>\n<br>\nIf a simple event name such as &quot;move&quot; is provided, all events of that type are removed from the figure.</p>",
          "parameters": [
            {
              "name": "eventOrFunction",
              "type": [
                "String",
                "function"
              ],
              "description": "<p>the event name of the registerd function or the function itself</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getBestChild",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the best figure at the location [x,y]. It is a simple hit test. Keep in mind that only visible objects\nare returned.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>The x position.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The y position.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "figureToIgnore",
              "type": [
                "draw2d.Figure",
                "Array"
              ],
              "description": "<p>The figures which should be ignored.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        }
      ]
    },
    {
      "name": "Text",
      "namespace": "draw2d.shape.basic",
      "description": "<p>draw2d.shape.basic.Text\nImplements a simple text with word wrapping.<br>The height of the element is automatic calculated. The widht of\nthe element is changeable by the user and respect the minWidth constraint.\n<br></p>",
      "extends": [
        "draw2d.shape.basic.Label"
      ],
      "access": "",
      "virtual": false,
      "fires": "",
      "constructor": {
        "name": "Text",
        "description": "",
        "parameters": [],
        "examples": [
          "let shape =  new draw2d.shape.basic.Text({text:\"This is a simple text with some loooooong word in.\"});\n\n    canvas.add(shape,40,10);"
        ]
      },
      "functions": [
        {
          "name": "init",
          "access": "",
          "virtual": false,
          "description": "<p>Creates a new text element.</p>",
          "parameters": [
            {
              "name": "attr",
              "type": "Object",
              "description": "<p>the configuration of the shape</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "repaint",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setDimension",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "clearCache",
          "access": "private",
          "virtual": false,
          "description": "<p>clear the internal cache for width/height precalculation</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getMinWidth",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "wrappedTextAttr",
          "access": "private",
          "virtual": false,
          "description": "<p>calculates the attributes (wrapped text and width, height) with the given parameter</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "createSet",
          "access": "",
          "virtual": false,
          "description": "<p>Creates the shape object for a text node.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setCanvas",
          "access": "",
          "virtual": false,
          "description": "<p>Set the canvas element of this figures.</p>",
          "parameters": [
            {
              "name": "canvas",
              "type": "draw2d.Canvas",
              "description": "<p>the new parent of the figure or null</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "repaint",
          "access": "",
          "virtual": false,
          "description": "<p>Trigger the repaint of the element and transport all style properties to the visual representation.<br>\nCalled by the framework.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "calculateTextAttr",
          "access": "protected",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "applyTransformation",
          "access": "private",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setFontSize",
          "access": "",
          "virtual": false,
          "description": "<p>Set the new font size in [pt].</p>",
          "parameters": [
            {
              "name": "size",
              "type": "Number",
              "description": "<p>The new font size in <code>pt</code></p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getFontSize",
          "access": "",
          "virtual": false,
          "description": "<p>Return the current used font size in px.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setBold",
          "access": "",
          "virtual": false,
          "description": "<p>Set the label to <b>bold</b> or <b>normal</b> font weight.</p>",
          "parameters": [
            {
              "name": "bold",
              "type": "Boolean",
              "description": "<p>The bold flag for the label</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "isBold",
          "access": "",
          "virtual": false,
          "description": "<p>Return the &quot;bold&quot; attribute of the label</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setOutlineColor",
          "access": "",
          "virtual": false,
          "description": "<p>Set the outline color of the font.</p>",
          "parameters": [
            {
              "name": "color",
              "type": "draw2d.util.Color/String",
              "description": "<p>The new color of the line.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getOutlineColor",
          "access": "",
          "virtual": false,
          "description": "<p>The outlien color of the text</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.Color",
            "description": ""
          }
        },
        {
          "name": "setOutlineStroke",
          "access": "",
          "virtual": false,
          "description": "<p>Set the stroke of the text to use.</p>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "<p>The new line width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getOutlineStroke",
          "access": "",
          "virtual": false,
          "description": "<p>The used outline line width.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setFontColor",
          "access": "",
          "virtual": false,
          "description": "<p>Set the color of the font.</p>",
          "parameters": [
            {
              "name": "color",
              "type": [
                "draw2d.util.Color",
                "String"
              ],
              "description": "<p>The new color of the line.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getFontColor",
          "access": "",
          "virtual": false,
          "description": "<p>The current used font color</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.Color",
            "description": ""
          }
        },
        {
          "name": "setPadding",
          "access": "",
          "virtual": false,
          "description": "<p>Set the padding of the element</p>\n<pre><code> // Alternatively you can use the attr method:\n //\n // set the padding for top,left,bottom,right in one call\n figure.attr({\n   padding: 3\n });\n\n // update the padding left and top\n figure.attr({\n   padding: {left:3, top:30}\n });</code></pre>",
          "parameters": [
            {
              "name": "padding",
              "type": [
                "Number",
                "Object"
              ],
              "description": "<p>The new padding</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPadding",
          "access": "",
          "virtual": false,
          "description": "<p>Get the padding of the element.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setFontFamily",
          "access": "",
          "virtual": false,
          "description": "<p>Set the font family to use. If you use the shown font names the typical fallback\nfont are installed as well.</p>\n<p><b>Serif Fonts</b></p>\n<ul>\n <li><span style=\"font-family:'Georgia'\">Georgia</span></li>\n <li><span style=\"font-family:'Palatino Linotype'\">Palatino Linotype</span></li>\n <li><span style=\"font-family:'Times New Roman'\">Times New Roman</span></li>\n</ul>\n<p><b>Sans-Serif Fonts</b></p>\n<ul>\n <li><span style=\"font-family:'Arial'\">Arial</span></li>\n <li><span style=\"font-family:'Arial Black'\">Arial Black</span></li>\n <li><span style=\"font-family:'Comic Sans MS'\">Comic Sans MS</span></li>\n <li><span style=\"font-family:'Impact, Charcoal'\">Impact, Charcoal</span></li>\n <li><span style=\"font-family:'Lucida Sans Unicode'\">Lucida Sans Unicode</span></li>\n <li><span style=\"font-family:'Tahoma, Geneva'\">Tahoma, Geneva</span></li>\n <li><span style=\"font-family:'Trebuchet MS'\">Trebuchet MS</span> </li>\n <li><span style=\"font-family:'Verdana'\">Verdana</span></li>\n</ul>\n<p><b>Monospace Fonts</b></p>\n<ul>\n <li><span style=\"font-family:'Courier New'\">Courier New</span></li>\n <li><span style=\"font-family:'Lucida Console'\">Lucida Console</span></li>\n</ul>",
          "parameters": [
            {
              "name": "font",
              "type": "String",
              "description": "<p>The font to use</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getFontFamily",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the used font family of the label.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "setDimension",
          "access": "",
          "virtual": false,
          "description": "<p>A Label did have &quot;autosize&quot;. Do nothing at all.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getMinWidth",
          "access": "",
          "virtual": false,
          "description": "<p>This value is relevant for the interactive resize of the figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>Returns the min. width of this object.</p>"
          }
        },
        {
          "name": "getMinHeight",
          "access": "",
          "virtual": false,
          "description": "<p>This value is relevant for the interactive resize of the figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>Returns the min. width of this object.</p>"
          }
        },
        {
          "name": "getWidth",
          "access": "",
          "virtual": false,
          "description": "<p>Return the calculate width of the set. This calculates the bounding box of all elements.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the calculated width of the label</p>"
          }
        },
        {
          "name": "getHeight",
          "access": "",
          "virtual": false,
          "description": "<p>Return the calculated height of the set. This calculates the bounding box of all elements.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the calculated height of the label</p>"
          }
        },
        {
          "name": "installEditor",
          "access": "",
          "virtual": false,
          "description": "<p>Set an editor for the label. This can be a dialog or inplace editor for the\nText.<br>\nThe editor will be activated if you doubleClick on the label.</p>",
          "parameters": [
            {
              "name": "editor",
              "type": [
                "draw2d.ui.LabelEditor",
                "String"
              ],
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onDoubleClick",
          "access": "",
          "virtual": false,
          "description": "<p>Called when a user dbl clicks on the element</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getText",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the current text of the label.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "",
            "description": "<p>the current display text of the label</p>"
          }
        },
        {
          "name": "setText",
          "access": "",
          "virtual": false,
          "description": "<p>Set the text for the label. Use \\n for multiline text.</p>",
          "parameters": [
            {
              "name": "text",
              "type": "String",
              "description": "<p>The new text for the label.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPersistentAttributes",
          "access": "",
          "virtual": false,
          "description": "<p>Return an objects with all important attributes for XML or JSON serialization</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Object",
            "description": ""
          }
        },
        {
          "name": "setPersistentAttributes",
          "access": "",
          "virtual": false,
          "description": "<p>Read all attributes from the serialized properties and transfer them into the shape.</p>",
          "parameters": [
            {
              "name": "memento",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Set the css class if the node.</p>",
          "parameters": [
            {
              "name": "cssClass",
              "type": "String",
              "description": "<p>the new css class name of the node</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setVisible",
          "access": "",
          "virtual": false,
          "description": "<p>Show/hide the element. The element didn't receive any mouse events (click, dblclick) if you hide the\nfigure.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   visible: flag\n });</code></pre>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "duration",
              "type": "Number",
              "description": "<p>the optional number for the fadeIn /fadeOut of the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "applyAlpha",
          "access": "private",
          "virtual": false,
          "description": "<p>Apply the opacity to all child set elements. Override this if you want to avoid opacity changes.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "toFront",
          "access": "",
          "virtual": false,
          "description": "<p>Moves the element so it is the closest to the viewerâ€™s eyes, on top of other elements. Additional\nthe internal model changed as well.</p>\n<p>Optional: Inserts current object in front of the given one.</p>",
          "parameters": [
            {
              "name": "figure",
              "type": "draw2d.Figure",
              "description": "<p>move current object in front of the given one.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "toBack",
          "access": "",
          "virtual": false,
          "description": "<p>Moves the element to the background. Additional\nthe internal model changed as well.</p>\n<p>Optional: Inserts current object in front of the given one.</p>",
          "parameters": [
            {
              "name": "figure",
              "type": "draw2d.Figure",
              "description": "<p>move current object in front of the given one.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getTopLevelShapeElement",
          "access": "private",
          "virtual": false,
          "description": "<p>Get the top level shape element. May the figure has a set of SVG elements. In this case this\nmethod must return the top level node.<br>\nThis method is used for the toFront/toBack method to order the nodes in the correct way.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "createShapeElement",
          "access": "private",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setDashArray",
          "access": "",
          "virtual": false,
          "description": "<p>Set the line style for dot/dash styling. Possible values are\n[&quot;&quot;, &quot;-&quot;, &quot;.&quot;, &quot;-.&quot;, &quot;-..&quot;, &quot;. &quot;, &quot;- &quot;, &quot;--&quot;, &quot;- .&quot;, &quot;--.&quot;, &quot;--..&quot;]</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   dash: pattern\n });</code></pre>",
          "parameters": [
            {
              "name": "pattern",
              "type": "String",
              "description": "<p>the string with the dot/dash pattern. valid values: [&quot;&quot;, &quot;-&quot;, &quot;.&quot;, &quot;-.&quot;, &quot;-..&quot;, &quot;. &quot;, &quot;- &quot;, &quot;--&quot;, &quot;- .&quot;, &quot;--.&quot;, &quot;--..&quot;]</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getDashArray",
          "access": "",
          "virtual": false,
          "description": "<p>Get the line style for this object.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr(&quot;dash&quot;);</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setRadius",
          "access": "",
          "virtual": false,
          "description": "<p>Sets the corner radius or the edges.</p>",
          "parameters": [
            {
              "name": "radius",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getRadius",
          "access": "",
          "virtual": false,
          "description": "<p>Get the corner radius of the edges.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setGlow",
          "access": "",
          "virtual": false,
          "description": "<p>Highlight the element or remove the highlighting</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>indicates glow/noGlow</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setBackgroundColor",
          "access": "",
          "virtual": false,
          "description": "<p>Set the new background color of the figure. It is possible to hands over\n<code>null</code> to set the background transparent.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;bgColor&quot;: &quot;#f0f0f0&quot;\n });</code></pre>",
          "parameters": [
            {
              "name": "color",
              "type": [
                "String",
                "draw2d.util.Color"
              ],
              "description": "<p>The new background color of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getBackgroundColor",
          "access": "",
          "virtual": false,
          "description": "<p>The current used background color.</p>\n<pre><code> // Alternatively you can use the attr method:\n var color =figure.attr(&quot;bgColor&quot;);</code></pre>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.Color",
            "description": ""
          }
        },
        {
          "name": "setStroke",
          "access": "",
          "virtual": false,
          "description": "<p>Set the stroke to use.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;stroke&quot;: 2\n });</code></pre>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "<p>The new line width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getStroke",
          "access": "",
          "virtual": false,
          "description": "<p>The used line width.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setColor",
          "access": "",
          "virtual": false,
          "description": "<p>Set the foreground color of the figure.\nThis method fires a <i>document dirty</i> event.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;color&quot;: &quot;#f3f3f3&quot;\n });</code></pre>",
          "parameters": [
            {
              "name": "color",
              "type": [
                "String",
                "draw2d.util.Color"
              ],
              "description": "<p>The new color of the line.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getColor",
          "access": "",
          "virtual": false,
          "description": "<p>Get the current used foreground color</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.Color",
            "description": ""
          }
        },
        {
          "name": "setPersistPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Indicates if the node should read/write the ports via the draw2d.Figure.getPersistenAttributes\nto the JSON object</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPersistPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Indicates if the figure writes the ports to the JSON structore too.\nDefault is &quot;false&quot;</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "getPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Return all ports of the node. The results contains\nall ports of the children too per default. Set <b>recursive</b>\nto false to retrieve direct assigned ports only.</p>",
          "parameters": [
            {
              "name": "recursive",
              "type": "Boolean",
              "description": "<p>indicates if the method should return children ports too. Default is <b>true</b></p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "getInputPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Return all input ports of the node.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "getOutputPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Return all output ports of the node.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "clone",
          "access": "",
          "virtual": false,
          "description": "<p>Clone the figure. <br>\nYou must override and implement the methods <b>getPersistentAttributes</b> and <b>setPersistentAttributes</b> for your custom\nfigures if the have special attributes.</p>\n<p>The clone() method performs a deep copy of the object, meaning that it copies the children, ports and decorations\nper default. You can control the clone procedure with the 'cloneMetaData'.</p>",
          "parameters": [
            {
              "name": "cloneMetaData",
              "type": "Object",
              "description": "<p>controls the clone procedure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "cloneMetaData.excludeChildren",
              "type": "Boolean",
              "description": "<p>set it to true if you want exclude the children.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "cloneMetaData.excludePorts",
              "type": "Boolean",
              "description": "<p>set it to true if you want exclude the ports of the node.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portName",
              "type": "String",
              "description": "<p>The name of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.Port",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getInputPort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the input port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.InputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getOutputPort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the output port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or the numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.OutputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getHybridPort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the input port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.InputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "addPort",
          "access": "",
          "virtual": false,
          "description": "<p>Add a port to this node at the given position.<br></p>",
          "parameters": [
            {
              "name": "port",
              "type": "draw2d.Port",
              "description": "<p>The new port to add.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>The layout for the port.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "resetPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Remove all ports of this node</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "removePort",
          "access": "",
          "virtual": false,
          "description": "<p>Removes a port and all related connections from this node.<br></p>",
          "parameters": [
            {
              "name": "port",
              "type": "draw2d.Port",
              "description": "<p>The port to remove.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "createPort",
          "access": "",
          "virtual": false,
          "description": "<p>Create a standard Port for this element. Inherited class can override this\nmethod to create its own type of ports.</p>",
          "parameters": [
            {
              "name": "type",
              "type": "String",
              "description": "<p>the type of the requested port. possible [&quot;input&quot;, &quot;output&quot;]</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>the layouter to use for this port</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getConnections",
          "access": "",
          "virtual": false,
          "description": "<p>Return all connections related to this node.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "setRotationAngle",
          "access": "",
          "virtual": false,
          "description": "<p>Set the rotation angle in degree [0..356]<br>\n<b>Only steps of 90 degree is working well</b>\n<br>\n// Alternatively you can use the attr method:\nfigure.attr({\nangle: angle\n});</p>",
          "parameters": [
            {
              "name": "angle",
              "type": "Number",
              "description": "<p>the rotation angle in degree</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onPortValueChanged",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the value of any port has been changed</p>",
          "parameters": [
            {
              "name": "relatedPort",
              "type": "draw2d.Port",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "layoutPorts",
          "access": "private",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "createCommand",
          "access": "private",
          "virtual": false,
          "description": "<p>Returns the Command to perform the specified Request or null.</p>",
          "parameters": [
            {
              "name": "request",
              "type": "draw2d.command.CommandType",
              "description": "<p>describes the Command being requested</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.command.Command",
            "description": "<p>null or a Command</p>"
          }
        },
        {
          "name": "attr",
          "access": "",
          "virtual": false,
          "description": "<p>Read or set shape attributes.<br>\nWhen no value is given, reads specified attribute from the element.<br>\nWhen value is given, sets the attribute to that value.\nMultiple attributes can be set by passing an object with name-value pairs.</p>\n<pre><code>let figure = new draw2d.shape.basic.Rectangle();\nfigure.attr('x');      //=&gt; read value\nfigure.attr('x', 30);  //=&gt; set value\n\n// multiple attributes:\nfigure.attr({\n  x: 30,\n  y: 40,\n  width : 200,\n  height: 50,\n  cssClass: &quot;red_border_figure&quot;\n});\n\n// it is possible to override any method of the figure as well\n// Instead of inheritance you can just override the callback methods\n// like\n//\nfigure.attr({\n   onClick : function(){\n       alert(&quot;click&quot;);\n   }\n});\n\n// or you can pass the attr values in the constructor\n//\nlet clickFigure = new draw2d.shape.basic.Rectangle({\n   onClick : function(){\n       alert(&quot;click&quot;);\n   }\n});\n</code></pre>\n<p>Additional you can set the user defined values (userData) with this method\nusing the dot-notation. User defined values are always part of the exported\nJSON data.</p>\n<pre><code>// setting multiple attributes:\nfigure.attr({\n  &quot;userData.my.property.x&quot;: 30,\n  &quot;userData.my.property.y&quot;: 40\n});\n</code></pre>\n<p>Also set using array notation is possible for the userData:</p>\n<pre><code>// dot notation and array brackets:\nfigure.attr({\n  &quot;userData.my.names[0]&quot;: &quot;John&quot;,\n  &quot;userData.my.names[1]&quot;: &quot;Doe&quot;\n});\n</code></pre>\n<p>The Object returned should be the equivalent structured object:</p>\n<pre><code>let obj = figure.getUserData();\n</code></pre>\n<p>That is, where obj is equivalent to:</p>\n<pre><code>let obj = {\n    my:{\n        property:{\n            x: 30,\n            y: 40\n       },\n       names:  [&quot;John&quot;, &quot;Doe&quot;]\n   }\n</code></pre>\n<p>};</p>",
          "parameters": [
            {
              "name": "name",
              "type": "String/Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "value",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "pick",
          "access": "",
          "virtual": false,
          "description": "<p>Return a copy of the object, filtered to only have values for the whitelisted keys.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "select",
          "access": "private",
          "virtual": false,
          "description": "<p>Add the figure to the current selection and propagate this to all edit policies.</p>",
          "parameters": [
            {
              "name": "asPrimarySelection",
              "type": "Boolean",
              "description": "<p>true if the element should be the primary selection</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "unselect",
          "access": "private",
          "virtual": false,
          "description": "<p>Unselect the figure and propagete this event to all edit policies.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setSelectionAdapter",
          "access": "",
          "virtual": false,
          "description": "<p>Returns a function which returns the the figure which must handle the selection handling.</p>",
          "parameters": [
            {
              "name": "adapter",
              "type": "function",
              "description": "<p>function which returns the figure which handles the selection handling</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getSelectionAdapter",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "function",
            "description": ""
          }
        },
        {
          "name": "isSelected",
          "access": "",
          "virtual": false,
          "description": "<p>Returns true if the figure part of the current canvas selection.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setUserData",
          "access": "",
          "virtual": false,
          "description": "<p>Allows a user to attach (or remove) data to an element, without needing to create a custom figure or shape.\nThe data must be a valid JSON object.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   userData: object\n });</code></pre>",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getUserData",
          "access": "",
          "virtual": false,
          "description": "<p>Returns any user data set previously on the given figure by setUserData.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Object",
            "description": ""
          }
        },
        {
          "name": "getId",
          "access": "",
          "virtual": false,
          "description": "<p>Return the UUID of this element.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "setId",
          "access": "",
          "virtual": false,
          "description": "<p>Set the id of this element.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  id: newId\n});</code></pre>",
          "parameters": [
            {
              "name": "newId",
              "type": "String",
              "description": "<p>the new id for this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Return the css styling class name of the element.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "hasCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>The method will return true if the class is assigned to the element, even if other classes also are.</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the class name to check</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "addCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Add a CSS class to the figure.<br>\nIt's important to note that this method does not replace a class. It simply adds the class,\nappending it to any which may already be assigned to the elements.</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "removeCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Remove the given css class name from the figure</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the css class name to add</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "toggleCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Add or remove the given css class name from the figure</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the class name to toggle</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getCanvas",
          "access": "",
          "virtual": false,
          "description": "<p>Return the current assigned canvas container.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.Canvas",
            "description": ""
          }
        },
        {
          "name": "startTimer",
          "access": "",
          "virtual": false,
          "description": "<p>Start a timer which calls the onTimer method in the given interval.</p>",
          "parameters": [
            {
              "name": "milliSeconds",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "stopTimer",
          "access": "",
          "virtual": false,
          "description": "<p>Stop the internal timer.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onTimer",
          "access": "",
          "virtual": false,
          "description": "<p>Callback method for the internal timer handling<br>\nInherit classes must override this method if they want use the timer feature.</p>\n<pre><code> // Alternatively you can register for this event with\n figure.on(&quot;timer&quot;, function(emitter){\n     alert(&quot;timer fired&quot;);\n });</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "installEditPolicy",
          "access": "",
          "virtual": false,
          "description": "<p>Install a new edit policy to the figure. Each editpolicy is able to focus on a single editing\ntask or group of related tasks. This also allows editing behavior to be selectively reused across\ndifferent figure implementations. Also, behavior can change dynamically, such as when the layouts\nor routing methods change.</p>\n<p>Example for limited DragDrop behavior can be a draw2d.layout.constraint.RegionConstriantPolicy.</p>",
          "parameters": [
            {
              "name": "policy",
              "type": "draw2d.policy.EditPolicy",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "uninstallEditPolicy",
          "access": "",
          "virtual": false,
          "description": "<p>UnInstall the edit policy from the figure. Either the instance itself if found\nor all kind of the given edit policies.</p>",
          "parameters": [
            {
              "name": "policy",
              "type": "draw2d.policy.EditPolicy",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "add",
          "access": "",
          "virtual": false,
          "description": "<p>Add a child figure to the figure. The hands over figure doesn't support drag&amp;drop\noperations. It's only a decorator for the connection.<br>\nMainly for labels or other decorations</p>\n<pre><code>let start = new draw2d.shape.node.Start({x:80, y:150});\nstart.add(new draw2d.shape.basic.Label({text:&quot;Test Label&quot;}), new draw2d.layout.locator.TopLocator());\n\ncanvas.add( start);</code></pre>",
          "parameters": [
            {
              "name": "child",
              "type": "draw2d.Figure",
              "description": "<p>the figure to add as decoration to the connection.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>the locator for the child.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "index",
              "type": "Number",
              "description": "<p>optional index where to insert the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "remove",
          "access": "",
          "virtual": false,
          "description": "<p>Remove the child figure from this figure and the canvas</p>",
          "parameters": [
            {
              "name": "child",
              "type": "draw2d.Figure",
              "description": "<p>the figure to remove.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Object",
            "description": "<p>the removed tupple of figure/locator or null if the child isn't found</p>"
          }
        },
        {
          "name": "getChildren",
          "access": "",
          "virtual": false,
          "description": "<p>Return all children/decorations of this shape which has been added with\ndraw2d.Figure.add</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "resetChildren",
          "access": "",
          "virtual": false,
          "description": "<p>Remove all children/decorations of this shape</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getShapeElement",
          "access": "protected",
          "virtual": false,
          "description": "<p>return the current SVG shape element or create it on demand.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getHandleBBox",
          "access": "",
          "virtual": false,
          "description": "<p>Allow dragging only when the cursor is over a specific part of the figure.\n<br>\nOverride this method to specify the bounding box of an element or a draw2d.util.ArrayList\nof draw2d.geo.Rectangle of bounding boxes used to drag the figure. The returned coordinates\nare absolute coordinates to the canvas.\n<br>\n<br>\nDefault implementation returns <b>null</b> to indicate to use the complete figures as\ndrag handle.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": [
              "draw2d.geo.Rectangle",
              "draw2d.util.ArrayList"
            ],
            "description": ""
          }
        },
        {
          "name": "onDragStart",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the drag and drop action begins. You can return [false] if you\nwant avoid that the figure can be move.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": "<p>true if the figure accepts dragging</p>"
          }
        },
        {
          "name": "onDrag",
          "access": "private",
          "virtual": false,
          "description": "<p>Don't call them manually. This will be done by the framework.<br>\nWill be called if the object are moved via drag and drop.\nSub classes can override this method to implement additional stuff. Don't forget to call\nthe super implementation via <code>this._super(dx, dy, dx2, dy2);</code></p>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>the x difference between the start of the drag drop operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>the y difference between the start of the drag drop operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dx2",
              "type": "Number",
              "description": "<p>The x diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy2",
              "type": "Number",
              "description": "<p>The y diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onPanning",
          "access": "",
          "virtual": false,
          "description": "<p>Called by the framework if the figure returns false for the drag operation. In this\ncase we send a &quot;panning&quot; event - mouseDown + mouseMove. This is very useful for\nUI-Widget like slider, spinner,...</p>\n<pre><code> // You can alternatively register an event handler with:\n figure.on(&quot;panning&quot;, function(emitter, eventData){\n     alert(&quot;panning of the figure called&quot;);\n });</code></pre>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>the x difference between the mouse down operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>the y difference between the mouse down operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dx2",
              "type": "Number",
              "description": "<p>The x diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy2",
              "type": "Number",
              "description": "<p>The y diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onPanningEnd",
          "access": "",
          "virtual": false,
          "description": "<p>Called by the framework if the panning event of the figures ends. This happens\nafter the mous up event if the panning is active.</p>\n<pre><code> // You can alternatively register an event handler with:\n figure.on(&quot;panningEnd&quot;, function(emitter){\n     alert(&quot;panning of the figure called&quot;);\n });</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onDragEnd",
          "access": "",
          "virtual": false,
          "description": "<p>Will be called after a drag and drop action.<br>\nSub classes can override this method to implement additional stuff. Don't forget to call\nthe super implementation via <code>this._super();</code></p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "delegateTarget",
          "access": "private",
          "virtual": false,
          "description": "<p>Called by the framework during drag&amp;drop operations if the user drag a figure over this figure</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": "<p>the figure which should receive the drop event or null if the element didn't want a drop event</p>"
          }
        },
        {
          "name": "onDragEnter",
          "access": "",
          "virtual": false,
          "description": "<p>Called by the framework during drag&amp;drop operations if the user drag a figure over this figure</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onDragLeave",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the DragDrop object leaving the current hover figure.</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onDrop",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the user drop this element onto the dropTarget. This event is ONLY fired if the\nshape return &quot;this&quot; in the {@link draw2d.Figure#onDragEnter} method.</p>",
          "parameters": [
            {
              "name": "dropTarget",
              "type": "draw2d.Figure",
              "description": "<p>The drop target.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onCatch",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the user dropped an figure onto this element. This event is ONLY fired if the\nin the canvas installed {@link draw2d.policy.canvas.DropInterceptorPolicy} allow this.</p>",
          "parameters": [
            {
              "name": "droppedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The dropped figure.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onMouseEnter",
          "access": "",
          "virtual": false,
          "description": "<p>Callback method for the mouse enter event. Usefull for mouse hover-effects.\nOverride this method for your own effects. Don't call them manually.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onMouseLeave",
          "access": "",
          "virtual": false,
          "description": "<p>Callback method for the mouse leave event. Useful for mouse hover-effects.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onClick",
          "access": "",
          "virtual": false,
          "description": "<p>Called when a user clicks on the element.</p>\n<pre><code> // You can alternatively register an event handler with:\n figure.on(&quot;click&quot;, function(emitter, event){\n     alert(&quot;user click on the figure&quot;);\n });</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onContextMenu",
          "access": "",
          "virtual": false,
          "description": "<p>called by the framework if the figure should show the context menu.<br>\nThe strategy to show the context menu depends on the platform. Either looong press or\nright click with the mouse.</p>\n<pre><code> // Alternatively you register for this event with:\n figure.on(&quot;contextmenu&quot;, function(emitter, event){\n     alert(&quot;user press the right mouse button for a context menu&quot;);\n });</code></pre>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate to show the menu</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate to show the menu</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setAlpha",
          "access": "",
          "virtual": false,
          "description": "<p>Set the alpha blending of this figure.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;alpha&quot;: percent\n });\n\n // ...or:\n figure.attr({\n   &quot;opacity&quot;: percent\n });</code></pre>",
          "parameters": [
            {
              "name": "percent",
              "type": "Number",
              "description": "<p>value between [0..1].</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getAlpha",
          "access": "",
          "virtual": false,
          "description": "<p>Return the alpha blending of the figure</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the current alpha blending</p>"
          }
        },
        {
          "name": "getRotationAngle",
          "access": "",
          "virtual": false,
          "description": "<p>return the rotation angle of the figure in degree of [0..356].</p>\n<br>\n<b>NOTE: this method is pre alpha and not for production. Only steps of 90 degree is working well</b>\n<br>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "isVisible",
          "access": "",
          "virtual": false,
          "description": "<p>Return true if the figure visible.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setKeepAspectRatio",
          "access": "",
          "virtual": false,
          "description": "<p>Guarantee, that the figure width/height will not be distorted. Applicable before calling setDimension().\nIt is false by default.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>boolean flag if the figure should respect the aspect ratio</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getKeepAspectRatio",
          "access": "",
          "virtual": false,
          "description": "<p>Return the flag if the shape keep the aspect ratio.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getZOrder",
          "access": "",
          "virtual": false,
          "description": "<p>Return the current z-index of the element. Currently this is an expensive method. The index will be calculated\nall the time. Caching is not implemented at the moment.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setCanSnapToHelper",
          "access": "",
          "virtual": false,
          "description": "<p>Set the flag if this object can snap to grid or geometry.\nA window of dialog should set this flag to false.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The snap to grid/geometry enable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getCanSnapToHelper",
          "access": "",
          "virtual": false,
          "description": "<p>Returns true if the figure can snap to any helper like a grid, guide, geometrie\nor something else.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "getSnapToGridAnchor",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "setSnapToGridAnchor",
          "access": "",
          "virtual": false,
          "description": "<p>Set the hot spot for all snapTo### operations.</p>",
          "parameters": [
            {
              "name": "point",
              "type": "draw2d.geo.Point",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setWidth",
          "access": "",
          "virtual": false,
          "description": "<p>Set the width of the figure and consider the minWidth attribute</p>",
          "parameters": [
            {
              "name": "width",
              "type": "Number",
              "description": "<p>the new width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setHeight",
          "access": "",
          "virtual": false,
          "description": "<p>Set the heigth of the figure and consider the minWidth attribute</p>",
          "parameters": [
            {
              "name": "height",
              "type": "Number",
              "description": "<p>the new height of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setMinWidth",
          "access": "",
          "virtual": false,
          "description": "<p>Set the minimum width of this figure</p>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setMinHeight",
          "access": "",
          "virtual": false,
          "description": "<p>Set the minimum height of the figure.</p>",
          "parameters": [
            {
              "name": "h",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setX",
          "access": "",
          "virtual": false,
          "description": "<p>the the x-offset related to the parent figure or canvas</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the new x offset of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getX",
          "access": "",
          "virtual": false,
          "description": "<p>The x-offset related to the parent figure or canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the x-offset to the parent figure</p>"
          }
        },
        {
          "name": "setY",
          "access": "",
          "virtual": false,
          "description": "<p>the the y-offset related to the parent figure or canvas</p>",
          "parameters": [
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the new x offset of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getY",
          "access": "",
          "virtual": false,
          "description": "<p>The y-offset related to the parent figure or canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>The y-offset to the parent figure.</p>"
          }
        },
        {
          "name": "getAbsoluteX",
          "access": "",
          "virtual": false,
          "description": "<p>The x-offset related to the canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the x-offset to the canvas</p>"
          }
        },
        {
          "name": "getAbsoluteY",
          "access": "",
          "virtual": false,
          "description": "<p>The y-offset related to the canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>The y-offset to the canvas.</p>"
          }
        },
        {
          "name": "getAbsolutePosition",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the absolute y-position of the port.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getAbsoluteBounds",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the absolute y-position of the port.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "setPosition",
          "access": "",
          "virtual": false,
          "description": "<p>Set the position of the object.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   x: x,\n   y: y\n });</code></pre>",
          "parameters": [
            {
              "name": "x",
              "type": [
                "Number",
                "draw2d.geo.Point"
              ],
              "description": "<p>The new x coordinate of the figure or the x/y coordinate if it is an draw2d.geo.Point</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The new y coordinate of the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPosition",
          "access": "",
          "virtual": false,
          "description": "<p>Get the current position of the figure</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "translate",
          "access": "",
          "virtual": false,
          "description": "<p>Translate the figure with the given x/y offset.</p>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>The x offset to translate</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>The y offset to translate</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setBoundingBox",
          "access": "",
          "virtual": false,
          "description": "<p>Set the bounding box of the figure</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   width: w,\n   height: h,\n   x: x,\n   y: y\n });\n\n // or\n figure.attr({\n   boundingBox: {x:1, y:100, width:30, height:30}\n });</code></pre>",
          "parameters": [
            {
              "name": "rect",
              "type": "draw2d.geo.Rectangle",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getBoundingBox",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the bounding box of the figure in absolute position to the canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "hitTest",
          "access": "",
          "virtual": false,
          "description": "<p>Detect whenever the hands over coordinate is inside the figure.\nThe default implementation is a simple bounding box test.</p>",
          "parameters": [
            {
              "name": "iX",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "iY",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "corona",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setDraggable",
          "access": "",
          "virtual": false,
          "description": "<p>Switch on/off the drag drop behaviour of this object</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The new drag drop indicator</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "isDraggable",
          "access": "",
          "virtual": false,
          "description": "<p>Get the Drag drop enable flag</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": "<p>The new drag drop indicator</p>"
          }
        },
        {
          "name": "isResizeable",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the true if the figure can be resized.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setResizeable",
          "access": "",
          "virtual": false,
          "description": "<p>You can change the resizeable behaviour of this object. Hands over [false] and\nthe figure has no resizehandles if you select them with the mouse.<br></p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   resizeable: flag\n });</code></pre>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The resizeable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "isSelectable",
          "access": "",
          "virtual": false,
          "description": "<p>Indicates whenever the element is selectable by user interaction or API.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setSelectable",
          "access": "",
          "virtual": false,
          "description": "<p>You can change the selectable behavior of this object. Hands over [false] and\nthe figure has no selection handles if you try to select them with the mouse.<br></p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The selectable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "isStrechable",
          "access": "",
          "virtual": false,
          "description": "<p>Return true if the object doesn't care about the aspect ratio.\nYou can change the height and width independent.<br></p>\n<p>Replaced with &quot;getKeepAspectRatio&quot;</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "isDeleteable",
          "access": "",
          "virtual": false,
          "description": "<p>Return false if you avoid that the user can delete your figure.\nSub class can override this method.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setDeleteable",
          "access": "",
          "virtual": false,
          "description": "<p>Set the flag if the shape is deleteable.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>enable or disable flag for the delete operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setParent",
          "access": "private",
          "virtual": false,
          "description": "<p>Set the parent of this figure.\nDon't call them manually.</p>",
          "parameters": [
            {
              "name": "parent",
              "type": "draw2d.Figure",
              "description": "<p>The new parent of this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getParent",
          "access": "",
          "virtual": false,
          "description": "<p>Get the parent of this figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": ""
          }
        },
        {
          "name": "contains",
          "access": "",
          "virtual": false,
          "description": "<p>Check to see if a figure is a descendant of another figure.\n<br>\nThe contains() method returns true if the figure provided by the argument is a descendant of this figure,\nwhether it is a direct child or nested more deeply. Otherwise, it returns false.</p>",
          "parameters": [
            {
              "name": "containedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure that may be contained by (a descendant of) this figure.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getRoot",
          "access": "",
          "virtual": false,
          "description": "<p>Get the top most parent of this figure. This can be an layout figure or parent container</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": ""
          }
        },
        {
          "name": "setComposite",
          "access": "",
          "virtual": false,
          "description": "<p>Set the assigned composite of this figure.</p>",
          "parameters": [
            {
              "name": "composite",
              "type": "draw2d.shape.composite.StrongComposite",
              "description": "<p>The assigned composite of this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getComposite",
          "access": "",
          "virtual": false,
          "description": "<p>Get the assigned composite of this figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.shape.composite.StrongComposite",
            "description": ""
          }
        },
        {
          "name": "fireEvent",
          "access": "",
          "virtual": false,
          "description": "<p>Execute all handlers and behaviors attached to the figure for the given event type.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "String",
              "description": "<p>the event to trigger</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "args",
              "type": "Object",
              "description": "<p>optional parameters for the triggered event callback</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "on",
          "access": "",
          "virtual": false,
          "description": "<p>Attach an event handler function for one or more events to the figure.\nTo remove events bound with .on(), see {@link #off}.</p>\n<p>possible events are:<br></p>\n<ul>\n  <li>click</li>\n  <li>dblclick</li>\n  <li>move</li>\n  <li>resize</li>\n  <li>timer</li>\n  <li>contextmenu</li>\n  <li>show</li>\n  <li>hide</li>\n  <li>added</li>\n  <li>removed</li>\n  <li>change:[attr]</li>\n</ul>",
          "parameters": [
            {
              "name": "event",
              "type": "String",
              "description": "<p>One or more space-separated event types</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback",
              "type": "function",
              "description": "<p>A function to execute when the event is triggered.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback.emitter",
              "type": "draw2d.Figure",
              "description": "<p>the emitter of the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback.obj",
              "type": "Object",
              "description": "<p>optional event related data</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "context",
              "type": "Object",
              "description": "<p>optional context of the function callback.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "off",
          "access": "",
          "virtual": false,
          "description": "<p>The .off() method removes event handlers that were attached with {@link #on}.<br>\nCalling .off() with no arguments removes all handlers attached to the elements.<br>\n<br>\nIf a simple event name such as &quot;move&quot; is provided, all events of that type are removed from the figure.</p>",
          "parameters": [
            {
              "name": "eventOrFunction",
              "type": [
                "String",
                "function"
              ],
              "description": "<p>the event name of the registerd function or the function itself</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getBestChild",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the best figure at the location [x,y]. It is a simple hit test. Keep in mind that only visible objects\nare returned.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>The x position.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The y position.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "figureToIgnore",
              "type": [
                "draw2d.Figure",
                "Array"
              ],
              "description": "<p>The figures which should be ignored.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        }
      ]
    },
    {
      "name": "VertexResizeHandle",
      "namespace": "draw2d.shape.basic",
      "description": "<p>draw2d.shape.basic.VertexResizeHandle</p>\n<p>Selection handle for polyline vertices.</p>",
      "extends": [
        "draw2d.ResizeHandle"
      ],
      "access": "",
      "virtual": false,
      "fires": "",
      "constructor": {
        "name": "VertexResizeHandle",
        "description": "",
        "parameters": [],
        "examples": []
      },
      "functions": [
        {
          "name": "onDoubleClick",
          "access": "",
          "virtual": false,
          "description": "<p>Called when a user double clicks on the element</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onDragStart",
          "access": "private",
          "virtual": false,
          "description": "<p>Called if a drag&amp;drop operation starts.<br></p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onDrag",
          "access": "",
          "virtual": false,
          "description": "<p>Called from the framework during a drag&amp;drop operation</p>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>the x difference between the start of the drag drop operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>the y difference between the start of the drag drop operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dx2",
              "type": "Number",
              "description": "<p>The x diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy2",
              "type": "Number",
              "description": "<p>The y diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onDragEnd",
          "access": "",
          "virtual": false,
          "description": "<p>Called after a drag and drop action.<br>\nSub classes can override this method to implement additional stuff. Don't forget to call the super implementation via <code>this._super();</code></p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "relocate",
          "access": "",
          "virtual": false,
          "description": "<p>Controls the location of the resize handle</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getEnclosingAngle",
          "access": "",
          "virtual": false,
          "description": "<p>Calculates the angle between the siblings</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "init",
          "access": "",
          "virtual": false,
          "description": "<p>Creates a new figure element which are not assigned to any canvas.</p>",
          "parameters": [
            {
              "name": "the",
              "type": "draw2d.Figure",
              "description": "<p>owner if the resize handle</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "type",
              "type": "Number",
              "description": "<p>the type of the ResizeHandle.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getSnapToDirection",
          "access": "",
          "virtual": false,
          "description": "<p>The edge of the rectangle for the snapTo mechanism.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "createShapeElement",
          "access": "",
          "virtual": false,
          "description": "<p>Inherited classes must override this method to implement it's own draw functionality.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getOwner",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the current used SVG as string</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "getType",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the current used SVG as string</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "updateCursor",
          "access": "private",
          "virtual": false,
          "description": "<p>calculate and set the cursor of the reize handle</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setDraggable",
          "access": "",
          "virtual": false,
          "description": "<p>Adjust the draggable flag of the resize handle and update the cursor of the shape in relation\nto the type of resize handle. north, south,west,..</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setPosition",
          "access": "",
          "virtual": false,
          "description": "<p>Set the position of the object.<br>\nThe ResizeHandle overrides the Figure.setPosition method. The base\nclass updates the resize handles during the update of the Dimension/Position. This\nis not neccessary for the ResizeHandles. Performance issue.</p>",
          "parameters": [
            {
              "name": "x",
              "type": [
                "Number",
                "draw2d.geo.Point"
              ],
              "description": "<p>The new x coordinate of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The new y coordinate of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setDimension",
          "access": "",
          "virtual": false,
          "description": "<p>Set the new dimension of the the ResizeHandle. If you didn't pass any width/height the best default for the\nplatform will be used.</p>\n<p>Additional the &quot;snapTo&quot; anchor is re-calculated in relation to the type of ResizeHandle</p>",
          "parameters": [
            {
              "name": "width",
              "type": "Number",
              "description": "<p>new width of the resize handle</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "height",
              "type": "Number",
              "description": "<p>new width of the resize handle</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "show",
          "access": "",
          "virtual": false,
          "description": "<p>Show the ResizeHandle and add it to the canvas.<br>\nAdditional bring it in to the front of other figures if we didn't use\nan overlayCanvas.</p>\n<p>If the ResizeHandle is place inside an overlayCanvas it is automatically on top.</p>",
          "parameters": [
            {
              "name": "canvas",
              "type": "draw2d.Canvas",
              "description": "<p>the canvas to use</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "hide",
          "access": "",
          "virtual": false,
          "description": "<p>Hide the resize handle and remove it from the canvas.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setBackgroundColor",
          "access": "",
          "virtual": false,
          "description": "<p>Set the new background color of the figure. It is possible to hands over\n<code>null</code> to set the background transparent.</p>",
          "parameters": [
            {
              "name": "color",
              "type": "draw2d.util.Color",
              "description": "<p>The new background color of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "repaint",
          "access": "private",
          "virtual": false,
          "description": "<p>propagate all attributes like color, stroke,... to the shape element</p>",
          "parameters": [
            {
              "name": "attributes",
              "type": "Object",
              "description": "<p>the style attributes for the SVG shape</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "supportsSnapToHelper",
          "access": "",
          "virtual": false,
          "description": "<p>return true if the element can be used in combination with the\nSnapToHelper feature.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "onKeyDown",
          "access": "",
          "virtual": false,
          "description": "<p>Override this method and redirect them to the cavas. A ResizeHandle didn't support\nKeyboard interaction at the moment.</p>",
          "parameters": [
            {
              "name": "keyCode",
              "type": "Number",
              "description": "<p>the id of the pressed key</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrl",
              "type": "Boolean",
              "description": "<p>true if the user has pressed the CTRL/STRG key as well.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "fireEvent",
          "access": "",
          "virtual": false,
          "description": "<p>Execute all handlers and behaviors attached to the figure for the given event type.</p>",
          "parameters": [
            {
              "name": "event",
              "type": "String",
              "description": "<p>the event to trigger</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "args",
              "type": "Object",
              "description": "<p>optional parameters for the triggered event callback</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "applyTransformation",
          "access": "private",
          "virtual": false,
          "description": "<p>apply a transformation to the shape like rotation, translate,..</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setDashArray",
          "access": "",
          "virtual": false,
          "description": "<p>Set the line style for dot/dash styling. Possible values are\n[&quot;&quot;, &quot;-&quot;, &quot;.&quot;, &quot;-.&quot;, &quot;-..&quot;, &quot;. &quot;, &quot;- &quot;, &quot;--&quot;, &quot;- .&quot;, &quot;--.&quot;, &quot;--..&quot;]</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   dash: pattern\n });</code></pre>",
          "parameters": [
            {
              "name": "pattern",
              "type": "String",
              "description": "<p>the string with the dot/dash pattern. valid values: [&quot;&quot;, &quot;-&quot;, &quot;.&quot;, &quot;-.&quot;, &quot;-..&quot;, &quot;. &quot;, &quot;- &quot;, &quot;--&quot;, &quot;- .&quot;, &quot;--.&quot;, &quot;--..&quot;]</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getDashArray",
          "access": "",
          "virtual": false,
          "description": "<p>Get the line style for this object.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr(&quot;dash&quot;);</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getPersistentAttributes",
          "access": "",
          "virtual": false,
          "description": "<p>Return an objects with all important attributes for XML or JSON serialization</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Object",
            "description": ""
          }
        },
        {
          "name": "setPersistentAttributes",
          "access": "",
          "virtual": false,
          "description": "<p>Read all attributes from the serialized properties and transfer them into the shape.</p>",
          "parameters": [
            {
              "name": "memento",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setRadius",
          "access": "",
          "virtual": false,
          "description": "<p>Sets the corner radius or the edges.</p>",
          "parameters": [
            {
              "name": "radius",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getRadius",
          "access": "",
          "virtual": false,
          "description": "<p>Get the corner radius of the edges.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setGlow",
          "access": "",
          "virtual": false,
          "description": "<p>Highlight the element or remove the highlighting</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>indicates glow/noGlow</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getBackgroundColor",
          "access": "",
          "virtual": false,
          "description": "<p>The current used background color.</p>\n<pre><code> // Alternatively you can use the attr method:\n var color =figure.attr(&quot;bgColor&quot;);</code></pre>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.Color",
            "description": ""
          }
        },
        {
          "name": "setStroke",
          "access": "",
          "virtual": false,
          "description": "<p>Set the stroke to use.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;stroke&quot;: 2\n });</code></pre>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "<p>The new line width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getStroke",
          "access": "",
          "virtual": false,
          "description": "<p>The used line width.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setColor",
          "access": "",
          "virtual": false,
          "description": "<p>Set the foreground color of the figure.\nThis method fires a <i>document dirty</i> event.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;color&quot;: &quot;#f3f3f3&quot;\n });</code></pre>",
          "parameters": [
            {
              "name": "color",
              "type": [
                "String",
                "draw2d.util.Color"
              ],
              "description": "<p>The new color of the line.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getColor",
          "access": "",
          "virtual": false,
          "description": "<p>Get the current used foreground color</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.Color",
            "description": ""
          }
        },
        {
          "name": "setPersistPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Indicates if the node should read/write the ports via the draw2d.Figure.getPersistenAttributes\nto the JSON object</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPersistPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Indicates if the figure writes the ports to the JSON structore too.\nDefault is &quot;false&quot;</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "toFront",
          "access": "",
          "virtual": false,
          "description": "<p>Moves the element so it is the closest to the viewerâ€™s eyes, on top of other elements. Additional\nthe internal model changed as well.</p>\n<p>Optional: Inserts current object in front of the given one.</p>",
          "parameters": [
            {
              "name": "figure",
              "type": "draw2d.Figure",
              "description": "<p>move current object in front of the given one.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "toBack",
          "access": "",
          "virtual": false,
          "description": "<p>Moves the element to the background. Additional\nthe internal model changed as well.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setVisible",
          "access": "",
          "virtual": false,
          "description": "<p>Show/hide the element. The element didn't receive any mouse events (click, dblclick) if you hide the\nfigure.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   visible: flag\n });</code></pre>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "duration",
              "type": "Number",
              "description": "<p>the optional number for the fadeIn /fadeOut of the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Return all ports of the node. The results contains\nall ports of the children too per default. Set <b>recursive</b>\nto false to retrieve direct assigned ports only.</p>",
          "parameters": [
            {
              "name": "recursive",
              "type": "Boolean",
              "description": "<p>indicates if the method should return children ports too. Default is <b>true</b></p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "getInputPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Return all input ports of the node.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "getOutputPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Return all output ports of the node.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "clone",
          "access": "",
          "virtual": false,
          "description": "<p>Clone the figure. <br>\nYou must override and implement the methods <b>getPersistentAttributes</b> and <b>setPersistentAttributes</b> for your custom\nfigures if the have special attributes.</p>\n<p>The clone() method performs a deep copy of the object, meaning that it copies the children, ports and decorations\nper default. You can control the clone procedure with the 'cloneMetaData'.</p>",
          "parameters": [
            {
              "name": "cloneMetaData",
              "type": "Object",
              "description": "<p>controls the clone procedure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "cloneMetaData.excludeChildren",
              "type": "Boolean",
              "description": "<p>set it to true if you want exclude the children.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "cloneMetaData.excludePorts",
              "type": "Boolean",
              "description": "<p>set it to true if you want exclude the ports of the node.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getPort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portName",
              "type": "String",
              "description": "<p>The name of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.Port",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getInputPort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the input port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.InputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getOutputPort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the output port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or the numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.OutputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "getHybridPort",
          "access": "",
          "virtual": false,
          "description": "<p>Return the input port with the corresponding name.</p>",
          "parameters": [
            {
              "name": "portNameOrIndex",
              "type": "String/Number",
              "description": "<p>The name or numeric index of the port to return.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.InputPort",
            "description": "<p>Returns the port with the hands over name or null.</p>"
          }
        },
        {
          "name": "addPort",
          "access": "",
          "virtual": false,
          "description": "<p>Add a port to this node at the given position.<br></p>",
          "parameters": [
            {
              "name": "port",
              "type": "draw2d.Port",
              "description": "<p>The new port to add.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>The layout for the port.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "resetPorts",
          "access": "",
          "virtual": false,
          "description": "<p>Remove all ports of this node</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "removePort",
          "access": "",
          "virtual": false,
          "description": "<p>Removes a port and all related connections from this node.<br></p>",
          "parameters": [
            {
              "name": "port",
              "type": "draw2d.Port",
              "description": "<p>The port to remove.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "createPort",
          "access": "",
          "virtual": false,
          "description": "<p>Create a standard Port for this element. Inherited class can override this\nmethod to create its own type of ports.</p>",
          "parameters": [
            {
              "name": "type",
              "type": "String",
              "description": "<p>the type of the requested port. possible [&quot;input&quot;, &quot;output&quot;]</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>the layouter to use for this port</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getConnections",
          "access": "",
          "virtual": false,
          "description": "<p>Return all connections related to this node.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "setCanvas",
          "access": "",
          "virtual": false,
          "description": "<p>Set the canvas element of this figures. This can be used to determine whenever an element\nis added or removed to the canvas.</p>",
          "parameters": [
            {
              "name": "canvas",
              "type": "draw2d.Canvas",
              "description": "<p>the new parent of the figure or null</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setRotationAngle",
          "access": "",
          "virtual": false,
          "description": "<p>Set the rotation angle in degree [0..356]<br>\n<b>Only steps of 90 degree is working well</b>\n<br>\n// Alternatively you can use the attr method:\nfigure.attr({\nangle: angle\n});</p>",
          "parameters": [
            {
              "name": "angle",
              "type": "Number",
              "description": "<p>the rotation angle in degree</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onPortValueChanged",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the value of any port has been changed</p>",
          "parameters": [
            {
              "name": "relatedPort",
              "type": "draw2d.Port",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "layoutPorts",
          "access": "private",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "createCommand",
          "access": "private",
          "virtual": false,
          "description": "<p>Returns the Command to perform the specified Request or null.</p>",
          "parameters": [
            {
              "name": "request",
              "type": "draw2d.command.CommandType",
              "description": "<p>describes the Command being requested</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.command.Command",
            "description": "<p>null or a Command</p>"
          }
        },
        {
          "name": "attr",
          "access": "",
          "virtual": false,
          "description": "<p>Read or set shape attributes.<br>\nWhen no value is given, reads specified attribute from the element.<br>\nWhen value is given, sets the attribute to that value.\nMultiple attributes can be set by passing an object with name-value pairs.</p>\n<pre><code>let figure = new draw2d.shape.basic.Rectangle();\nfigure.attr('x');      //=&gt; read value\nfigure.attr('x', 30);  //=&gt; set value\n\n// multiple attributes:\nfigure.attr({\n  x: 30,\n  y: 40,\n  width : 200,\n  height: 50,\n  cssClass: &quot;red_border_figure&quot;\n});\n\n// it is possible to override any method of the figure as well\n// Instead of inheritance you can just override the callback methods\n// like\n//\nfigure.attr({\n   onClick : function(){\n       alert(&quot;click&quot;);\n   }\n});\n\n// or you can pass the attr values in the constructor\n//\nlet clickFigure = new draw2d.shape.basic.Rectangle({\n   onClick : function(){\n       alert(&quot;click&quot;);\n   }\n});\n</code></pre>\n<p>Additional you can set the user defined values (userData) with this method\nusing the dot-notation. User defined values are always part of the exported\nJSON data.</p>\n<pre><code>// setting multiple attributes:\nfigure.attr({\n  &quot;userData.my.property.x&quot;: 30,\n  &quot;userData.my.property.y&quot;: 40\n});\n</code></pre>\n<p>Also set using array notation is possible for the userData:</p>\n<pre><code>// dot notation and array brackets:\nfigure.attr({\n  &quot;userData.my.names[0]&quot;: &quot;John&quot;,\n  &quot;userData.my.names[1]&quot;: &quot;Doe&quot;\n});\n</code></pre>\n<p>The Object returned should be the equivalent structured object:</p>\n<pre><code>let obj = figure.getUserData();\n</code></pre>\n<p>That is, where obj is equivalent to:</p>\n<pre><code>let obj = {\n    my:{\n        property:{\n            x: 30,\n            y: 40\n       },\n       names:  [&quot;John&quot;, &quot;Doe&quot;]\n   }\n</code></pre>\n<p>};</p>",
          "parameters": [
            {
              "name": "name",
              "type": "String/Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "value",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "pick",
          "access": "",
          "virtual": false,
          "description": "<p>Return a copy of the object, filtered to only have values for the whitelisted keys.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "select",
          "access": "private",
          "virtual": false,
          "description": "<p>Add the figure to the current selection and propagate this to all edit policies.</p>",
          "parameters": [
            {
              "name": "asPrimarySelection",
              "type": "Boolean",
              "description": "<p>true if the element should be the primary selection</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "unselect",
          "access": "private",
          "virtual": false,
          "description": "<p>Unselect the figure and propagete this event to all edit policies.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setSelectionAdapter",
          "access": "",
          "virtual": false,
          "description": "<p>Returns a function which returns the the figure which must handle the selection handling.</p>",
          "parameters": [
            {
              "name": "adapter",
              "type": "function",
              "description": "<p>function which returns the figure which handles the selection handling</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getSelectionAdapter",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "function",
            "description": ""
          }
        },
        {
          "name": "isSelected",
          "access": "",
          "virtual": false,
          "description": "<p>Returns true if the figure part of the current canvas selection.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setUserData",
          "access": "",
          "virtual": false,
          "description": "<p>Allows a user to attach (or remove) data to an element, without needing to create a custom figure or shape.\nThe data must be a valid JSON object.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   userData: object\n });</code></pre>",
          "parameters": [
            {
              "name": "object",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getUserData",
          "access": "",
          "virtual": false,
          "description": "<p>Returns any user data set previously on the given figure by setUserData.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Object",
            "description": ""
          }
        },
        {
          "name": "getId",
          "access": "",
          "virtual": false,
          "description": "<p>Return the UUID of this element.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "setId",
          "access": "",
          "virtual": false,
          "description": "<p>Set the id of this element.</p>\n<pre><code>// Alternatively you can use the attr method:\nfigure.attr({\n  id: newId\n});</code></pre>",
          "parameters": [
            {
              "name": "newId",
              "type": "String",
              "description": "<p>the new id for this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Return the css styling class name of the element.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "String",
            "description": ""
          }
        },
        {
          "name": "setCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Set the css class of the node.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;cssClass&quot;: &quot;red_border_figure&quot;\n });</code></pre>",
          "parameters": [
            {
              "name": "cssClass",
              "type": "String",
              "description": "<p>the new css class name of the node</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "hasCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>The method will return true if the class is assigned to the element, even if other classes also are.</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the class name to check</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "addCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Add a CSS class to the figure.<br>\nIt's important to note that this method does not replace a class. It simply adds the class,\nappending it to any which may already be assigned to the elements.</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "removeCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Remove the given css class name from the figure</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the css class name to add</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "toggleCssClass",
          "access": "",
          "virtual": false,
          "description": "<p>Add or remove the given css class name from the figure</p>",
          "parameters": [
            {
              "name": "className",
              "type": "String",
              "description": "<p>the class name to toggle</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getCanvas",
          "access": "",
          "virtual": false,
          "description": "<p>Return the current assigned canvas container.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.Canvas",
            "description": ""
          }
        },
        {
          "name": "startTimer",
          "access": "",
          "virtual": false,
          "description": "<p>Start a timer which calls the onTimer method in the given interval.</p>",
          "parameters": [
            {
              "name": "milliSeconds",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "stopTimer",
          "access": "",
          "virtual": false,
          "description": "<p>Stop the internal timer.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onTimer",
          "access": "",
          "virtual": false,
          "description": "<p>Callback method for the internal timer handling<br>\nInherit classes must override this method if they want use the timer feature.</p>\n<pre><code> // Alternatively you can register for this event with\n figure.on(&quot;timer&quot;, function(emitter){\n     alert(&quot;timer fired&quot;);\n });</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "installEditPolicy",
          "access": "",
          "virtual": false,
          "description": "<p>Install a new edit policy to the figure. Each editpolicy is able to focus on a single editing\ntask or group of related tasks. This also allows editing behavior to be selectively reused across\ndifferent figure implementations. Also, behavior can change dynamically, such as when the layouts\nor routing methods change.</p>\n<p>Example for limited DragDrop behavior can be a draw2d.layout.constraint.RegionConstriantPolicy.</p>",
          "parameters": [
            {
              "name": "policy",
              "type": "draw2d.policy.EditPolicy",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "uninstallEditPolicy",
          "access": "",
          "virtual": false,
          "description": "<p>UnInstall the edit policy from the figure. Either the instance itself if found\nor all kind of the given edit policies.</p>",
          "parameters": [
            {
              "name": "policy",
              "type": "draw2d.policy.EditPolicy",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "add",
          "access": "",
          "virtual": false,
          "description": "<p>Add a child figure to the figure. The hands over figure doesn't support drag&amp;drop\noperations. It's only a decorator for the connection.<br>\nMainly for labels or other decorations</p>\n<pre><code>let start = new draw2d.shape.node.Start({x:80, y:150});\nstart.add(new draw2d.shape.basic.Label({text:&quot;Test Label&quot;}), new draw2d.layout.locator.TopLocator());\n\ncanvas.add( start);</code></pre>",
          "parameters": [
            {
              "name": "child",
              "type": "draw2d.Figure",
              "description": "<p>the figure to add as decoration to the connection.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "locator",
              "type": "draw2d.layout.locator.Locator",
              "description": "<p>the locator for the child.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "index",
              "type": "Number",
              "description": "<p>optional index where to insert the figure</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "remove",
          "access": "",
          "virtual": false,
          "description": "<p>Remove the child figure from this figure and the canvas</p>",
          "parameters": [
            {
              "name": "child",
              "type": "draw2d.Figure",
              "description": "<p>the figure to remove.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Object",
            "description": "<p>the removed tupple of figure/locator or null if the child isn't found</p>"
          }
        },
        {
          "name": "getChildren",
          "access": "",
          "virtual": false,
          "description": "<p>Return all children/decorations of this shape which has been added with\ndraw2d.Figure.add</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": ""
          }
        },
        {
          "name": "resetChildren",
          "access": "",
          "virtual": false,
          "description": "<p>Remove all children/decorations of this shape</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getShapeElement",
          "access": "protected",
          "virtual": false,
          "description": "<p>return the current SVG shape element or create it on demand.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getTopLevelShapeElement",
          "access": "private",
          "virtual": false,
          "description": "<p>Get the top level shape element. May the figure has a set of SVG elements. In this case this\nmethod must return the top level node.<br>\nThis method is used for the toFront/toBack method to order the nodes in the correct way.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getHandleBBox",
          "access": "",
          "virtual": false,
          "description": "<p>Allow dragging only when the cursor is over a specific part of the figure.\n<br>\nOverride this method to specify the bounding box of an element or a draw2d.util.ArrayList\nof draw2d.geo.Rectangle of bounding boxes used to drag the figure. The returned coordinates\nare absolute coordinates to the canvas.\n<br>\n<br>\nDefault implementation returns <b>null</b> to indicate to use the complete figures as\ndrag handle.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": [
              "draw2d.geo.Rectangle",
              "draw2d.util.ArrayList"
            ],
            "description": ""
          }
        },
        {
          "name": "onPanning",
          "access": "",
          "virtual": false,
          "description": "<p>Called by the framework if the figure returns false for the drag operation. In this\ncase we send a &quot;panning&quot; event - mouseDown + mouseMove. This is very useful for\nUI-Widget like slider, spinner,...</p>\n<pre><code> // You can alternatively register an event handler with:\n figure.on(&quot;panning&quot;, function(emitter, eventData){\n     alert(&quot;panning of the figure called&quot;);\n });</code></pre>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>the x difference between the mouse down operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>the y difference between the mouse down operation and now</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dx2",
              "type": "Number",
              "description": "<p>The x diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy2",
              "type": "Number",
              "description": "<p>The y diff since the last call of this dragging operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onPanningEnd",
          "access": "",
          "virtual": false,
          "description": "<p>Called by the framework if the panning event of the figures ends. This happens\nafter the mous up event if the panning is active.</p>\n<pre><code> // You can alternatively register an event handler with:\n figure.on(&quot;panningEnd&quot;, function(emitter){\n     alert(&quot;panning of the figure called&quot;);\n });</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "delegateTarget",
          "access": "private",
          "virtual": false,
          "description": "<p>Called by the framework during drag&amp;drop operations if the user drag a figure over this figure</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": "<p>the figure which should receive the drop event or null if the element didn't want a drop event</p>"
          }
        },
        {
          "name": "onDragEnter",
          "access": "",
          "virtual": false,
          "description": "<p>Called by the framework during drag&amp;drop operations if the user drag a figure over this figure</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onDragLeave",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the DragDrop object leaving the current hover figure.</p>",
          "parameters": [
            {
              "name": "draggedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure which is currently dragging</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onDrop",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the user drop this element onto the dropTarget. This event is ONLY fired if the\nshape return &quot;this&quot; in the {@link draw2d.Figure#onDragEnter} method.</p>",
          "parameters": [
            {
              "name": "dropTarget",
              "type": "draw2d.Figure",
              "description": "<p>The drop target.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onCatch",
          "access": "",
          "virtual": false,
          "description": "<p>Called if the user dropped an figure onto this element. This event is ONLY fired if the\nin the canvas installed {@link draw2d.policy.canvas.DropInterceptorPolicy} allow this.</p>",
          "parameters": [
            {
              "name": "droppedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The dropped figure.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate of the mouse up event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "shiftKey",
              "type": "Boolean",
              "description": "<p>true if the shift key has been pressed during this event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "ctrlKey",
              "type": "Boolean",
              "description": "<p>true if the ctrl key has been pressed during the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "onMouseEnter",
          "access": "",
          "virtual": false,
          "description": "<p>Callback method for the mouse enter event. Usefull for mouse hover-effects.\nOverride this method for your own effects. Don't call them manually.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onMouseLeave",
          "access": "",
          "virtual": false,
          "description": "<p>Callback method for the mouse leave event. Useful for mouse hover-effects.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onClick",
          "access": "",
          "virtual": false,
          "description": "<p>Called when a user clicks on the element.</p>\n<pre><code> // You can alternatively register an event handler with:\n figure.on(&quot;click&quot;, function(emitter, event){\n     alert(&quot;user click on the figure&quot;);\n });</code></pre>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "onContextMenu",
          "access": "",
          "virtual": false,
          "description": "<p>called by the framework if the figure should show the context menu.<br>\nThe strategy to show the context menu depends on the platform. Either looong press or\nright click with the mouse.</p>\n<pre><code> // Alternatively you register for this event with:\n figure.on(&quot;contextmenu&quot;, function(emitter, event){\n     alert(&quot;user press the right mouse button for a context menu&quot;);\n });</code></pre>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the x-coordinate to show the menu</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the y-coordinate to show the menu</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setAlpha",
          "access": "",
          "virtual": false,
          "description": "<p>Set the alpha blending of this figure.</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   &quot;alpha&quot;: percent\n });\n\n // ...or:\n figure.attr({\n   &quot;opacity&quot;: percent\n });</code></pre>",
          "parameters": [
            {
              "name": "percent",
              "type": "Number",
              "description": "<p>value between [0..1].</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getAlpha",
          "access": "",
          "virtual": false,
          "description": "<p>Return the alpha blending of the figure</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the current alpha blending</p>"
          }
        },
        {
          "name": "getRotationAngle",
          "access": "",
          "virtual": false,
          "description": "<p>return the rotation angle of the figure in degree of [0..356].</p>\n<br>\n<b>NOTE: this method is pre alpha and not for production. Only steps of 90 degree is working well</b>\n<br>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "isVisible",
          "access": "",
          "virtual": false,
          "description": "<p>Return true if the figure visible.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setKeepAspectRatio",
          "access": "",
          "virtual": false,
          "description": "<p>Guarantee, that the figure width/height will not be distorted. Applicable before calling setDimension().\nIt is false by default.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>boolean flag if the figure should respect the aspect ratio</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getKeepAspectRatio",
          "access": "",
          "virtual": false,
          "description": "<p>Return the flag if the shape keep the aspect ratio.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getZOrder",
          "access": "",
          "virtual": false,
          "description": "<p>Return the current z-index of the element. Currently this is an expensive method. The index will be calculated\nall the time. Caching is not implemented at the moment.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "setCanSnapToHelper",
          "access": "",
          "virtual": false,
          "description": "<p>Set the flag if this object can snap to grid or geometry.\nA window of dialog should set this flag to false.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The snap to grid/geometry enable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getCanSnapToHelper",
          "access": "",
          "virtual": false,
          "description": "<p>Returns true if the figure can snap to any helper like a grid, guide, geometrie\nor something else.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "getSnapToGridAnchor",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "setSnapToGridAnchor",
          "access": "",
          "virtual": false,
          "description": "<p>Set the hot spot for all snapTo### operations.</p>",
          "parameters": [
            {
              "name": "point",
              "type": "draw2d.geo.Point",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setWidth",
          "access": "",
          "virtual": false,
          "description": "<p>Set the width of the figure and consider the minWidth attribute</p>",
          "parameters": [
            {
              "name": "width",
              "type": "Number",
              "description": "<p>the new width of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getWidth",
          "access": "",
          "virtual": false,
          "description": "<p>The current width of the figure.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "setHeight",
          "access": "",
          "virtual": false,
          "description": "<p>Set the heigth of the figure and consider the minWidth attribute</p>",
          "parameters": [
            {
              "name": "height",
              "type": "Number",
              "description": "<p>the new height of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getHeight",
          "access": "",
          "virtual": false,
          "description": "<p>The current height of the figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "getMinWidth",
          "access": "",
          "virtual": false,
          "description": "<p>This value is relevant for the interactive resize of the figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>Returns the min. width of this object.</p>"
          }
        },
        {
          "name": "setMinWidth",
          "access": "",
          "virtual": false,
          "description": "<p>Set the minimum width of this figure</p>",
          "parameters": [
            {
              "name": "w",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getMinHeight",
          "access": "",
          "virtual": false,
          "description": "<p>This value is relevant for the interactive resize of the figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>Returns the min. height of this object.</p>"
          }
        },
        {
          "name": "setMinHeight",
          "access": "",
          "virtual": false,
          "description": "<p>Set the minimum height of the figure.</p>",
          "parameters": [
            {
              "name": "h",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setX",
          "access": "",
          "virtual": false,
          "description": "<p>the the x-offset related to the parent figure or canvas</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>the new x offset of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getX",
          "access": "",
          "virtual": false,
          "description": "<p>The x-offset related to the parent figure or canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the x-offset to the parent figure</p>"
          }
        },
        {
          "name": "setY",
          "access": "",
          "virtual": false,
          "description": "<p>the the y-offset related to the parent figure or canvas</p>",
          "parameters": [
            {
              "name": "y",
              "type": "Number",
              "description": "<p>the new x offset of the figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getY",
          "access": "",
          "virtual": false,
          "description": "<p>The y-offset related to the parent figure or canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>The y-offset to the parent figure.</p>"
          }
        },
        {
          "name": "getAbsoluteX",
          "access": "",
          "virtual": false,
          "description": "<p>The x-offset related to the canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the x-offset to the canvas</p>"
          }
        },
        {
          "name": "getAbsoluteY",
          "access": "",
          "virtual": false,
          "description": "<p>The y-offset related to the canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>The y-offset to the canvas.</p>"
          }
        },
        {
          "name": "getAbsolutePosition",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the absolute y-position of the port.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getAbsoluteBounds",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the absolute y-position of the port.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "getPosition",
          "access": "",
          "virtual": false,
          "description": "<p>Get the current position of the figure</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Point",
            "description": ""
          }
        },
        {
          "name": "translate",
          "access": "",
          "virtual": false,
          "description": "<p>Translate the figure with the given x/y offset.</p>",
          "parameters": [
            {
              "name": "dx",
              "type": "Number",
              "description": "<p>The x offset to translate</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "dy",
              "type": "Number",
              "description": "<p>The y offset to translate</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setBoundingBox",
          "access": "",
          "virtual": false,
          "description": "<p>Set the bounding box of the figure</p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   width: w,\n   height: h,\n   x: x,\n   y: y\n });\n\n // or\n figure.attr({\n   boundingBox: {x:1, y:100, width:30, height:30}\n });</code></pre>",
          "parameters": [
            {
              "name": "rect",
              "type": "draw2d.geo.Rectangle",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getBoundingBox",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the bounding box of the figure in absolute position to the canvas.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.geo.Rectangle",
            "description": ""
          }
        },
        {
          "name": "hitTest",
          "access": "",
          "virtual": false,
          "description": "<p>Detect whenever the hands over coordinate is inside the figure.\nThe default implementation is a simple bounding box test.</p>",
          "parameters": [
            {
              "name": "iX",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "iY",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "corona",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "isDraggable",
          "access": "",
          "virtual": false,
          "description": "<p>Get the Drag drop enable flag</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": "<p>The new drag drop indicator</p>"
          }
        },
        {
          "name": "isResizeable",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the true if the figure can be resized.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setResizeable",
          "access": "",
          "virtual": false,
          "description": "<p>You can change the resizeable behaviour of this object. Hands over [false] and\nthe figure has no resizehandles if you select them with the mouse.<br></p>\n<pre><code> // Alternatively you can use the attr method:\n figure.attr({\n   resizeable: flag\n });</code></pre>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The resizeable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "isSelectable",
          "access": "",
          "virtual": false,
          "description": "<p>Indicates whenever the element is selectable by user interaction or API.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setSelectable",
          "access": "",
          "virtual": false,
          "description": "<p>You can change the selectable behavior of this object. Hands over [false] and\nthe figure has no selection handles if you try to select them with the mouse.<br></p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>The selectable flag.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "isStrechable",
          "access": "",
          "virtual": false,
          "description": "<p>Return true if the object doesn't care about the aspect ratio.\nYou can change the height and width independent.<br></p>\n<p>Replaced with &quot;getKeepAspectRatio&quot;</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "isDeleteable",
          "access": "",
          "virtual": false,
          "description": "<p>Return false if you avoid that the user can delete your figure.\nSub class can override this method.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "setDeleteable",
          "access": "",
          "virtual": false,
          "description": "<p>Set the flag if the shape is deleteable.</p>",
          "parameters": [
            {
              "name": "flag",
              "type": "Boolean",
              "description": "<p>enable or disable flag for the delete operation</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setParent",
          "access": "private",
          "virtual": false,
          "description": "<p>Set the parent of this figure.\nDon't call them manually.</p>",
          "parameters": [
            {
              "name": "parent",
              "type": "draw2d.Figure",
              "description": "<p>The new parent of this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getParent",
          "access": "",
          "virtual": false,
          "description": "<p>Get the parent of this figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": ""
          }
        },
        {
          "name": "contains",
          "access": "",
          "virtual": false,
          "description": "<p>Check to see if a figure is a descendant of another figure.\n<br>\nThe contains() method returns true if the figure provided by the argument is a descendant of this figure,\nwhether it is a direct child or nested more deeply. Otherwise, it returns false.</p>",
          "parameters": [
            {
              "name": "containedFigure",
              "type": "draw2d.Figure",
              "description": "<p>The figure that may be contained by (a descendant of) this figure.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getRoot",
          "access": "",
          "virtual": false,
          "description": "<p>Get the top most parent of this figure. This can be an layout figure or parent container</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.Figure",
            "description": ""
          }
        },
        {
          "name": "setComposite",
          "access": "",
          "virtual": false,
          "description": "<p>Set the assigned composite of this figure.</p>",
          "parameters": [
            {
              "name": "composite",
              "type": "draw2d.shape.composite.StrongComposite",
              "description": "<p>The assigned composite of this figure</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getComposite",
          "access": "",
          "virtual": false,
          "description": "<p>Get the assigned composite of this figure.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.shape.composite.StrongComposite",
            "description": ""
          }
        },
        {
          "name": "on",
          "access": "",
          "virtual": false,
          "description": "<p>Attach an event handler function for one or more events to the figure.\nTo remove events bound with .on(), see {@link #off}.</p>\n<p>possible events are:<br></p>\n<ul>\n  <li>click</li>\n  <li>dblclick</li>\n  <li>move</li>\n  <li>resize</li>\n  <li>timer</li>\n  <li>contextmenu</li>\n  <li>show</li>\n  <li>hide</li>\n  <li>added</li>\n  <li>removed</li>\n  <li>change:[attr]</li>\n</ul>",
          "parameters": [
            {
              "name": "event",
              "type": "String",
              "description": "<p>One or more space-separated event types</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback",
              "type": "function",
              "description": "<p>A function to execute when the event is triggered.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback.emitter",
              "type": "draw2d.Figure",
              "description": "<p>the emitter of the event</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "callback.obj",
              "type": "Object",
              "description": "<p>optional event related data</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            },
            {
              "name": "context",
              "type": "Object",
              "description": "<p>optional context of the function callback.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "off",
          "access": "",
          "virtual": false,
          "description": "<p>The .off() method removes event handlers that were attached with {@link #on}.<br>\nCalling .off() with no arguments removes all handlers attached to the elements.<br>\n<br>\nIf a simple event name such as &quot;move&quot; is provided, all events of that type are removed from the figure.</p>",
          "parameters": [
            {
              "name": "eventOrFunction",
              "type": [
                "String",
                "function"
              ],
              "description": "<p>the event name of the registerd function or the function itself</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "getBestChild",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the best figure at the location [x,y]. It is a simple hit test. Keep in mind that only visible objects\nare returned.</p>",
          "parameters": [
            {
              "name": "x",
              "type": "Number",
              "description": "<p>The x position.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "y",
              "type": "Number",
              "description": "<p>The y position.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "figureToIgnore",
              "type": [
                "draw2d.Figure",
                "Array"
              ],
              "description": "<p>The figures which should be ignored.</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        }
      ]
    }
  ]
}