{
  "name": "util",
  "namespace": "draw2d",
  "description": "",
  "access": "",
  "virtual": false,
  "classes": [
    {
      "name": "ArrayList",
      "namespace": "draw2d.util",
      "description": "<p>draw2d.util.ArrayList</p>\n<p><Disclaimer> Writing my own class for arrays was one of my worst ideas...</p>\n<p>An ArrayList stores a variable number of objects. This is similar to making an array of\nobjects, but with an ArrayList, items can be easily added and removed from the ArrayList\nand it is resized dynamically. This can be very convenient, but it's slower than making\nan array of objects when using many elements.</p>",
      "extends": [],
      "access": "",
      "virtual": false,
      "fires": "",
      "constructor": {
        "name": "ArrayList",
        "description": "",
        "parameters": [],
        "examples": []
      },
      "functions": [
        {
          "name": "clear",
          "access": "",
          "virtual": false,
          "description": "<p>Clears the array</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "reverse",
          "access": "",
          "virtual": false,
          "description": "<p>Reverses the order of the elements in the ArrayList. The array will be modified!</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "getSize",
          "access": "",
          "virtual": false,
          "description": "<p>The size/count of the stored objects.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": ""
          }
        },
        {
          "name": "isEmpty",
          "access": "",
          "virtual": false,
          "description": "<p>checks to see if the Vector has any elements.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": "<p>true if the list is empty</p>"
          }
        },
        {
          "name": "last",
          "access": "",
          "virtual": false,
          "description": "<p>return the last element.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Object",
            "description": ""
          }
        },
        {
          "name": "asArray",
          "access": "",
          "virtual": false,
          "description": "<p>Return a reference to the internal javascript native array.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Array",
            "description": ""
          }
        },
        {
          "name": "first",
          "access": "",
          "virtual": false,
          "description": "<p>returns the first element</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Object",
            "description": ""
          }
        },
        {
          "name": "get",
          "access": "",
          "virtual": false,
          "description": "<p>returns an element at a specified index</p>",
          "parameters": [
            {
              "name": "i",
              "type": "Number",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Object",
            "description": ""
          }
        },
        {
          "name": "add",
          "access": "",
          "virtual": false,
          "description": "<p>Adds a element at the end of the Vector.</p>",
          "parameters": [
            {
              "name": "obj",
              "type": "Object",
              "description": "<p>the object to add</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "grep",
          "access": "",
          "virtual": false,
          "description": "<p>The method removes items from an array as necessary so that all remaining items pass a\nprovided test. The test is a function that is passed an array item and the index of the\nitem within the array. Only if the test returns true will the item stay in the array.</p>",
          "parameters": [
            {
              "name": "func",
              "type": "function",
              "description": "<p>the filter function(element,index)</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "func.value",
              "type": "Object",
              "description": "<p>value of the element in iteration.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "find",
          "access": "",
          "virtual": false,
          "description": "<p>Return ONE element which matches by the given function or <b>null</b>\nif no element is found.</p>\n<pre><code>var r1= figures.find(function(figure){\n              return figure.id===123456\n        });</code></pre>",
          "parameters": [
            {
              "name": "func",
              "type": "function",
              "description": "<p>the filter function</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "func.value",
              "type": "Object",
              "description": "<p>value of the element in iteration.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "func.index",
              "type": "Object",
              "description": "<p>index of the element in collection.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "map",
          "access": "",
          "virtual": false,
          "description": "<p>Translate all items in the array into new items. The array list is modified after this call.\nYou must clone the array before if you want avoid this.</p>\n<pre><code>var labels = this.commands.clone().map(function(e){\n     return e.getLabel();\n});</code></pre>",
          "parameters": [
            {
              "name": "func",
              "type": "function",
              "description": "<p>The function to process each item against. The first argument to the function is the value; the second argument is the index or key of the array or object property.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "func.value",
              "type": "Object",
              "description": "<p>value of the element in iteration.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "func.i",
              "type": "Number",
              "description": "<p>index of the element in iteration</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "unique",
          "access": "",
          "virtual": false,
          "description": "<p>Removes any duplicate elements from the array. The array is modified after this call. You\nmust clone the array before if you want avoid this</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "addAll",
          "access": "",
          "virtual": false,
          "description": "<p>Add all elements into this array.</p>",
          "parameters": [
            {
              "name": "list",
              "type": "draw2d.util.ArrayList",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "avoidDuplicates",
              "type": "Boolean",
              "description": "<p>checks whenever the new elements exists before insert if the parameter is to [true]</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "pop",
          "access": "",
          "virtual": false,
          "description": "<p>You can use the Array list as Stack as well. this is the pop method to remove one element\nat the end of the stack.</p>",
          "parameters": [],
          "examples": []
        },
        {
          "name": "push",
          "access": "",
          "virtual": false,
          "description": "<p>Push one element at the top of the stack/array</p>",
          "parameters": [
            {
              "name": "path",
              "type": "",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "remove",
          "access": "",
          "virtual": false,
          "description": "<p>Remove the element from the list</p>",
          "parameters": [
            {
              "name": "obj",
              "type": "Object",
              "description": "<p>the object to remove</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Object",
            "description": "<p>the removed object or null</p>"
          }
        },
        {
          "name": "insertElementAt",
          "access": "",
          "virtual": false,
          "description": "<p>Inserts an element at a given position. Existing elements will be shifted\nto the right.</p>",
          "parameters": [
            {
              "name": "obj",
              "type": "Object",
              "description": "<p>the object to insert.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "index",
              "type": "Number",
              "description": "<p>the insert position.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "removeElementAt",
          "access": "",
          "virtual": false,
          "description": "<p>Removes an element at a specific index.</p>",
          "parameters": [
            {
              "name": "index",
              "type": "Number",
              "description": "<p>the index of the element to remove</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Object",
            "description": "<p>the removed object</p>"
          }
        },
        {
          "name": "removeAll",
          "access": "",
          "virtual": false,
          "description": "<p>removes all given elements in the ArrayList</p>",
          "parameters": [
            {
              "name": "elements",
              "type": "draw2d.util.ArrayList",
              "description": "<p>The elements to remove</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "indexOf",
          "access": "",
          "virtual": false,
          "description": "<p>Return the zero based index of the given element or -1 if the element\nnot in the list.</p>",
          "parameters": [
            {
              "name": "obj",
              "type": "Object",
              "description": "<p>the element to check</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the index of the element or -1</p>"
          }
        },
        {
          "name": "contains",
          "access": "",
          "virtual": false,
          "description": "<p>returns true if the element is in the Vector, otherwise false.</p>",
          "parameters": [
            {
              "name": "obj",
              "type": "Object",
              "description": "<p>the object to check</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        },
        {
          "name": "sort",
          "access": "",
          "virtual": false,
          "description": "<p>Sorts the collection based on a field name or sort a function. See on http://www.w3schools.com/jsref/jsref_sort.asp\nif you use a sort function.</p>",
          "parameters": [
            {
              "name": "f",
              "type": [
                "String",
                "function"
              ],
              "description": "<p>the field name for the sorting or a sort function</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": "<p>self</p>"
          }
        },
        {
          "name": "clone",
          "access": "",
          "virtual": false,
          "description": "<p>Copies the contents of a Vector to another Vector returning the new Vector.</p>",
          "parameters": [
            {
              "name": "deep",
              "type": "Boolean",
              "description": "<p>call &quot;clone&quot; of each elements and add the clone to the new ArrayList</p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.util.ArrayList",
            "description": "<p>the new ArrayList</p>"
          }
        },
        {
          "name": "each",
          "access": "",
          "virtual": false,
          "description": "<p>Iterates over the list of elements, yielding each in turn to an iterator\nfunction.\nEach invocation of iterator is called with two arguments: (index, element).</p>",
          "parameters": [
            {
              "name": "func",
              "type": "function",
              "description": "<p>the callback function to call for each element</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "func.i",
              "type": "Number",
              "description": "<p>index of the element in iteration</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "func.value",
              "type": "Object",
              "description": "<p>value of the element in iteration.</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "reverse",
              "type": "Boolean",
              "description": "<p>optional parameter. Iterate the collection reverse if it set to <b>true</b></p>",
              "default": "",
              "optional": true,
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "setPersistentAttributes",
          "access": "",
          "virtual": false,
          "description": "<p>Read all attributes from the serialized properties and transfer them into the shape.</p>",
          "parameters": [
            {
              "name": "memento",
              "type": "Object",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        }
      ]
    },
    {
      "name": "Color",
      "namespace": "draw2d.util",
      "description": "<p>Util class to handle colors in the draw2d enviroment.</p>\n<pre><code> // Create a new Color with RGB values\n var color = new draw2d.util.Color(127,0,0);\n\n // of from a hex string\n var color2 = new draw2d.util.Color(&quot;#f00000&quot;);\n\n // Create a little bit darker color\n var darkerColor = color.darker(0.2); // 20% darker\n\n // create a optimal text color if 'color' the background color\n // (best in meaning of contrast and readability)\n var fontColor = color.getIdealTextColor();</code></pre>",
      "extends": [],
      "access": "",
      "virtual": false,
      "fires": "",
      "constructor": {
        "name": "Color",
        "description": "",
        "parameters": [
          {
            "name": "red",
            "type": [
              "Number",
              "String",
              "draw2d.util.Color",
              "Array"
            ],
            "description": "",
            "default": "",
            "optional": "",
            "nullable": ""
          },
          {
            "name": "green",
            "type": "Number",
            "description": "",
            "default": "",
            "optional": "",
            "nullable": ""
          },
          {
            "name": "blue",
            "type": "Number",
            "description": "",
            "default": "",
            "optional": "",
            "nullable": ""
          },
          {
            "name": "alpha",
            "type": "Number",
            "description": "",
            "default": "",
            "optional": true,
            "nullable": ""
          }
        ],
        "examples": []
      },
      "functions": [
        {
          "name": "getHTMLStyle",
          "access": "",
          "virtual": false,
          "description": "<p>Convert the color object into a HTML CSS representation</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "String",
            "description": "<p>the color in rgb(##,##,##) representation</p>"
          }
        },
        {
          "name": "getRed",
          "access": "",
          "virtual": false,
          "description": "<p>The red part of the color.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the [red] part of the color.</p>"
          }
        },
        {
          "name": "getGreen",
          "access": "",
          "virtual": false,
          "description": "<p>The green part of the color.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the [green] part of the color.</p>"
          }
        },
        {
          "name": "getBlue",
          "access": "",
          "virtual": false,
          "description": "<p>The blue part of the color</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the [blue] part of the color.</p>"
          }
        },
        {
          "name": "getAlpha",
          "access": "",
          "virtual": false,
          "description": "<p>The alpha part of the color</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "Number",
            "description": "<p>the [alpha] part of the color.</p>"
          }
        },
        {
          "name": "getIdealTextColor",
          "access": "",
          "virtual": false,
          "description": "<p>Returns the ideal Text Color. Useful for font color selection by a given background color.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "draw2d.util.Color",
            "description": "<p>The <i>ideal</i> inverse color.</p>"
          }
        },
        {
          "name": "hex2rgb",
          "access": "",
          "virtual": false,
          "description": "<p>return array of [r,g,b,a] from any valid color. if failed returns [0,0,0,1]</p>",
          "parameters": [
            {
              "name": "hexcolor",
              "type": "",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "*",
            "description": ""
          }
        },
        {
          "name": "hex",
          "access": "",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "rgba",
          "access": "",
          "virtual": false,
          "description": "<p>Convert the color object into a HTML CSS representation</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "String",
            "description": "<p>the color in rgb(##,##,##) representation</p>"
          }
        },
        {
          "name": "hash",
          "access": "",
          "virtual": false,
          "description": "<p>Convert the color object into a HTML CSS representation</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "String",
            "description": "<p>the color in #RRGGBB representation</p>"
          }
        },
        {
          "name": "int2hex",
          "access": "private",
          "virtual": false,
          "description": "",
          "parameters": [],
          "examples": []
        },
        {
          "name": "darker",
          "access": "",
          "virtual": false,
          "description": "<p>Returns a darker color of the given one. The original color is unchanged.</p>",
          "parameters": [
            {
              "name": "fraction",
              "type": "Number",
              "description": "<p>Darkness fraction between [0..1].</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": []
        },
        {
          "name": "lighter",
          "access": "",
          "virtual": false,
          "description": "<p>Make a color lighter. The original color is unchanged.</p>",
          "parameters": [
            {
              "name": "fraction",
              "type": "Number",
              "description": "<p>lighter fraction between [0..1].</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.util.Color",
            "description": "<p>Lighter color.</p>"
          }
        },
        {
          "name": "fadeTo",
          "access": "",
          "virtual": false,
          "description": "<p>Return a new color wich is faded to the given color.</p>",
          "parameters": [
            {
              "name": "color",
              "type": "draw2d.util.Color",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            },
            {
              "name": "pc",
              "type": "Number",
              "description": "<p>the fade percentage in [0..1]</p>",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "draw2d.util.Color",
            "description": ""
          }
        },
        {
          "name": "equals",
          "access": "",
          "virtual": false,
          "description": "<p>Compares two color objects</p>",
          "parameters": [
            {
              "name": "o",
              "type": "draw2d.util.Color",
              "description": "",
              "default": "",
              "optional": "",
              "nullable": ""
            }
          ],
          "examples": [],
          "returns": {
            "type": "Boolean",
            "description": ""
          }
        }
      ]
    },
    {
      "name": "UUID",
      "namespace": "draw2d.util",
      "description": "<p>draw2d.util.UUID\nGenerates a (pseudo) UUID's</p>\n<pre><code> // a UUID in the format\n // xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx (8-4-4-4-12)\n var id = draw2d.util.UUID.create();</code></pre>",
      "extends": [],
      "access": "private",
      "virtual": false,
      "fires": "",
      "constructor": {
        "name": "UUID",
        "description": "",
        "parameters": [],
        "examples": []
      },
      "functions": [
        {
          "name": "create",
          "access": "",
          "virtual": false,
          "description": "<p>Generates a unique id.<br>\nBut just for the correctness: <strong>this is no Global Unique Identifier</strong>, it is just a random generator\nwith the output that looks like a GUID. <br>\nBut may be also useful.</p>",
          "parameters": [],
          "examples": [],
          "returns": {
            "type": "String",
            "description": "<p>the  UUID in the format xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx (8-4-4-4-12)</p>"
          }
        }
      ]
    }
  ]
}